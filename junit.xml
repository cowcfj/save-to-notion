<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="1671" failures="3" errors="0" time="25.545">
  <testsuite name="PerformanceOptimizer - 全面測試" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:41:52" time="5.71" tests="52">
    <testcase classname="PerformanceOptimizer - 全面測試 構造函數和初始化 應該使用默認選項創建實例" name="PerformanceOptimizer - 全面測試 構造函數和初始化 應該使用默認選項創建實例" time="0.053">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 構造函數和初始化 應該合併自定義選項" name="PerformanceOptimizer - 全面測試 構造函數和初始化 應該合併自定義選項" time="0.009">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 構造函數和初始化 應該初始化緩存統計" name="PerformanceOptimizer - 全面測試 構造函數和初始化 應該初始化緩存統計" time="0.005">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 構造函數和初始化 應該初始化批處理統計" name="PerformanceOptimizer - 全面測試 構造函數和初始化 應該初始化批處理統計" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該執行並緩存查詢結果" name="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該執行並緩存查詢結果" time="0.007">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該從緩存返回結果" name="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該從緩存返回結果" time="0.005">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該支持 single 選項" name="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該支持 single 選項" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該支持 all 選項" name="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該支持 all 選項" time="0.006">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該處理無效選擇器" name="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該處理無效選擇器" time="0.006">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該在禁用緩存時直接查詢" name="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該在禁用緩存時直接查詢" time="0.005">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該驗證緩存的元素是否仍在 DOM 中" name="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該驗證緩存的元素是否仍在 DOM 中" time="0.006">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該根據不同的 context 生成不同的緩存鍵" name="PerformanceOptimizer - 全面測試 cachedQuery - DOM 查詢緩存 應該根據不同的 context 生成不同的緩存鍵" time="0.007">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 clearExpiredCache - 過期緩存清理 應該清理過期的緩存" name="PerformanceOptimizer - 全面測試 clearExpiredCache - 過期緩存清理 應該清理過期的緩存" time="0.005">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 clearExpiredCache - 過期緩存清理 應該支持強制清理所有緩存" name="PerformanceOptimizer - 全面測試 clearExpiredCache - 過期緩存清理 應該支持強制清理所有緩存" time="0.008">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 clearExpiredCache - 過期緩存清理 應該使用默認的 cacheTTL" name="PerformanceOptimizer - 全面測試 clearExpiredCache - 過期緩存清理 應該使用默認的 cacheTTL" time="0.005">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 refreshCache - 刷新緩存 應該刷新單個選擇器的緩存" name="PerformanceOptimizer - 全面測試 refreshCache - 刷新緩存 應該刷新單個選擇器的緩存" time="0.017">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 refreshCache - 刷新緩存 應該刷新多個選擇器的緩存" name="PerformanceOptimizer - 全面測試 refreshCache - 刷新緩存 應該刷新多個選擇器的緩存" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 refreshCache - 刷新緩存 應該刪除查詢結果為空的緩存" name="PerformanceOptimizer - 全面測試 refreshCache - 刷新緩存 應該刪除查詢結果為空的緩存" time="0.006">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 preloadSelectors - 選擇器預熱 應該預熱選擇器並緩存結果" name="PerformanceOptimizer - 全面測試 preloadSelectors - 選擇器預熱 應該預熱選擇器並緩存結果" time="0.01">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 preloadSelectors - 選擇器預熱 應該跳過已預熱的選擇器" name="PerformanceOptimizer - 全面測試 preloadSelectors - 選擇器預熱 應該跳過已預熱的選擇器" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 preloadSelectors - 選擇器預熱 應該處理預熱失敗的選擇器" name="PerformanceOptimizer - 全面測試 preloadSelectors - 選擇器預熱 應該處理預熱失敗的選擇器" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 preloadSelectors - 選擇器預熱 應該在禁用緩存時返回空數組" name="PerformanceOptimizer - 全面測試 preloadSelectors - 選擇器預熱 應該在禁用緩存時返回空數組" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 preloadSelectors - 選擇器預熱 應該處理無效的選擇器參數" name="PerformanceOptimizer - 全面測試 preloadSelectors - 選擇器預熱 應該處理無效的選擇器參數" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 smartPrewarm - 智能預熱 應該基於頁面結構預熱選擇器" name="PerformanceOptimizer - 全面測試 smartPrewarm - 智能預熱 應該基於頁面結構預熱選擇器" time="0.008">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 smartPrewarm - 智能預熱 應該識別 article 結構" name="PerformanceOptimizer - 全面測試 smartPrewarm - 智能預熱 應該識別 article 結構" time="0.005">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 smartPrewarm - 智能預熱 應該識別 role=&quot;main&quot; 結構" name="PerformanceOptimizer - 全面測試 smartPrewarm - 智能預熱 應該識別 role=&quot;main&quot; 結構" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 smartPrewarm - 智能預熱 應該識別 CMS 類名模式" name="PerformanceOptimizer - 全面測試 smartPrewarm - 智能預熱 應該識別 CMS 類名模式" time="0.007">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 batchProcessImages - 批處理圖片 應該批處理圖片並返回結果" name="PerformanceOptimizer - 全面測試 batchProcessImages - 批處理圖片 應該批處理圖片並返回結果" time="0.006">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 batchProcessImages - 批處理圖片 應該在禁用批處理時直接處理" name="PerformanceOptimizer - 全面測試 batchProcessImages - 批處理圖片 應該在禁用批處理時直接處理" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 batchDomOperations - 批處理 DOM 操作 應該批處理 DOM 操作" name="PerformanceOptimizer - 全面測試 batchDomOperations - 批處理 DOM 操作 應該批處理 DOM 操作" time="0.027">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 batchDomOperations - 批處理 DOM 操作 應該在禁用批處理時直接執行操作" name="PerformanceOptimizer - 全面測試 batchDomOperations - 批處理 DOM 操作 應該在禁用批處理時直接執行操作" time="0.003">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 batchDomOperations - 批處理 DOM 操作 應該處理批處理中的錯誤" name="PerformanceOptimizer - 全面測試 batchDomOperations - 批處理 DOM 操作 應該處理批處理中的錯誤" time="0.006">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 preloadImages - 預加載圖片 應該預加載圖片" name="PerformanceOptimizer - 全面測試 preloadImages - 預加載圖片 應該預加載圖片" time="5.007">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 preloadImages - 預加載圖片 應該處理圖片加載超時" name="PerformanceOptimizer - 全面測試 preloadImages - 預加載圖片 應該處理圖片加載超時" time="0.117">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 clearCache - 清理緩存 應該強制清理所有緩存" name="PerformanceOptimizer - 全面測試 clearCache - 清理緩存 應該強制清理所有緩存" time="0.013">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 clearCache - 清理緩存 應該清理過期的緩存" name="PerformanceOptimizer - 全面測試 clearCache - 清理緩存 應該清理過期的緩存" time="0.008">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 clearCache - 清理緩存 應該使用默認的最大年齡" name="PerformanceOptimizer - 全面測試 clearCache - 清理緩存 應該使用默認的最大年齡" time="0.007">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 getStats - 獲取統計信息 應該返回完整的統計信息" name="PerformanceOptimizer - 全面測試 getStats - 獲取統計信息 應該返回完整的統計信息" time="0.005">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 getStats - 獲取統計信息 應該計算緩存命中率" name="PerformanceOptimizer - 全面測試 getStats - 獲取統計信息 應該計算緩存命中率" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 getStats - 獲取統計信息 應該返回內存統計或 null" name="PerformanceOptimizer - 全面測試 getStats - 獲取統計信息 應該返回內存統計或 null" time="0.005">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 getPerformanceStats - 別名方法 應該返回與 getStats 相同的結果" name="PerformanceOptimizer - 全面測試 getPerformanceStats - 別名方法 應該返回與 getStats 相同的結果" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 resetStats - 重置統計 應該重置所有統計信息" name="PerformanceOptimizer - 全面測試 resetStats - 重置統計 應該重置所有統計信息" time="0.009">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 adjustForSystemLoad - 系統負載調整 應該根據性能調整參數" name="PerformanceOptimizer - 全面測試 adjustForSystemLoad - 系統負載調整 應該根據性能調整參數" time="0.005">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 adjustForSystemLoad - 系統負載調整 應該清理過期緩存" name="PerformanceOptimizer - 全面測試 adjustForSystemLoad - 系統負載調整 應該清理過期緩存" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 enableAdaptiveOptimization - 啟用自適應優化 應該啟用自適應管理器" name="PerformanceOptimizer - 全面測試 enableAdaptiveOptimization - 啟用自適應優化 應該啟用自適應管理器" time="0.003">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 enableAdaptiveOptimization - 啟用自適應優化 應該在已有管理器時不重複創建" name="PerformanceOptimizer - 全面測試 enableAdaptiveOptimization - 啟用自適應優化 應該在已有管理器時不重複創建" time="0.003">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 adaptiveAdjustment - 自適應調整 應該在沒有管理器時返回 null" name="PerformanceOptimizer - 全面測試 adaptiveAdjustment - 自適應調整 應該在沒有管理器時返回 null" time="0.003">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 adaptiveAdjustment - 自適應調整 應該調用管理器的 analyzeAndAdjust 方法" name="PerformanceOptimizer - 全面測試 adaptiveAdjustment - 自適應調整 應該調用管理器的 analyzeAndAdjust 方法" time="0.003">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 _maintainCacheSizeLimit - 維護緩存大小 應該在達到限制時移除最舊的項目" name="PerformanceOptimizer - 全面測試 _maintainCacheSizeLimit - 維護緩存大小 應該在達到限制時移除最舊的項目" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 便捷函數 cachedQuery 函數應該使用默認實例" name="PerformanceOptimizer - 全面測試 便捷函數 cachedQuery 函數應該使用默認實例" time="0.003">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 便捷函數 batchProcess 函數應該使用默認實例" name="PerformanceOptimizer - 全面測試 便捷函數 batchProcess 函數應該使用默認實例" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer - 全面測試 模塊導出 應該正確導出到 module.exports" name="PerformanceOptimizer - 全面測試 模塊導出 應該正確導出到 module.exports" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Notion API - 基礎頁面創建" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:41:58" time="2.68" tests="39">
    <testcase classname="Notion API - 基礎頁面創建 createNotionPage() 應該成功創建基本頁面" name="Notion API - 基礎頁面創建 createNotionPage() 應該成功創建基本頁面" time="0.001">
    </testcase>
    <testcase classname="Notion API - 基礎頁面創建 createNotionPage() 應該處理 API Key 無效錯誤" name="Notion API - 基礎頁面創建 createNotionPage() 應該處理 API Key 無效錯誤" time="0.001">
    </testcase>
    <testcase classname="Notion API - 基礎頁面創建 createNotionPage() 應該處理數據庫不存在錯誤" name="Notion API - 基礎頁面創建 createNotionPage() 應該處理數據庫不存在錯誤" time="0">
    </testcase>
    <testcase classname="Notion API - 基礎頁面創建 createNotionPage() 應該處理網絡錯誤" name="Notion API - 基礎頁面創建 createNotionPage() 應該處理網絡錯誤" time="0.002">
    </testcase>
    <testcase classname="Notion API - 批次追加邏輯 appendBlocksInBatches() 應該成功追加少量區塊（&lt; 100）" name="Notion API - 批次追加邏輯 appendBlocksInBatches() 應該成功追加少量區塊（&lt; 100）" time="0.001">
    </testcase>
    <testcase classname="Notion API - 批次追加邏輯 appendBlocksInBatches() 應該分批追加大量區塊（&gt; 100）" name="Notion API - 批次追加邏輯 appendBlocksInBatches() 應該分批追加大量區塊（&gt; 100）" time="0">
    </testcase>
    <testcase classname="Notion API - 批次追加邏輯 appendBlocksInBatches() 應該處理批次中的錯誤" name="Notion API - 批次追加邏輯 appendBlocksInBatches() 應該處理批次中的錯誤" time="0.001">
    </testcase>
    <testcase classname="Notion API - 資料來源獲取 fetchDatabases() 應該成功獲取資料來源列表" name="Notion API - 資料來源獲取 fetchDatabases() 應該成功獲取資料來源列表" time="0">
    </testcase>
    <testcase classname="Notion API - 資料來源獲取 fetchDatabases() 應該處理空資料來源列表" name="Notion API - 資料來源獲取 fetchDatabases() 應該處理空資料來源列表" time="0.001">
    </testcase>
    <testcase classname="Notion API - 資料來源獲取 fetchDatabases() 應該處理分頁結果" name="Notion API - 資料來源獲取 fetchDatabases() 應該處理分頁結果" time="0">
    </testcase>
    <testcase classname="Notion API - API Key 驗證 testApiKey() 應該驗證有效的 API Key" name="Notion API - API Key 驗證 testApiKey() 應該驗證有效的 API Key" time="0.001">
    </testcase>
    <testcase classname="Notion API - API Key 驗證 testApiKey() 應該拒絕無效的 API Key" name="Notion API - API Key 驗證 testApiKey() 應該拒絕無效的 API Key" time="0">
    </testcase>
    <testcase classname="Notion API - API Key 驗證 testApiKey() 應該處理空 API Key" name="Notion API - API Key 驗證 testApiKey() 應該處理空 API Key" time="0">
    </testcase>
    <testcase classname="Notion API - API Key 驗證 testApiKey() 應該處理格式錯誤的 API Key" name="Notion API - API Key 驗證 testApiKey() 應該處理格式錯誤的 API Key" time="0">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 HTTP 狀態碼處理 應該處理 401 未授權錯誤" name="Notion API - 錯誤處理增強 HTTP 狀態碼處理 應該處理 401 未授權錯誤" time="0.001">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 HTTP 狀態碼處理 應該處理 404 資源不存在錯誤" name="Notion API - 錯誤處理增強 HTTP 狀態碼處理 應該處理 404 資源不存在錯誤" time="0">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 HTTP 狀態碼處理 應該處理 429 速率限制錯誤" name="Notion API - 錯誤處理增強 HTTP 狀態碼處理 應該處理 429 速率限制錯誤" time="0">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 HTTP 狀態碼處理 應該處理 500 服務器錯誤" name="Notion API - 錯誤處理增強 HTTP 狀態碼處理 應該處理 500 服務器錯誤" time="0">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 HTTP 狀態碼處理 應該處理 503 服務不可用錯誤" name="Notion API - 錯誤處理增強 HTTP 狀態碼處理 應該處理 503 服務不可用錯誤" time="0">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 網絡錯誤處理 應該處理網絡超時" name="Notion API - 錯誤處理增強 網絡錯誤處理 應該處理網絡超時" time="0.001">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 網絡錯誤處理 應該處理連接失敗" name="Notion API - 錯誤處理增強 網絡錯誤處理 應該處理連接失敗" time="0">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 網絡錯誤處理 應該處理 DNS 解析失敗" name="Notion API - 錯誤處理增強 網絡錯誤處理 應該處理 DNS 解析失敗" time="0.001">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 網絡錯誤處理 應該處理 SSL 證書錯誤" name="Notion API - 錯誤處理增強 網絡錯誤處理 應該處理 SSL 證書錯誤" time="0">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 數據驗證錯誤 應該處理無效的請求體" name="Notion API - 錯誤處理增強 數據驗證錯誤 應該處理無效的請求體" time="0.001">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 數據驗證錯誤 應該處理缺少必需字段" name="Notion API - 錯誤處理增強 數據驗證錯誤 應該處理缺少必需字段" time="0">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 數據驗證錯誤 應該處理無效的區塊類型" name="Notion API - 錯誤處理增強 數據驗證錯誤 應該處理無效的區塊類型" time="0.001">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 權限錯誤 應該處理無權限訪問資料來源" name="Notion API - 錯誤處理增強 權限錯誤 應該處理無權限訪問資料來源" time="0">
    </testcase>
    <testcase classname="Notion API - 錯誤處理增強 權限錯誤 應該處理無權限創建頁面" name="Notion API - 錯誤處理增強 權限錯誤 應該處理無權限創建頁面" time="0.001">
    </testcase>
    <testcase classname="Notion API - 重試邏輯 自動重試機制 應該在暫時性錯誤後重試" name="Notion API - 重試邏輯 自動重試機制 應該在暫時性錯誤後重試" time="0.102">
    </testcase>
    <testcase classname="Notion API - 重試邏輯 自動重試機制 應該在多次失敗後放棄" name="Notion API - 重試邏輯 自動重試機制 應該在多次失敗後放棄" time="0.001">
    </testcase>
    <testcase classname="Notion API - 重試邏輯 自動重試機制 應該使用指數退避策略" name="Notion API - 重試邏輯 自動重試機制 應該使用指數退避策略" time="0.305">
    </testcase>
    <testcase classname="Notion API - 重試邏輯 自動重試機制 不應該重試 4xx 客戶端錯誤" name="Notion API - 重試邏輯 自動重試機制 不應該重試 4xx 客戶端錯誤" time="0.003">
    </testcase>
    <testcase classname="Notion API - 重試邏輯 自動重試機制 應該重試 5xx 服務器錯誤" name="Notion API - 重試邏輯 自動重試機制 應該重試 5xx 服務器錯誤" time="0.103">
    </testcase>
    <testcase classname="Notion API - 重試邏輯 速率限制處理 應該遵守 Retry-After 標頭" name="Notion API - 重試邏輯 速率限制處理 應該遵守 Retry-After 標頭" time="2.003">
    </testcase>
    <testcase classname="Notion API - 批次處理優化 大量數據處理 應該正確計算批次數量" name="Notion API - 批次處理優化 大量數據處理 應該正確計算批次數量" time="0.001">
    </testcase>
    <testcase classname="Notion API - 批次處理優化 大量數據處理 應該處理剛好整除的批次" name="Notion API - 批次處理優化 大量數據處理 應該處理剛好整除的批次" time="0.001">
    </testcase>
    <testcase classname="Notion API - 批次處理優化 大量數據處理 應該處理少於一個批次的數據" name="Notion API - 批次處理優化 大量數據處理 應該處理少於一個批次的數據" time="0.002">
    </testcase>
    <testcase classname="Notion API - 批次處理優化 大量數據處理 應該追蹤批次進度" name="Notion API - 批次處理優化 大量數據處理 應該追蹤批次進度" time="0.002">
    </testcase>
    <testcase classname="Notion API - 批次處理優化 批次錯誤恢復 應該從失敗的批次繼續" name="Notion API - 批次處理優化 批次錯誤恢復 應該從失敗的批次繼續" time="0.102">
    </testcase>
  </testsuite>
  <testsuite name="content script integration test" errors="0" failures="1" skipped="0" timestamp="2025-10-26T07:42:00" time="6.159" tests="1">
    <testcase classname="content script integration test runs content.js and exposes result when window.__UNIT_TESTING__ is true" name="content script integration test runs content.js and exposes result when window.__UNIT_TESTING__ is true" time="6.063">
      <failure>Error: expect(received).toBeDefined()

Received: undefined
    at Object.&lt;anonymous&gt; (/Volumes/WD1TMac/code/notion-chrome/tests/unit/content/content-script.integration.test.js:56:24)</failure>
    </testcase>
  </testsuite>
  <testsuite name="content script require test" errors="0" failures="1" skipped="0" timestamp="2025-10-26T07:42:06" time="0.188" tests="1">
    <testcase classname="content script require test require scripts/content.js with jsdom globals" name="content script require test require scripts/content.js with jsdom globals" time="0.112">
      <failure>Jest encountered an unexpected token

Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

By default &quot;node_modules&quot; folder is ignored by transformers.

Here&apos;s what you can do:
 • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
 • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
 • To have some of your &quot;node_modules&quot; files transformed, you can specify a custom &quot;transformIgnorePatterns&quot; in your config.
 • If you need a custom transformation specify a &quot;transform&quot; option in your config.
 • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the &quot;moduleNameMapper&quot; config option.

You&apos;ll find more details and examples of these config options in the docs:
https://jestjs.io/docs/configuration
For information about custom transformations, see:
https://jestjs.io/docs/code-transformation

Details:

SyntaxError: /Volumes/WD1TMac/code/notion-chrome/scripts/content.js: Unexpected token (16:22)

  14 | // 條件日誌函數
  15 | const Logger = {
&gt; 16 |     log: (...args) =&gt; ,
     |                       ^
  17 |     warn: (...args) =&gt; console.warn(...args),
  18 |     error: (...args) =&gt; console.error(...args),
  19 |     info: (...args) =&gt; DEBUG_MODE &amp;&amp; console.info(...args)
    at constructor (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parse-error.ts:95:45)
    at Parser.toParseError [as raise] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/tokenizer/index.ts:1503:19)
    at Parser.raise [as unexpected] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/tokenizer/index.ts:1543:16)
    at Parser.unexpected [as parseExprAtom] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:1350:16)
    at Parser.parseExprAtom [as parseExprSubscripts] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:734:23)
    at Parser.parseExprSubscripts [as parseUpdate] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:713:21)
    at Parser.parseUpdate [as parseMaybeUnary] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:675:23)
    at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:409:14)
    at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:421:23)
    at Parser.parseExprOps [as parseMaybeConditional] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:376:23)
    at Parser.parseMaybeConditional [as parseMaybeAssign] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:301:21)
    at Parser.parseMaybeAssign [as parseFunctionBody] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:2602:14)
    at Parser.parseFunctionBody [as parseArrowExpression] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:2553:10)
    at Parser.parseArrowExpression [as parseParenAndDistinguishExpression] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:1837:12)
    at Parser.parseParenAndDistinguishExpression [as parseExprAtom] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:1162:21)
    at Parser.parseExprAtom [as parseExprSubscripts] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:734:23)
    at Parser.parseExprSubscripts [as parseUpdate] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:713:21)
    at Parser.parseUpdate [as parseMaybeUnary] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:675:23)
    at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:409:14)
    at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:421:23)
    at Parser.parseExprOps [as parseMaybeConditional] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:376:23)
    at Parser.parseMaybeConditional [as parseMaybeAssign] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:301:21)
    at parseMaybeAssign (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:257:12)
    at Parser.callback [as allowInAnd] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:3192:12)
    at Parser.allowInAnd [as parseMaybeAssignAllowIn] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:256:17)
    at Parser.parseMaybeAssignAllowIn [as parseMaybeAssignAllowInOrVoidPattern] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:3306:17)
    at Parser.parseMaybeAssignAllowInOrVoidPattern [as parseObjectProperty] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:2315:16)
    at Parser.parseObjectProperty [as parseObjPropValue] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:2378:12)
    at Parser.parseObjPropValue [as parsePropertyDefinition] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:2218:17)
    at Parser.parsePropertyDefinition [as parseObjectLike] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:2085:21)
    at Parser.parseObjectLike [as parseExprAtom] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:1174:21)
    at Parser.parseExprAtom [as parseExprSubscripts] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:734:23)
    at Parser.parseExprSubscripts [as parseUpdate] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:713:21)
    at Parser.parseUpdate [as parseMaybeUnary] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:675:23)
    at Parser.parseMaybeUnary [as parseMaybeUnaryOrPrivate] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:409:14)
    at Parser.parseMaybeUnaryOrPrivate [as parseExprOps] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:421:23)
    at Parser.parseExprOps [as parseMaybeConditional] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:376:23)
    at Parser.parseMaybeConditional [as parseMaybeAssign] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:301:21)
    at parseMaybeAssign (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:257:12)
    at Parser.callback [as allowInAnd] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:3187:16)
    at Parser.allowInAnd [as parseMaybeAssignAllowIn] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/expression.ts:256:17)
    at Parser.parseMaybeAssignAllowIn [as parseVar] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/statement.ts:1582:18)
    at Parser.parseVar [as parseVarStatement] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/statement.ts:1246:10)
    at Parser.parseVarStatement [as parseStatementContent] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/statement.ts:607:21)
    at Parser.parseStatementContent [as parseStatementLike] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/statement.ts:477:17)
    at Parser.parseStatementLike [as parseModuleItem] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/statement.ts:414:17)
    at Parser.parseModuleItem [as parseBlockOrModuleBlockBody] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/statement.ts:1438:16)
    at Parser.parseBlockOrModuleBlockBody [as parseBlockBody] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/statement.ts:1412:10)
    at Parser.parseBlockBody [as parseProgram] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/statement.ts:229:10)
    at Parser.parseProgram [as parseTopLevel] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/statement.ts:203:25)
    at Parser.parseTopLevel [as parse] (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/parser/index.ts:93:10)
    at parse (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/parser/src/index.ts:92:38)
    at parser (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/core/src/parser/index.ts:28:19)
    at parser.next (&lt;anonymous&gt;)
    at normalizeFile (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/core/src/transformation/normalize-file.ts:49:24)
    at normalizeFile.next (&lt;anonymous&gt;)
    at run (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/core/src/transformation/index.ts:40:36)
    at run.next (&lt;anonymous&gt;)
    at transform (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/core/src/transform.ts:29:20)
    at transform.next (&lt;anonymous&gt;)
    at evaluateSync (/Volumes/WD1TMac/code/notion-chrome/node_modules/gensync/index.js:251:28)
    at sync (/Volumes/WD1TMac/code/notion-chrome/node_modules/gensync/index.js:89:14)
    at fn (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/core/src/errors/rewrite-stack-trace.ts:99:14)
    at transformSync (/Volumes/WD1TMac/code/notion-chrome/node_modules/@babel/core/src/transform.ts:66:52)
    at ScriptTransformer._instrumentFile (/Volumes/WD1TMac/code/notion-chrome/node_modules/@jest/transform/build/ScriptTransformer.js:389:46)
    at ScriptTransformer._buildTransformResult (/Volumes/WD1TMac/code/notion-chrome/node_modules/@jest/transform/build/ScriptTransformer.js:491:33)
    at ScriptTransformer.transformSource (/Volumes/WD1TMac/code/notion-chrome/node_modules/@jest/transform/build/ScriptTransformer.js:554:17)
    at ScriptTransformer._transformAndBuildScript (/Volumes/WD1TMac/code/notion-chrome/node_modules/@jest/transform/build/ScriptTransformer.js:674:40)
    at ScriptTransformer.transform (/Volumes/WD1TMac/code/notion-chrome/node_modules/@jest/transform/build/ScriptTransformer.js:726:19)
    at Runtime.transformFile (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-runtime/build/index.js:1465:53)
    at Runtime._execModule (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-runtime/build/index.js:1397:34)
    at Runtime._loadModule (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-runtime/build/index.js:1022:12)
    at Runtime.requireModule (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-runtime/build/index.js:882:12)
    at Runtime.requireModuleOrMock (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-runtime/build/index.js:1048:21)
    at Object.&lt;anonymous&gt; (/Volumes/WD1TMac/code/notion-chrome/tests/unit/content/content-script.require.test.js:42:9)
    at Promise.then.completed (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/run.js:316:40)
    at _runTest (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/run.js:121:9)
    at run (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
  </testsuite>
  <testsuite name="Background Notion API Operations" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:07" time="2.065" tests="16">
    <testcase classname="Background Notion API Operations saveToNotion 应该成功保存页面到 Notion" name="Background Notion API Operations saveToNotion 应该成功保存页面到 Notion" time="0.002">
    </testcase>
    <testcase classname="Background Notion API Operations saveToNotion 应该处理包含网站图标的保存请求" name="Background Notion API Operations saveToNotion 应该处理包含网站图标的保存请求" time="0.001">
    </testcase>
    <testcase classname="Background Notion API Operations saveToNotion 应该过滤掉有问题的图片区块" name="Background Notion API Operations saveToNotion 应该过滤掉有问题的图片区块" time="0.002">
    </testcase>
    <testcase classname="Background Notion API Operations saveToNotion 应该处理超过100个区块的长文章" name="Background Notion API Operations saveToNotion 应该处理超过100个区块的长文章" time="0.001">
    </testcase>
    <testcase classname="Background Notion API Operations saveToNotion 应该处理 Notion API 错误" name="Background Notion API Operations saveToNotion 应该处理 Notion API 错误" time="0.001">
    </testcase>
    <testcase classname="Background Notion API Operations saveToNotion 应该在图片验证错误时自动重试（排除所有图片）" name="Background Notion API Operations saveToNotion 应该在图片验证错误时自动重试（排除所有图片）" time="0.604">
    </testcase>
    <testcase classname="Background Notion API Operations saveToNotion 应该处理网络错误" name="Background Notion API Operations saveToNotion 应该处理网络错误" time="0.004">
    </testcase>
    <testcase classname="Background Notion API Operations checkNotionPageExists 应该返回 true 当页面存在且未归档时" name="Background Notion API Operations checkNotionPageExists 应该返回 true 当页面存在且未归档时" time="0.003">
    </testcase>
    <testcase classname="Background Notion API Operations checkNotionPageExists 应该返回 false 当页面已归档时" name="Background Notion API Operations checkNotionPageExists 应该返回 false 当页面已归档时" time="0.002">
    </testcase>
    <testcase classname="Background Notion API Operations checkNotionPageExists 应该返回 false 当页面不存在时（404）" name="Background Notion API Operations checkNotionPageExists 应该返回 false 当页面不存在时（404）" time="0.002">
    </testcase>
    <testcase classname="Background Notion API Operations checkNotionPageExists 应该处理网络错误" name="Background Notion API Operations checkNotionPageExists 应该处理网络错误" time="0.002">
    </testcase>
    <testcase classname="Background Notion API Operations checkNotionPageExists 应该处理服务器错误（5xx）" name="Background Notion API Operations checkNotionPageExists 应该处理服务器错误（5xx）" time="0.002">
    </testcase>
    <testcase classname="Background Notion API Operations appendBlocksInBatches 应该成功分批添加区块" name="Background Notion API Operations appendBlocksInBatches 应该成功分批添加区块" time="0.707">
    </testcase>
    <testcase classname="Background Notion API Operations appendBlocksInBatches 应该处理部分批次失败的情况" name="Background Notion API Operations appendBlocksInBatches 应该处理部分批次失败的情况" time="0.354">
    </testcase>
    <testcase classname="Background Notion API Operations appendBlocksInBatches 应该处理空区块数组" name="Background Notion API Operations appendBlocksInBatches 应该处理空区块数组" time="0.003">
    </testcase>
    <testcase classname="Background Notion API Operations appendBlocksInBatches 应该遵守速率限制（批次间延迟）" name="Background Notion API Operations appendBlocksInBatches 应该遵守速率限制（批次间延迟）" time="0.354">
    </testcase>
  </testsuite>
  <testsuite name="RetryManager - 全面測試" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:09" time="1.851" tests="50">
    <testcase classname="RetryManager - 全面測試 構造函數 應該使用默認選項創建實例" name="RetryManager - 全面測試 構造函數 應該使用默認選項創建實例" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 構造函數 應該合併自定義選項" name="RetryManager - 全面測試 構造函數 應該合併自定義選項" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 execute - 執行帶重試的操作 應該在成功時返回結果" name="RetryManager - 全面測試 execute - 執行帶重試的操作 應該在成功時返回結果" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 execute - 執行帶重試的操作 應該在失敗後重試" name="RetryManager - 全面測試 execute - 執行帶重試的操作 應該在失敗後重試" time="0.305">
    </testcase>
    <testcase classname="RetryManager - 全面測試 execute - 執行帶重試的操作 應該在重試次數用盡後拋出錯誤" name="RetryManager - 全面測試 execute - 執行帶重試的操作 應該在重試次數用盡後拋出錯誤" time="0.71">
    </testcase>
    <testcase classname="RetryManager - 全面測試 execute - 執行帶重試的操作 應該記錄重試成功" name="RetryManager - 全面測試 execute - 執行帶重試的操作 應該記錄重試成功" time="0.105">
    </testcase>
    <testcase classname="RetryManager - 全面測試 execute - 執行帶重試的操作 應該記錄重試失敗" name="RetryManager - 全面測試 execute - 執行帶重試的操作 應該記錄重試失敗" time="0.004">
    </testcase>
    <testcase classname="RetryManager - 全面測試 execute - 執行帶重試的操作 應該使用自定義的 shouldRetry 函數" name="RetryManager - 全面測試 execute - 執行帶重試的操作 應該使用自定義的 shouldRetry 函數" time="0.003">
    </testcase>
    <testcase classname="RetryManager - 全面測試 execute - 執行帶重試的操作 應該合併實例選項和調用選項" name="RetryManager - 全面測試 execute - 執行帶重試的操作 應該合併實例選項和調用選項" time="0.054">
    </testcase>
    <testcase classname="RetryManager - 全面測試 wrapFetch - 網絡請求包裝器 應該包裝 fetch 函數並添加重試" name="RetryManager - 全面測試 wrapFetch - 網絡請求包裝器 應該包裝 fetch 函數並添加重試" time="0.003">
    </testcase>
    <testcase classname="RetryManager - 全面測試 wrapFetch - 網絡請求包裝器 應該在網絡錯誤時重試" name="RetryManager - 全面測試 wrapFetch - 網絡請求包裝器 應該在網絡錯誤時重試" time="0.105">
    </testcase>
    <testcase classname="RetryManager - 全面測試 wrapFetch - 網絡請求包裝器 應該傳遞 fetch 選項" name="RetryManager - 全面測試 wrapFetch - 網絡請求包裝器 應該傳遞 fetch 選項" time="0.003">
    </testcase>
    <testcase classname="RetryManager - 全面測試 wrapFetch - 網絡請求包裝器 應該支持自定義重試選項" name="RetryManager - 全面測試 wrapFetch - 網絡請求包裝器 應該支持自定義重試選項" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 wrapDomOperation - DOM 操作包裝器 應該包裝 DOM 操作並添加重試" name="RetryManager - 全面測試 wrapDomOperation - DOM 操作包裝器 應該包裝 DOM 操作並添加重試" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 wrapDomOperation - DOM 操作包裝器 應該在 DOM 錯誤時重試" name="RetryManager - 全面測試 wrapDomOperation - DOM 操作包裝器 應該在 DOM 錯誤時重試" time="0.054">
    </testcase>
    <testcase classname="RetryManager - 全面測試 wrapDomOperation - DOM 操作包裝器 應該傳遞參數到 DOM 操作" name="RetryManager - 全面測試 wrapDomOperation - DOM 操作包裝器 應該傳遞參數到 DOM 操作" time="0.003">
    </testcase>
    <testcase classname="RetryManager - 全面測試 wrapDomOperation - DOM 操作包裝器 應該使用較少的重試次數" name="RetryManager - 全面測試 wrapDomOperation - DOM 操作包裝器 應該使用較少的重試次數" time="0.157">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別 NetworkError" name="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別 NetworkError" time="0.003">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別 TimeoutError" name="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別 TimeoutError" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別包含 fetch 的錯誤消息" name="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別包含 fetch 的錯誤消息" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別 5xx 錯誤" name="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別 5xx 錯誤" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別 429 錯誤" name="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別 429 錯誤" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別 408 錯誤" name="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該識別 408 錯誤" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該拒絕 4xx 客戶端錯誤" name="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該拒絕 4xx 客戶端錯誤" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該拒絕未知錯誤" name="RetryManager - 全面測試 _shouldRetryNetworkError - 網絡錯誤判斷 應該拒絕未知錯誤" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該識別 InvalidStateError" name="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該識別 InvalidStateError" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該識別 &quot;not ready&quot; 消息" name="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該識別 &quot;not ready&quot; 消息" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該識別 &quot;loading&quot; 消息" name="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該識別 &quot;loading&quot; 消息" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該識別 NotFoundError" name="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該識別 NotFoundError" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該識別 &quot;not found&quot; 消息" name="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該識別 &quot;not found&quot; 消息" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該拒絕其他 DOM 錯誤" name="RetryManager - 全面測試 _shouldRetryDomError - DOM 錯誤判斷 應該拒絕其他 DOM 錯誤" time="0.009">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _calculateDelay - 延遲計算 應該計算指數退避延遲" name="RetryManager - 全面測試 _calculateDelay - 延遲計算 應該計算指數退避延遲" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _calculateDelay - 延遲計算 應該限制最大延遲" name="RetryManager - 全面測試 _calculateDelay - 延遲計算 應該限制最大延遲" time="0">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _calculateDelay - 延遲計算 應該支持抖動" name="RetryManager - 全面測試 _calculateDelay - 延遲計算 應該支持抖動" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _calculateDelay - 延遲計算 應該返回整數延遲" name="RetryManager - 全面測試 _calculateDelay - 延遲計算 應該返回整數延遲" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _delay - 延遲執行 應該延遲指定的毫秒數" name="RetryManager - 全面測試 _delay - 延遲執行 應該延遲指定的毫秒數" time="0.102">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetry - 通用重試判斷 應該使用自定義的 shouldRetry 函數" name="RetryManager - 全面測試 _shouldRetry - 通用重試判斷 應該使用自定義的 shouldRetry 函數" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _shouldRetry - 通用重試判斷 應該使用默認的網絡錯誤判斷" name="RetryManager - 全面測試 _shouldRetry - 通用重試判斷 應該使用默認的網絡錯誤判斷" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _logRetryAttempt - 記錄重試嘗試 應該記錄重試嘗試信息" name="RetryManager - 全面測試 _logRetryAttempt - 記錄重試嘗試 應該記錄重試嘗試信息" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _logRetryAttempt - 記錄重試嘗試 應該使用 ErrorHandler 如果可用" name="RetryManager - 全面測試 _logRetryAttempt - 記錄重試嘗試 應該使用 ErrorHandler 如果可用" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _logRetrySuccess - 記錄重試成功 應該記錄成功信息" name="RetryManager - 全面測試 _logRetrySuccess - 記錄重試成功 應該記錄成功信息" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _logRetryFailure - 記錄重試失敗 應該記錄失敗信息" name="RetryManager - 全面測試 _logRetryFailure - 記錄重試失敗 應該記錄失敗信息" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 _logRetryFailure - 記錄重試失敗 應該使用 ErrorHandler 如果可用" name="RetryManager - 全面測試 _logRetryFailure - 記錄重試失敗 應該使用 ErrorHandler 如果可用" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 getStats - 獲取統計信息 應該返回配置統計" name="RetryManager - 全面測試 getStats - 獲取統計信息 應該返回配置統計" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 便捷函數 withRetry 應該使用默認實例" name="RetryManager - 全面測試 便捷函數 withRetry 應該使用默認實例" time="0.001">
    </testcase>
    <testcase classname="RetryManager - 全面測試 便捷函數 withRetry 應該支持自定義選項" name="RetryManager - 全面測試 便捷函數 withRetry 應該支持自定義選項" time="0.084">
    </testcase>
    <testcase classname="RetryManager - 全面測試 便捷函數 fetchWithRetry 應該創建帶重試的 fetch" name="RetryManager - 全面測試 便捷函數 fetchWithRetry 應該創建帶重試的 fetch" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 便捷函數 fetchWithRetry 應該支持 fetch 選項" name="RetryManager - 全面測試 便捷函數 fetchWithRetry 應該支持 fetch 選項" time="0.002">
    </testcase>
    <testcase classname="RetryManager - 全面測試 便捷函數 fetchWithRetry 應該支持重試選項" name="RetryManager - 全面測試 便捷函數 fetchWithRetry 應該支持重試選項" time="0.047">
    </testcase>
    <testcase classname="RetryManager - 全面測試 模塊導出 應該正確導出到 module.exports" name="RetryManager - 全面測試 模塊導出 應該正確導出到 module.exports" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Background.js Exported Functions" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:11" time="1.609" tests="46">
    <testcase classname="Background.js Exported Functions normalizeUrl 应该标准化 URL 并移除 hash" name="Background.js Exported Functions normalizeUrl 应该标准化 URL 并移除 hash" time="0.002">
    </testcase>
    <testcase classname="Background.js Exported Functions normalizeUrl 应该移除追踪参数" name="Background.js Exported Functions normalizeUrl 应该移除追踪参数" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions normalizeUrl 应该移除所有追踪参数" name="Background.js Exported Functions normalizeUrl 应该移除所有追踪参数" time="0">
    </testcase>
    <testcase classname="Background.js Exported Functions normalizeUrl 应该标准化尾部斜杠" name="Background.js Exported Functions normalizeUrl 应该标准化尾部斜杠" time="0.002">
    </testcase>
    <testcase classname="Background.js Exported Functions normalizeUrl 应该处理无效 URL" name="Background.js Exported Functions normalizeUrl 应该处理无效 URL" time="0">
    </testcase>
    <testcase classname="Background.js Exported Functions normalizeUrl 应该处理空值" name="Background.js Exported Functions normalizeUrl 应该处理空值" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions normalizeUrl 应该处理复杂的查询参数" name="Background.js Exported Functions normalizeUrl 应该处理复杂的查询参数" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions cleanImageUrl 应该返回有效的简单图片 URL" name="Background.js Exported Functions cleanImageUrl 应该返回有效的简单图片 URL" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions cleanImageUrl 应该处理带查询参数的 URL" name="Background.js Exported Functions cleanImageUrl 应该处理带查询参数的 URL" time="0">
    </testcase>
    <testcase classname="Background.js Exported Functions cleanImageUrl 应该从代理 URL 提取原始图片" name="Background.js Exported Functions cleanImageUrl 应该从代理 URL 提取原始图片" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions cleanImageUrl 应该处理嵌套的代理 URL" name="Background.js Exported Functions cleanImageUrl 应该处理嵌套的代理 URL" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions cleanImageUrl 应该移除重复的查询参数" name="Background.js Exported Functions cleanImageUrl 应该移除重复的查询参数" time="0">
    </testcase>
    <testcase classname="Background.js Exported Functions cleanImageUrl 应该处理无效输入" name="Background.js Exported Functions cleanImageUrl 应该处理无效输入" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions cleanImageUrl 应该处理无效 URL" name="Background.js Exported Functions cleanImageUrl 应该处理无效 URL" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions cleanImageUrl 应该处理代理 URL 中缺少 u 参数的情况" name="Background.js Exported Functions cleanImageUrl 应该处理代理 URL 中缺少 u 参数的情况" time="0">
    </testcase>
    <testcase classname="Background.js Exported Functions cleanImageUrl 应该处理代理 URL 中 u 参数无效的情况" name="Background.js Exported Functions cleanImageUrl 应该处理代理 URL 中 u 参数无效的情况" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions isValidImageUrl 应该接受标准图片 URL" name="Background.js Exported Functions isValidImageUrl 应该接受标准图片 URL" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions isValidImageUrl 应该接受带查询参数的图片 URL" name="Background.js Exported Functions isValidImageUrl 应该接受带查询参数的图片 URL" time="0">
    </testcase>
    <testcase classname="Background.js Exported Functions isValidImageUrl 应该支持各种图片格式" name="Background.js Exported Functions isValidImageUrl 应该支持各种图片格式" time="0.002">
    </testcase>
    <testcase classname="Background.js Exported Functions isValidImageUrl 应该识别图片路径模式" name="Background.js Exported Functions isValidImageUrl 应该识别图片路径模式" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions isValidImageUrl 应该排除非图片 URL" name="Background.js Exported Functions isValidImageUrl 应该排除非图片 URL" time="0">
    </testcase>
    <testcase classname="Background.js Exported Functions isValidImageUrl 应该拒绝过长的 URL" name="Background.js Exported Functions isValidImageUrl 应该拒绝过长的 URL" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions isValidImageUrl 应该接受正常长度的 URL" name="Background.js Exported Functions isValidImageUrl 应该接受正常长度的 URL" time="0">
    </testcase>
    <testcase classname="Background.js Exported Functions isValidImageUrl 应该拒绝非 HTTP(S) 协议" name="Background.js Exported Functions isValidImageUrl 应该拒绝非 HTTP(S) 协议" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions isValidImageUrl 应该处理无效输入" name="Background.js Exported Functions isValidImageUrl 应该处理无效输入" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该返回短文本不变" name="Background.js Exported Functions splitTextForHighlight 应该返回短文本不变" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该分割长文本" name="Background.js Exported Functions splitTextForHighlight 应该分割长文本" time="0">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该在句号处分割" name="Background.js Exported Functions splitTextForHighlight 应该在句号处分割" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该在问号处分割" name="Background.js Exported Functions splitTextForHighlight 应该在问号处分割" time="0">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该在感叹号处分割" name="Background.js Exported Functions splitTextForHighlight 应该在感叹号处分割" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该在双换行符处分割" name="Background.js Exported Functions splitTextForHighlight 应该在双换行符处分割" time="0.008">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该在空格处分割（如果没有标点）" name="Background.js Exported Functions splitTextForHighlight 应该在空格处分割（如果没有标点）" time="0.002">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该强制分割无间断文本" name="Background.js Exported Functions splitTextForHighlight 应该强制分割无间断文本" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该处理空文本" name="Background.js Exported Functions splitTextForHighlight 应该处理空文本" time="0.002">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该过滤空字符串片段" name="Background.js Exported Functions splitTextForHighlight 应该过滤空字符串片段" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该处理中文标点" name="Background.js Exported Functions splitTextForHighlight 应该处理中文标点" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions splitTextForHighlight 应该使用自定义 maxLength" name="Background.js Exported Functions splitTextForHighlight 应该使用自定义 maxLength" time="0.001">
    </testcase>
    <testcase classname="Background.js Exported Functions appendBlocksInBatches 应该成功分批添加区块" name="Background.js Exported Functions appendBlocksInBatches 应该成功分批添加区块" time="0.707">
    </testcase>
    <testcase classname="Background.js Exported Functions appendBlocksInBatches 应该处理部分批次失败的情况" name="Background.js Exported Functions appendBlocksInBatches 应该处理部分批次失败的情况" time="0.355">
    </testcase>
    <testcase classname="Background.js Exported Functions appendBlocksInBatches 应该处理空区块数组" name="Background.js Exported Functions appendBlocksInBatches 应该处理空区块数组" time="0.004">
    </testcase>
    <testcase classname="Background.js Exported Functions appendBlocksInBatches 应该处理从指定索引开始的情况" name="Background.js Exported Functions appendBlocksInBatches 应该处理从指定索引开始的情况" time="0.003">
    </testcase>
    <testcase classname="Background.js Exported Functions appendBlocksInBatches 应该处理网络错误" name="Background.js Exported Functions appendBlocksInBatches 应该处理网络错误" time="0.003">
    </testcase>
    <testcase classname="Background.js Exported Functions appendBlocksInBatches 应该正确构造 API 请求" name="Background.js Exported Functions appendBlocksInBatches 应该正确构造 API 请求" time="0.003">
    </testcase>
    <testcase classname="Background.js Exported Functions 集成测试 应该完整处理图片 URL 流程" name="Background.js Exported Functions 集成测试 应该完整处理图片 URL 流程" time="0.003">
    </testcase>
    <testcase classname="Background.js Exported Functions 集成测试 应该处理复杂的 URL 标准化场景" name="Background.js Exported Functions 集成测试 应该处理复杂的 URL 标准化场景" time="0.003">
    </testcase>
    <testcase classname="Background.js Exported Functions 集成测试 应该处理长文本分割和验证" name="Background.js Exported Functions 集成测试 应该处理长文本分割和验证" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="background.js - 工具函數" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:12" time="0.743" tests="23">
    <testcase classname="background.js - 工具函數 cleanImageUrl 應該返回有效的圖片 URL" name="background.js - 工具函數 cleanImageUrl 應該返回有效的圖片 URL" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 cleanImageUrl 應該處理代理 URL" name="background.js - 工具函數 cleanImageUrl 應該處理代理 URL" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 cleanImageUrl 應該移除重複的查詢參數" name="background.js - 工具函數 cleanImageUrl 應該移除重複的查詢參數" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 cleanImageUrl 應該處理無效 URL" name="background.js - 工具函數 cleanImageUrl 應該處理無效 URL" time="0">
    </testcase>
    <testcase classname="background.js - 工具函數 cleanImageUrl 應該處理 null" name="background.js - 工具函數 cleanImageUrl 應該處理 null" time="0">
    </testcase>
    <testcase classname="background.js - 工具函數 cleanImageUrl 應該處理 undefined" name="background.js - 工具函數 cleanImageUrl 應該處理 undefined" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 cleanImageUrl 應該處理非字符串" name="background.js - 工具函數 cleanImageUrl 應該處理非字符串" time="0">
    </testcase>
    <testcase classname="background.js - 工具函數 cleanImageUrl 應該處理嵌套的代理 URL" name="background.js - 工具函數 cleanImageUrl 應該處理嵌套的代理 URL" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 isValidImageUrl 應該識別有效的圖片 URL（帶擴展名）" name="background.js - 工具函數 isValidImageUrl 應該識別有效的圖片 URL（帶擴展名）" time="0">
    </testcase>
    <testcase classname="background.js - 工具函數 isValidImageUrl 應該識別圖片路徑模式" name="background.js - 工具函數 isValidImageUrl 應該識別圖片路徑模式" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 isValidImageUrl 應該拒絕非圖片 URL" name="background.js - 工具函數 isValidImageUrl 應該拒絕非圖片 URL" time="0">
    </testcase>
    <testcase classname="background.js - 工具函數 isValidImageUrl 應該拒絕過長的 URL" name="background.js - 工具函數 isValidImageUrl 應該拒絕過長的 URL" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 isValidImageUrl 應該拒絕非 HTTP/HTTPS URL" name="background.js - 工具函數 isValidImageUrl 應該拒絕非 HTTP/HTTPS URL" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 isValidImageUrl 應該處理帶查詢參數的圖片 URL" name="background.js - 工具函數 isValidImageUrl 應該處理帶查詢參數的圖片 URL" time="0">
    </testcase>
    <testcase classname="background.js - 工具函數 isValidImageUrl 應該處理 null" name="background.js - 工具函數 isValidImageUrl 應該處理 null" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 isValidImageUrl 應該處理 undefined" name="background.js - 工具函數 isValidImageUrl 應該處理 undefined" time="0">
    </testcase>
    <testcase classname="background.js - 工具函數 isValidImageUrl 應該處理空字符串" name="background.js - 工具函數 isValidImageUrl 應該處理空字符串" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 appendBlocksInBatches 應該成功處理少量區塊（單批次）" name="background.js - 工具函數 appendBlocksInBatches 應該成功處理少量區塊（單批次）" time="0.001">
    </testcase>
    <testcase classname="background.js - 工具函數 appendBlocksInBatches 應該分批處理大量區塊" name="background.js - 工具函數 appendBlocksInBatches 應該分批處理大量區塊" time="0.705">
    </testcase>
    <testcase classname="background.js - 工具函數 appendBlocksInBatches 應該處理空區塊數組" name="background.js - 工具函數 appendBlocksInBatches 應該處理空區塊數組" time="0.003">
    </testcase>
    <testcase classname="background.js - 工具函數 appendBlocksInBatches 應該從指定索引開始處理" name="background.js - 工具函數 appendBlocksInBatches 應該從指定索引開始處理" time="0.003">
    </testcase>
    <testcase classname="background.js - 工具函數 appendBlocksInBatches 應該處理 API 錯誤" name="background.js - 工具函數 appendBlocksInBatches 應該處理 API 錯誤" time="0.002">
    </testcase>
    <testcase classname="background.js - 工具函數 appendBlocksInBatches 應該使用正確的 API 端點和標頭" name="background.js - 工具函數 appendBlocksInBatches 應該使用正確的 API 端點和標頭" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ErrorHandler - 全面測試" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:13" time="0.442" tests="50">
    <testcase classname="ErrorHandler - 全面測試 ErrorTypes 常量 應該定義所有錯誤類型" name="ErrorHandler - 全面測試 ErrorTypes 常量 應該定義所有錯誤類型" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 ErrorSeverity 常量 應該定義所有嚴重程度" name="ErrorHandler - 全面測試 ErrorSeverity 常量 應該定義所有嚴重程度" time="0">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withFallback - 回退策略 應該在成功時返回操作結果" name="ErrorHandler - 全面測試 withFallback - 回退策略 應該在成功時返回操作結果" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withFallback - 回退策略 應該在失敗時返回回退值" name="ErrorHandler - 全面測試 withFallback - 回退策略 應該在失敗時返回回退值" time="0">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withFallback - 回退策略 應該支持回退函數" name="ErrorHandler - 全面測試 withFallback - 回退策略 應該支持回退函數" time="0">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withFallback - 回退策略 應該記錄錯誤信息" name="ErrorHandler - 全面測試 withFallback - 回退策略 應該記錄錯誤信息" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withFallback - 回退策略 應該支持禁用日誌記錄" name="ErrorHandler - 全面測試 withFallback - 回退策略 應該支持禁用日誌記錄" time="0">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withRetry - 重試機制 應該在成功時返回結果" name="ErrorHandler - 全面測試 withRetry - 重試機制 應該在成功時返回結果" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withRetry - 重試機制 應該在失敗後重試" name="ErrorHandler - 全面測試 withRetry - 重試機制 應該在失敗後重試" time="0.034">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withRetry - 重試機制 應該在重試次數用盡後拋出錯誤" name="ErrorHandler - 全面測試 withRetry - 重試機制 應該在重試次數用盡後拋出錯誤" time="0.033">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withRetry - 重試機制 應該支持自定義 shouldRetry 函數" name="ErrorHandler - 全面測試 withRetry - 重試機制 應該支持自定義 shouldRetry 函數" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withRetry - 重試機制 應該記錄重試嘗試" name="ErrorHandler - 全面測試 withRetry - 重試機制 應該記錄重試嘗試" time="0.012">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 withRetry - 重試機制 應該使用指數退避延遲" name="ErrorHandler - 全面測試 withRetry - 重試機制 應該使用指數退避延遲" time="0.154">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 createError - 創建標準化錯誤 應該創建完整的錯誤對象" name="ErrorHandler - 全面測試 createError - 創建標準化錯誤 應該創建完整的錯誤對象" time="0.007">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 createError - 創建標準化錯誤 應該使用默認的嚴重程度" name="ErrorHandler - 全面測試 createError - 創建標準化錯誤 應該使用默認的嚴重程度" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 createError - 創建標準化錯誤 應該使用空對象作為默認詳情" name="ErrorHandler - 全面測試 createError - 創建標準化錯誤 應該使用空對象作為默認詳情" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 logError - 記錄錯誤 應該記錄 error 級別的錯誤" name="ErrorHandler - 全面測試 logError - 記錄錯誤 應該記錄 error 級別的錯誤" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 logError - 記錄錯誤 應該記錄 warn 級別的錯誤" name="ErrorHandler - 全面測試 logError - 記錄錯誤 應該記錄 warn 級別的錯誤" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 logError - 記錄錯誤 應該記錄 info 級別的錯誤" name="ErrorHandler - 全面測試 logError - 記錄錯誤 應該記錄 info 級別的錯誤" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 logError - 記錄錯誤 應該處理沒有 originalError 的情況" name="ErrorHandler - 全面測試 logError - 記錄錯誤 應該處理沒有 originalError 的情況" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 logError - 記錄錯誤 應該更新錯誤統計" name="ErrorHandler - 全面測試 logError - 記錄錯誤 應該更新錯誤統計" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該識別 NetworkError 為可重試" name="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該識別 NetworkError 為可重試" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該識別 TimeoutError 為可重試" name="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該識別 TimeoutError 為可重試" time="0">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該識別 5xx 錯誤為可重試" name="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該識別 5xx 錯誤為可重試" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該識別 429 錯誤為可重試" name="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該識別 429 錯誤為可重試" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該識別 4xx 錯誤為不可重試" name="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該識別 4xx 錯誤為不可重試" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該對未知錯誤返回 false" name="ErrorHandler - 全面測試 isRetryableError - 判斷錯誤是否可重試 應該對未知錯誤返回 false" time="0">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 getLogLevel - 獲取日誌級別 應該為不同錯誤類型返回正確的日誌級別" name="ErrorHandler - 全面測試 getLogLevel - 獲取日誌級別 應該為不同錯誤類型返回正確的日誌級別" time="0">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 getLogLevel - 獲取日誌級別 應該為未知錯誤類型返回默認級別" name="ErrorHandler - 全面測試 getLogLevel - 獲取日誌級別 應該為未知錯誤類型返回默認級別" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 getErrorStats &amp; updateErrorStats - 錯誤統計 應該正確統計錯誤次數" name="ErrorHandler - 全面測試 getErrorStats &amp; updateErrorStats - 錯誤統計 應該正確統計錯誤次數" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 getErrorStats &amp; updateErrorStats - 錯誤統計 應該在沒有統計數據時返回空對象" name="ErrorHandler - 全面測試 getErrorStats &amp; updateErrorStats - 錯誤統計 應該在沒有統計數據時返回空對象" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 getErrorStats &amp; updateErrorStats - 錯誤統計 應該在 errorStats 不存在時初始化它" name="ErrorHandler - 全面測試 getErrorStats &amp; updateErrorStats - 錯誤統計 應該在 errorStats 不存在時初始化它" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 clearErrorStats - 清除錯誤統計 應該清除所有錯誤統計" name="ErrorHandler - 全面測試 clearErrorStats - 清除錯誤統計 應該清除所有錯誤統計" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 clearErrorStats - 清除錯誤統計 應該處理 errorStats 為 null 的情況" name="ErrorHandler - 全面測試 clearErrorStats - 清除錯誤統計 應該處理 errorStats 為 null 的情況" time="0">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 delay - 延遲執行 應該延遲指定的毫秒數" name="ErrorHandler - 全面測試 delay - 延遲執行 應該延遲指定的毫秒數" time="0.103">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 wrap - 包裝函數 應該包裝同步函數並添加錯誤處理" name="ErrorHandler - 全面測試 wrap - 包裝函數 應該包裝同步函數並添加錯誤處理" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 wrap - 包裝函數 應該在錯誤時使用回退值" name="ErrorHandler - 全面測試 wrap - 包裝函數 應該在錯誤時使用回退值" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 wrap - 包裝函數 應該使用函數名作為上下文" name="ErrorHandler - 全面測試 wrap - 包裝函數 應該使用函數名作為上下文" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 wrap - 包裝函數 應該支持自定義上下文" name="ErrorHandler - 全面測試 wrap - 包裝函數 應該支持自定義上下文" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 wrap - 包裝函數 應該支持禁用日誌記錄" name="ErrorHandler - 全面測試 wrap - 包裝函數 應該支持禁用日誌記錄" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 wrap - 包裝函數 應該保持 this 上下文" name="ErrorHandler - 全面測試 wrap - 包裝函數 應該保持 this 上下文" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 wrapAsync - 包裝異步函數 應該包裝異步函數並添加重試機制" name="ErrorHandler - 全面測試 wrapAsync - 包裝異步函數 應該包裝異步函數並添加重試機制" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 wrapAsync - 包裝異步函數 應該在失敗後重試" name="ErrorHandler - 全面測試 wrapAsync - 包裝異步函數 應該在失敗後重試" time="0.013">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 wrapAsync - 包裝異步函數 應該保持 this 上下文" name="ErrorHandler - 全面測試 wrapAsync - 包裝異步函數 應該保持 this 上下文" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 wrapAsync - 包裝異步函數 應該傳遞參數" name="ErrorHandler - 全面測試 wrapAsync - 包裝異步函數 應該傳遞參數" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 logRetryAttempt - 記錄重試 應該記錄重試信息" name="ErrorHandler - 全面測試 logRetryAttempt - 記錄重試 應該記錄重試信息" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 構造函數實例方法 應該創建帶有默認選項的實例" name="ErrorHandler - 全面測試 構造函數實例方法 應該創建帶有默認選項的實例" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 構造函數實例方法 應該合併自定義選項" name="ErrorHandler - 全面測試 構造函數實例方法 應該合併自定義選項" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 構造函數實例方法 應該初始化錯誤統計 Map" name="ErrorHandler - 全面測試 構造函數實例方法 應該初始化錯誤統計 Map" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - 全面測試 模塊導出 應該正確導出到 module.exports" name="ErrorHandler - 全面測試 模塊導出 應該正確導出到 module.exports" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="background error branches (integration)" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:14" time="0.28" tests="21">
    <testcase classname="background error branches (integration) startHighlight：無活動分頁 → 返回錯誤" name="background error branches (integration) startHighlight：無活動分頁 → 返回錯誤" time="0.015">
    </testcase>
    <testcase classname="background error branches (integration) startHighlight：注入失敗 → 返回錯誤" name="background error branches (integration) startHighlight：注入失敗 → 返回錯誤" time="0.014">
    </testcase>
    <testcase classname="background error branches (integration) updateHighlights：缺少 API Key → 返回錯誤" name="background error branches (integration) updateHighlights：缺少 API Key → 返回錯誤" time="0.014">
    </testcase>
    <testcase classname="background error branches (integration) updateHighlights：頁面未保存 → 返回錯誤" name="background error branches (integration) updateHighlights：頁面未保存 → 返回錯誤" time="0.015">
    </testcase>
    <testcase classname="background error branches (integration) checkNotionPageExists：缺少 pageId → 返回錯誤" name="background error branches (integration) checkNotionPageExists：缺少 pageId → 返回錯誤" time="0.004">
    </testcase>
    <testcase classname="background error branches (integration) checkNotionPageExists：未配置 API Key → 返回錯誤" name="background error branches (integration) checkNotionPageExists：未配置 API Key → 返回錯誤" time="0.014">
    </testcase>
    <testcase classname="background error branches (integration) openNotionPage：缺少 URL → 返回錯誤" name="background error branches (integration) openNotionPage：缺少 URL → 返回錯誤" time="0.003">
    </testcase>
    <testcase classname="background error branches (integration) openNotionPage：tabs.create 失敗（runtime.lastError）→ 返回錯誤" name="background error branches (integration) openNotionPage：tabs.create 失敗（runtime.lastError）→ 返回錯誤" time="0.004">
    </testcase>
    <testcase classname="background error branches (integration) savePage：無活動分頁 → 返回錯誤" name="background error branches (integration) savePage：無活動分頁 → 返回錯誤" time="0.014">
    </testcase>
    <testcase classname="background error branches (integration) savePage：缺少 API Key 或資料來源 ID → 返回錯誤" name="background error branches (integration) savePage：缺少 API Key 或資料來源 ID → 返回錯誤" time="0.015">
    </testcase>
    <testcase classname="background error branches (integration) syncHighlights：無活動分頁 → 返回錯誤" name="background error branches (integration) syncHighlights：無活動分頁 → 返回錯誤" time="0.014">
    </testcase>
    <testcase classname="background error branches (integration) syncHighlights：缺少 API Key → 返回錯誤" name="background error branches (integration) syncHighlights：缺少 API Key → 返回錯誤" time="0.015">
    </testcase>
    <testcase classname="background error branches (integration) syncHighlights：頁面未保存 → 返回錯誤" name="background error branches (integration) syncHighlights：頁面未保存 → 返回錯誤" time="0.015">
    </testcase>
    <testcase classname="background error branches (integration) syncHighlights：空標註 → 成功且 0" name="background error branches (integration) syncHighlights：空標註 → 成功且 0" time="0.015">
    </testcase>
    <testcase classname="background error branches (integration) savePage：injectWithResponse 函數執行失敗 → 返回錯誤" name="background error branches (integration) savePage：injectWithResponse 函數執行失敗 → 返回錯誤" time="0.013">
    </testcase>
    <testcase classname="background error branches (integration) savePage：Notion API 建頁 4xx 錯誤（非 image）→ 返回錯誤訊息" name="background error branches (integration) savePage：Notion API 建頁 4xx 錯誤（非 image）→ 返回錯誤訊息" time="0.015">
    </testcase>
    <testcase classname="background error branches (integration) savePage：Notion API image validation_error 觸發自動重試（排除圖片）→ 成功" name="background error branches (integration) savePage：Notion API image validation_error 觸發自動重試（排除圖片）→ 成功" time="0.005">
    </testcase>
    <testcase classname="background error branches (integration) updateNotionPage：validation_error（含 image）→ 返回友善錯誤訊息" name="background error branches (integration) updateNotionPage：validation_error（含 image）→ 返回友善錯誤訊息" time="0.014">
    </testcase>
    <testcase classname="background error branches (integration) updateNotionPage：一般 4xx 錯誤 → 返回原始訊息" name="background error branches (integration) updateNotionPage：一般 4xx 錯誤 → 返回原始訊息" time="0.013">
    </testcase>
    <testcase classname="background error branches (integration) updateNotionPage：validation_error 含 image → 回傳友善錯誤訊息" name="background error branches (integration) updateNotionPage：validation_error 含 image → 回傳友善錯誤訊息" time="0.014">
    </testcase>
    <testcase classname="background error branches (integration) updateNotionPage：PATCH 失敗無 message → 返回預設錯誤訊息" name="background error branches (integration) updateNotionPage：PATCH 失敗無 message → 返回預設錯誤訊息" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="utils.js - 模組測試" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:14" time="0.238" tests="51">
    <testcase classname="utils.js - 模組測試 normalizeUrl 應該移除 hash 片段" name="utils.js - 模組測試 normalizeUrl 應該移除 hash 片段" time="0.007">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl 應該移除 UTM 追蹤參數" name="utils.js - 模組測試 normalizeUrl 應該移除 UTM 追蹤參數" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl 應該移除多個追蹤參數" name="utils.js - 模組測試 normalizeUrl 應該移除多個追蹤參數" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl 應該移除尾部斜杠" name="utils.js - 模組測試 normalizeUrl 應該移除尾部斜杠" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl 應該保留根路徑的斜杠" name="utils.js - 模組測試 normalizeUrl 應該保留根路徑的斜杠" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl 應該處理無效 URL" name="utils.js - 模組測試 normalizeUrl 應該處理無效 URL" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl 應該處理複雜的真實世界 URL" name="utils.js - 模組測試 normalizeUrl 應該處理複雜的真實世界 URL" time="0.004">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.saveHighlights 應該保存標註數據" name="utils.js - 模組測試 StorageUtil.saveHighlights 應該保存標註數據" time="0.003">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.saveHighlights 應該標準化 URL 作為鍵" name="utils.js - 模組測試 StorageUtil.saveHighlights 應該標準化 URL 作為鍵" time="0.007">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.saveHighlights 應該處理對象格式的數據" name="utils.js - 模組測試 StorageUtil.saveHighlights 應該處理對象格式的數據" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.saveHighlights 應該在 chrome.storage 失敗時回退到 localStorage" name="utils.js - 模組測試 StorageUtil.saveHighlights 應該在 chrome.storage 失敗時回退到 localStorage" time="0.107">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.saveHighlights 應該處理 localStorage 保存失敗" name="utils.js - 模組測試 StorageUtil.saveHighlights 應該處理 localStorage 保存失敗" time="0.01">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.saveHighlights 應該處理空數組" name="utils.js - 模組測試 StorageUtil.saveHighlights 應該處理空數組" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.saveHighlights 應該計算對象格式的標註數量" name="utils.js - 模組測試 StorageUtil.saveHighlights 應該計算對象格式的標註數量" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.loadHighlights 應該加載數組格式的標註" name="utils.js - 模組測試 StorageUtil.loadHighlights 應該加載數組格式的標註" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.loadHighlights 應該加載對象格式的標註" name="utils.js - 模組測試 StorageUtil.loadHighlights 應該加載對象格式的標註" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.loadHighlights 應該處理不存在的數據" name="utils.js - 模組測試 StorageUtil.loadHighlights 應該處理不存在的數據" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.loadHighlights 應該從 localStorage 回退" name="utils.js - 模組測試 StorageUtil.loadHighlights 應該從 localStorage 回退" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.loadHighlights 應該處理 localStorage 中的對象格式" name="utils.js - 模組測試 StorageUtil.loadHighlights 應該處理 localStorage 中的對象格式" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.loadHighlights 應該處理損壞的 JSON 數據" name="utils.js - 模組測試 StorageUtil.loadHighlights 應該處理損壞的 JSON 數據" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.loadHighlights 應該處理空對象" name="utils.js - 模組測試 StorageUtil.loadHighlights 應該處理空對象" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.loadHighlights 應該處理空數組" name="utils.js - 模組測試 StorageUtil.loadHighlights 應該處理空數組" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.loadHighlights 應該在 chrome.storage 不可用時回退到 localStorage" name="utils.js - 模組測試 StorageUtil.loadHighlights 應該在 chrome.storage 不可用時回退到 localStorage" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.clearHighlights 應該清除標註數據" name="utils.js - 模組測試 StorageUtil.clearHighlights 應該清除標註數據" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.clearHighlights 應該同時清除 localStorage" name="utils.js - 模組測試 StorageUtil.clearHighlights 應該同時清除 localStorage" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.clearHighlights 應該處理 chrome.storage 錯誤" name="utils.js - 模組測試 StorageUtil.clearHighlights 應該處理 chrome.storage 錯誤" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.clearHighlights 應該處理 chrome.storage 不可用的情況" name="utils.js - 模組測試 StorageUtil.clearHighlights 應該處理 chrome.storage 不可用的情況" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.debugListAllKeys 應該列出所有標註鍵" name="utils.js - 模組測試 StorageUtil.debugListAllKeys 應該列出所有標註鍵" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.debugListAllKeys 應該處理空存儲" name="utils.js - 模組測試 StorageUtil.debugListAllKeys 應該處理空存儲" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil.debugListAllKeys 應該顯示對象格式的標註數量" name="utils.js - 模組測試 StorageUtil.debugListAllKeys 應該顯示對象格式的標註數量" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 Logger 應該有 debug 方法" name="utils.js - 模組測試 Logger 應該有 debug 方法" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 Logger 應該有 info 方法" name="utils.js - 模組測試 Logger 應該有 info 方法" time="0">
    </testcase>
    <testcase classname="utils.js - 模組測試 Logger 應該有 warn 方法" name="utils.js - 模組測試 Logger 應該有 warn 方法" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 Logger 應該有 error 方法" name="utils.js - 模組測試 Logger 應該有 error 方法" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 Logger debug 應該支持多個參數" name="utils.js - 模組測試 Logger debug 應該支持多個參數" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 Logger info 應該支持對象參數" name="utils.js - 模組測試 Logger info 應該支持對象參數" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 Logger warn 應該支持錯誤對象" name="utils.js - 模組測試 Logger warn 應該支持錯誤對象" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 Logger error 應該支持堆棧追蹤" name="utils.js - 模組測試 Logger error 應該支持堆棧追蹤" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil - 錯誤處理補充 saveHighlights 應該處理 localStorage.setItem 拋出異常" name="utils.js - 模組測試 StorageUtil - 錯誤處理補充 saveHighlights 應該處理 localStorage.setItem 拋出異常" time="0.005">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil - 錯誤處理補充 loadHighlights 應該處理 localStorage 損壞的 JSON" name="utils.js - 模組測試 StorageUtil - 錯誤處理補充 loadHighlights 應該處理 localStorage 損壞的 JSON" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil - 錯誤處理補充 clearHighlights 應該處理 localStorage.removeItem 異常" name="utils.js - 模組測試 StorageUtil - 錯誤處理補充 clearHighlights 應該處理 localStorage.removeItem 異常" time="0.002">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil - 錯誤處理補充 clearHighlights 應該在 chrome.storage 不可用時處理 localStorage 錯誤" name="utils.js - 模組測試 StorageUtil - 錯誤處理補充 clearHighlights 應該在 chrome.storage 不可用時處理 localStorage 錯誤" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil - 錯誤處理補充 debugListAllKeys 應該處理空存儲" name="utils.js - 模組測試 StorageUtil - 錯誤處理補充 debugListAllKeys 應該處理空存儲" time="0">
    </testcase>
    <testcase classname="utils.js - 模組測試 StorageUtil - 錯誤處理補充 debugListAllKeys 應該正確處理對象格式的標註" name="utils.js - 模組測試 StorageUtil - 錯誤處理補充 debugListAllKeys 應該正確處理對象格式的標註" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理只有 hash 的 URL" name="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理只有 hash 的 URL" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理只有追蹤參數的 URL" name="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理只有追蹤參數的 URL" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理帶 port 的 URL" name="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理帶 port 的 URL" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理帶用戶信息的 URL" name="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理帶用戶信息的 URL" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理沒有路徑只有參數的 URL" name="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理沒有路徑只有參數的 URL" time="0.001">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理空字符串" name="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理空字符串" time="0">
    </testcase>
    <testcase classname="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理相對 URL" name="utils.js - 模組測試 normalizeUrl - 邊界情況補充 應該處理相對 URL" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Background Tab Listeners" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:14" time="0.128" tests="18">
    <testcase classname="Background Tab Listeners setupTabListeners 應該設置標籤頁更新監聽器" name="Background Tab Listeners setupTabListeners 應該設置標籤頁更新監聽器" time="0">
    </testcase>
    <testcase classname="Background Tab Listeners setupTabListeners 應該在頁面完成加載時檢查標註" name="Background Tab Listeners setupTabListeners 應該在頁面完成加載時檢查標註" time="0">
    </testcase>
    <testcase classname="Background Tab Listeners setupTabListeners 應該跳過非完成狀態的頁面" name="Background Tab Listeners setupTabListeners 應該跳過非完成狀態的頁面" time="0.001">
    </testcase>
    <testcase classname="Background Tab Listeners setupTabListeners 應該跳過沒有 URL 的標籤頁" name="Background Tab Listeners setupTabListeners 應該跳過沒有 URL 的標籤頁" time="0">
    </testcase>
    <testcase classname="Background Tab Listeners setupTabListeners 應該在有標註時注入恢復腳本" name="Background Tab Listeners setupTabListeners 應該在有標註時注入恢復腳本" time="0.052">
    </testcase>
    <testcase classname="Background Tab Listeners migrateLegacyHighlights 應該成功遷移舊版標註" name="Background Tab Listeners migrateLegacyHighlights 應該成功遷移舊版標註" time="0.001">
    </testcase>
    <testcase classname="Background Tab Listeners migrateLegacyHighlights 應該跳過沒有舊版標註的頁面" name="Background Tab Listeners migrateLegacyHighlights 應該跳過沒有舊版標註的頁面" time="0.001">
    </testcase>
    <testcase classname="Background Tab Listeners migrateLegacyHighlights 應該處理腳本注入失敗" name="Background Tab Listeners migrateLegacyHighlights 應該處理腳本注入失敗" time="0.001">
    </testcase>
    <testcase classname="Background Tab Listeners migrateLegacyHighlights 應該處理空的遷移結果" name="Background Tab Listeners migrateLegacyHighlights 應該處理空的遷移結果" time="0">
    </testcase>
    <testcase classname="Background Tab Listeners normalizeUrl 應該標準化 URL 並移除 hash" name="Background Tab Listeners normalizeUrl 應該標準化 URL 並移除 hash" time="0.001">
    </testcase>
    <testcase classname="Background Tab Listeners normalizeUrl 應該移除追蹤參數" name="Background Tab Listeners normalizeUrl 應該移除追蹤參數" time="0">
    </testcase>
    <testcase classname="Background Tab Listeners normalizeUrl 應該標準化尾部斜杠" name="Background Tab Listeners normalizeUrl 應該標準化尾部斜杠" time="0.001">
    </testcase>
    <testcase classname="Background Tab Listeners normalizeUrl 應該處理無效 URL" name="Background Tab Listeners normalizeUrl 應該處理無效 URL" time="0">
    </testcase>
    <testcase classname="Background Tab Listeners normalizeUrl 應該處理複雜的 URL" name="Background Tab Listeners normalizeUrl 應該處理複雜的 URL" time="0.001">
    </testcase>
    <testcase classname="Background Tab Listeners 集成測試 完整的標籤頁監聽流程應該正常工作" name="Background Tab Listeners 集成測試 完整的標籤頁監聽流程應該正常工作" time="0.052">
    </testcase>
    <testcase classname="Background Tab Listeners 集成測試 沒有標註的頁面不應該觸發遷移和恢復" name="Background Tab Listeners 集成測試 沒有標註的頁面不應該觸發遷移和恢復" time="0.001">
    </testcase>
    <testcase classname="Background Tab Listeners 錯誤處理 標籤頁監聽器應該處理異常" name="Background Tab Listeners 錯誤處理 標籤頁監聽器應該處理異常" time="0.001">
    </testcase>
    <testcase classname="Background Tab Listeners 錯誤處理 遷移函數應該處理存儲錯誤" name="Background Tab Listeners 錯誤處理 遷移函數應該處理存儲錯誤" time="0">
    </testcase>
  </testsuite>
  <testsuite name="PerformanceOptimizer" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:14" time="0.137" tests="13">
    <testcase classname="PerformanceOptimizer DOM 查詢緩存 應該緩存查詢結果" name="PerformanceOptimizer DOM 查詢緩存 應該緩存查詢結果" time="0.002">
    </testcase>
    <testcase classname="PerformanceOptimizer DOM 查詢緩存 應該支持單個元素查詢" name="PerformanceOptimizer DOM 查詢緩存 應該支持單個元素查詢" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer DOM 查詢緩存 應該處理無效選擇器" name="PerformanceOptimizer DOM 查詢緩存 應該處理無效選擇器" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer DOM 查詢緩存 應該限制緩存大小" name="PerformanceOptimizer DOM 查詢緩存 應該限制緩存大小" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 批處理系統 應該批處理圖片操作" name="PerformanceOptimizer 批處理系統 應該批處理圖片操作" time="0.018">
    </testcase>
    <testcase classname="PerformanceOptimizer 批處理系統 應該批處理 DOM 操作" name="PerformanceOptimizer 批處理系統 應該批處理 DOM 操作" time="0.018">
    </testcase>
    <testcase classname="PerformanceOptimizer 批處理系統 應該處理批處理錯誤" name="PerformanceOptimizer 批處理系統 應該處理批處理錯誤" time="0.017">
    </testcase>
    <testcase classname="PerformanceOptimizer 性能監控 應該收集性能統計" name="PerformanceOptimizer 性能監控 應該收集性能統計" time="0.002">
    </testcase>
    <testcase classname="PerformanceOptimizer 性能監控 應該測量函數執行時間" name="PerformanceOptimizer 性能監控 應該測量函數執行時間" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 性能監控 應該測量異步函數執行時間" name="PerformanceOptimizer 性能監控 應該測量異步函數執行時間" time="0.011">
    </testcase>
    <testcase classname="PerformanceOptimizer 預加載功能 應該預加載選擇器" name="PerformanceOptimizer 預加載功能 應該預加載選擇器" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 緩存管理 應該清理所有緩存" name="PerformanceOptimizer 緩存管理 應該清理所有緩存" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 緩存管理 應該按模式清理緩存" name="PerformanceOptimizer 緩存管理 應該按模式清理緩存" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="頁面複雜度檢測器" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:14" time="0.124" tests="15">
    <testcase classname="頁面複雜度檢測器 技術文檔頁面檢測 GitHub Pages 文檔站檢測" name="頁面複雜度檢測器 技術文檔頁面檢測 GitHub Pages 文檔站檢測" time="0.012">
    </testcase>
    <testcase classname="頁面複雜度檢測器 技術文檔頁面檢測 包含大量代碼塊的技術文檔" name="頁面複雜度檢測器 技術文檔頁面檢測 包含大量代碼塊的技術文檔" time="0.005">
    </testcase>
    <testcase classname="頁面複雜度檢測器 技術文檔頁面檢測 包含大量列表的文檔頁面" name="頁面複雜度檢測器 技術文檔頁面檢測 包含大量列表的文檔頁面" time="0.005">
    </testcase>
    <testcase classname="頁面複雜度檢測器 新聞網站頁面檢測 包含廣告的新聞頁面" name="頁面複雜度檢測器 新聞網站頁面檢測 包含廣告的新聞頁面" time="0.005">
    </testcase>
    <testcase classname="頁面複雜度檢測器 新聞網站頁面檢測 複雜佈局的媒體網站" name="頁面複雜度檢測器 新聞網站頁面檢測 複雜佈局的媒體網站" time="0.004">
    </testcase>
    <testcase classname="頁面複雜度檢測器 邊界情況測試 高連結密度頁面" name="頁面複雜度檢測器 邊界情況測試 高連結密度頁面" time="0.004">
    </testcase>
    <testcase classname="頁面複雜度檢測器 邊界情況測試 內容過短的頁面" name="頁面複雜度檢測器 邊界情況測試 內容過短的頁面" time="0.004">
    </testcase>
    <testcase classname="頁面複雜度檢測器 邊界情況測試 長文內容頁面" name="頁面複雜度檢測器 邊界情況測試 長文內容頁面" time="0.006">
    </testcase>
    <testcase classname="頁面複雜度檢測器 提取器選擇邏輯 @extractus 優先條件" name="頁面複雜度檢測器 提取器選擇邏輯 @extractus 優先條件" time="0.002">
    </testcase>
    <testcase classname="頁面複雜度檢測器 提取器選擇邏輯 Readability 必須條件" name="頁面複雜度檢測器 提取器選擇邏輯 Readability 必須條件" time="0.002">
    </testcase>
    <testcase classname="頁面複雜度檢測器 提取器選擇邏輯 信心度計算" name="頁面複雜度檢測器 提取器選擇邏輯 信心度計算" time="0.007">
    </testcase>
    <testcase classname="頁面複雜度檢測器 分析報告功能 完整分析報告生成" name="頁面複雜度檢測器 分析報告功能 完整分析報告生成" time="0.003">
    </testcase>
    <testcase classname="頁面複雜度檢測器 分析報告功能 記錄分析結果" name="頁面複雜度檢測器 分析報告功能 記錄分析結果" time="0.002">
    </testcase>
    <testcase classname="頁面複雜度檢測器 錯誤處理 無效 DOM 處理" name="頁面複雜度檢測器 錯誤處理 無效 DOM 處理" time="0.002">
    </testcase>
    <testcase classname="頁面複雜度檢測器 錯誤處理 損壞的 HTML 結構" name="頁面複雜度檢測器 錯誤處理 損壞的 HTML 結構" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="內容提取方案對比測試" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:14" time="0.105" tests="6">
    <testcase classname="內容提取方案對比測試 測試案例 1：Markdown 文件頁面 Readability 提取結果" name="內容提取方案對比測試 測試案例 1：Markdown 文件頁面 Readability 提取結果" time="0.024">
    </testcase>
    <testcase classname="內容提取方案對比測試 測試案例 1：Markdown 文件頁面 Defuddle 提取結果" name="內容提取方案對比測試 測試案例 1：Markdown 文件頁面 Defuddle 提取結果" time="0.004">
    </testcase>
    <testcase classname="內容提取方案對比測試 測試案例 1：Markdown 文件頁面 Turndown 轉換測試" name="內容提取方案對比測試 測試案例 1：Markdown 文件頁面 Turndown 轉換測試" time="0.003">
    </testcase>
    <testcase classname="內容提取方案對比測試 測試案例 2：新聞網站頁面 Readability 在新聞網站的表現" name="內容提取方案對比測試 測試案例 2：新聞網站頁面 Readability 在新聞網站的表現" time="0.012">
    </testcase>
    <testcase classname="內容提取方案對比測試 測試案例 2：新聞網站頁面 Defuddle 在新聞網站的表現" name="內容提取方案對比測試 測試案例 2：新聞網站頁面 Defuddle 在新聞網站的表現" time="0.003">
    </testcase>
    <testcase classname="內容提取方案對比測試 效能對比 Readability vs Defuddle 速度對比" name="內容提取方案對比測試 效能對比 Readability vs Defuddle 速度對比" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="background-utils.testable.js" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:15" time="0.11" tests="188">
    <testcase classname="background-utils.testable.js cleanImageUrl 基本功能 應該返回有效的圖片 URL" name="background-utils.testable.js cleanImageUrl 基本功能 應該返回有效的圖片 URL" time="0.007">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 基本功能 應該返回帶查詢參數的 URL" name="background-utils.testable.js cleanImageUrl 基本功能 應該返回帶查詢參數的 URL" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 基本功能 應該處理相對路徑轉換" name="background-utils.testable.js cleanImageUrl 基本功能 應該處理相對路徑轉換" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 代理 URL 處理 應該從代理 URL 中提取原始圖片 URL" name="background-utils.testable.js cleanImageUrl 代理 URL 處理 應該從代理 URL 中提取原始圖片 URL" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 代理 URL 處理 應該處理 photo.php 代理" name="background-utils.testable.js cleanImageUrl 代理 URL 處理 應該處理 photo.php 代理" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 代理 URL 處理 應該處理 /gw/ 路徑代理" name="background-utils.testable.js cleanImageUrl 代理 URL 處理 應該處理 /gw/ 路徑代理" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 代理 URL 處理 應該遞歸處理多層代理" name="background-utils.testable.js cleanImageUrl 代理 URL 處理 應該遞歸處理多層代理" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 代理 URL 處理 代理參數不是有效 URL 時應該返回代理 URL" name="background-utils.testable.js cleanImageUrl 代理 URL 處理 代理參數不是有效 URL 時應該返回代理 URL" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 重複參數處理 應該移除重複的查詢參數" name="background-utils.testable.js cleanImageUrl 重複參數處理 應該移除重複的查詢參數" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 重複參數處理 應該保留不同的查詢參數" name="background-utils.testable.js cleanImageUrl 重複參數處理 應該保留不同的查詢參數" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 錯誤處理 null 應該返回 null" name="background-utils.testable.js cleanImageUrl 錯誤處理 null 應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 錯誤處理 undefined 應該返回 null" name="background-utils.testable.js cleanImageUrl 錯誤處理 undefined 應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 錯誤處理 空字符串應該返回 null" name="background-utils.testable.js cleanImageUrl 錯誤處理 空字符串應該返回 null" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 錯誤處理 非字符串應該返回 null" name="background-utils.testable.js cleanImageUrl 錯誤處理 非字符串應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js cleanImageUrl 錯誤處理 無效的 URL 應該返回 null" name="background-utils.testable.js cleanImageUrl 錯誤處理 無效的 URL 應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 有效的圖片 URL 應該接受常見圖片擴展名" name="background-utils.testable.js isValidImageUrl 有效的圖片 URL 應該接受常見圖片擴展名" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 有效的圖片 URL 應該接受帶查詢參數的圖片 URL" name="background-utils.testable.js isValidImageUrl 有效的圖片 URL 應該接受帶查詢參數的圖片 URL" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 有效的圖片 URL 應該接受包含圖片路徑模式的 URL" name="background-utils.testable.js isValidImageUrl 有效的圖片 URL 應該接受包含圖片路徑模式的 URL" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 有效的圖片 URL 應該接受大小寫不敏感的擴展名" name="background-utils.testable.js isValidImageUrl 有效的圖片 URL 應該接受大小寫不敏感的擴展名" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕非圖片文件擴展名" name="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕非圖片文件擴展名" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕 API 路徑" name="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕 API 路徑" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕 AJAX 路徑" name="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕 AJAX 路徑" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕回調路徑" name="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕回調路徑" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕超過 2000 字符的 URL" name="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕超過 2000 字符的 URL" time="0.002">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕非 HTTP/HTTPS 協議" name="background-utils.testable.js isValidImageUrl 無效的圖片 URL 應該拒絕非 HTTP/HTTPS 協議" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 錯誤處理 null 應該返回 false" name="background-utils.testable.js isValidImageUrl 錯誤處理 null 應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 錯誤處理 undefined 應該返回 false" name="background-utils.testable.js isValidImageUrl 錯誤處理 undefined 應該返回 false" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 錯誤處理 空字符串應該返回 false" name="background-utils.testable.js isValidImageUrl 錯誤處理 空字符串應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 錯誤處理 非字符串應該返回 false" name="background-utils.testable.js isValidImageUrl 錯誤處理 非字符串應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 錯誤處理 無效的 URL 應該返回 false" name="background-utils.testable.js isValidImageUrl 錯誤處理 無效的 URL 應該返回 false" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 代理 URL 應該處理並驗證代理 URL" name="background-utils.testable.js isValidImageUrl 代理 URL 應該處理並驗證代理 URL" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidImageUrl 代理 URL 代理的原始 URL 無效時應該返回 false" name="background-utils.testable.js isValidImageUrl 代理 URL 代理的原始 URL 無效時應該返回 false" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 基本功能 短文本應該返回單個元素數組" name="background-utils.testable.js splitTextForHighlight 基本功能 短文本應該返回單個元素數組" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 基本功能 剛好 maxLength 的文本應該返回單個元素" name="background-utils.testable.js splitTextForHighlight 基本功能 剛好 maxLength 的文本應該返回單個元素" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 基本功能 null 應該返回包含 null 的數組" name="background-utils.testable.js splitTextForHighlight 基本功能 null 應該返回包含 null 的數組" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 基本功能 undefined 應該返回包含 undefined 的數組" name="background-utils.testable.js splitTextForHighlight 基本功能 undefined 應該返回包含 undefined 的數組" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 智能分割 應該在雙換行符處分割" name="background-utils.testable.js splitTextForHighlight 智能分割 應該在雙換行符處分割" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 智能分割 應該在單換行符處分割" name="background-utils.testable.js splitTextForHighlight 智能分割 應該在單換行符處分割" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 智能分割 應該在中文句號處分割" name="background-utils.testable.js splitTextForHighlight 智能分割 應該在中文句號處分割" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 智能分割 應該在英文句號處分割" name="background-utils.testable.js splitTextForHighlight 智能分割 應該在英文句號處分割" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 智能分割 應該在問號處分割" name="background-utils.testable.js splitTextForHighlight 智能分割 應該在問號處分割" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 智能分割 應該在驚嘆號處分割" name="background-utils.testable.js splitTextForHighlight 智能分割 應該在驚嘆號處分割" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 智能分割 應該在空格處分割（沒有標點時）" name="background-utils.testable.js splitTextForHighlight 智能分割 應該在空格處分割（沒有標點時）" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 智能分割 應該優先在靠近 maxLength 的標點處分割" name="background-utils.testable.js splitTextForHighlight 智能分割 應該優先在靠近 maxLength 的標點處分割" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 強制分割 沒有標點和空格時應該強制在 maxLength 處分割" name="background-utils.testable.js splitTextForHighlight 強制分割 沒有標點和空格時應該強制在 maxLength 處分割" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 強制分割 標點位置太靠前時應該強制分割" name="background-utils.testable.js splitTextForHighlight 強制分割 標點位置太靠前時應該強制分割" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 過濾和清理 應該過濾空字符串" name="background-utils.testable.js splitTextForHighlight 過濾和清理 應該過濾空字符串" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 過濾和清理 應該 trim 每個片段" name="background-utils.testable.js splitTextForHighlight 過濾和清理 應該 trim 每個片段" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 多段分割 超長文本應該分割成多個片段" name="background-utils.testable.js splitTextForHighlight 多段分割 超長文本應該分割成多個片段" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 多段分割 所有片段合併後應該包含原始文本的所有內容" name="background-utils.testable.js splitTextForHighlight 多段分割 所有片段合併後應該包含原始文本的所有內容" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 自定義 maxLength 應該支持自定義 maxLength" name="background-utils.testable.js splitTextForHighlight 自定義 maxLength 應該支持自定義 maxLength" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitTextForHighlight 自定義 maxLength maxLength 為 1 應該每個字符一個片段" name="background-utils.testable.js splitTextForHighlight 自定義 maxLength maxLength 為 1 應該每個字符一個片段" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 基本功能 應該返回標準化的 URL" name="background-utils.testable.js normalizeUrl 基本功能 應該返回標準化的 URL" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 基本功能 應該保留 HTTPS 協議" name="background-utils.testable.js normalizeUrl 基本功能 應該保留 HTTPS 協議" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 基本功能 應該保留 HTTP 協議" name="background-utils.testable.js normalizeUrl 基本功能 應該保留 HTTP 協議" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl Fragment 處理 應該移除 URL fragment（#）" name="background-utils.testable.js normalizeUrl Fragment 處理 應該移除 URL fragment（#）" time="0.004">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl Fragment 處理 應該移除複雜的 fragment" name="background-utils.testable.js normalizeUrl Fragment 處理 應該移除複雜的 fragment" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl Fragment 處理 應該處理只有 fragment 的 URL" name="background-utils.testable.js normalizeUrl Fragment 處理 應該處理只有 fragment 的 URL" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 追蹤參數處理 應該移除 utm_source 參數" name="background-utils.testable.js normalizeUrl 追蹤參數處理 應該移除 utm_source 參數" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 追蹤參數處理 應該移除所有 UTM 參數" name="background-utils.testable.js normalizeUrl 追蹤參數處理 應該移除所有 UTM 參數" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 追蹤參數處理 應該移除 gclid 參數" name="background-utils.testable.js normalizeUrl 追蹤參數處理 應該移除 gclid 參數" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 追蹤參數處理 應該移除 fbclid 參數" name="background-utils.testable.js normalizeUrl 追蹤參數處理 應該移除 fbclid 參數" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 追蹤參數處理 應該移除多個追蹤參數" name="background-utils.testable.js normalizeUrl 追蹤參數處理 應該移除多個追蹤參數" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 追蹤參數處理 應該保留非追蹤參數" name="background-utils.testable.js normalizeUrl 追蹤參數處理 應該保留非追蹤參數" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 尾部斜線處理 應該移除非根路徑的尾部斜線" name="background-utils.testable.js normalizeUrl 尾部斜線處理 應該移除非根路徑的尾部斜線" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 尾部斜線處理 應該移除多個尾部斜線" name="background-utils.testable.js normalizeUrl 尾部斜線處理 應該移除多個尾部斜線" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 尾部斜線處理 應該保留根路徑的斜線" name="background-utils.testable.js normalizeUrl 尾部斜線處理 應該保留根路徑的斜線" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 尾部斜線處理 沒有尾部斜線應該保持不變" name="background-utils.testable.js normalizeUrl 尾部斜線處理 沒有尾部斜線應該保持不變" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 組合情境 應該同時處理 fragment、追蹤參數和尾部斜線" name="background-utils.testable.js normalizeUrl 組合情境 應該同時處理 fragment、追蹤參數和尾部斜線" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 組合情境 應該處理帶多個參數的複雜 URL" name="background-utils.testable.js normalizeUrl 組合情境 應該處理帶多個參數的複雜 URL" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 組合情境 應該處理子域名" name="background-utils.testable.js normalizeUrl 組合情境 應該處理子域名" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 組合情境 應該處理端口號" name="background-utils.testable.js normalizeUrl 組合情境 應該處理端口號" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 錯誤處理 無效的 URL 應該返回原始輸入" name="background-utils.testable.js normalizeUrl 錯誤處理 無效的 URL 應該返回原始輸入" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 錯誤處理 null 應該返回空字符串" name="background-utils.testable.js normalizeUrl 錯誤處理 null 應該返回空字符串" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 錯誤處理 undefined 應該返回空字符串" name="background-utils.testable.js normalizeUrl 錯誤處理 undefined 應該返回空字符串" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 錯誤處理 空字符串應該返回空字符串" name="background-utils.testable.js normalizeUrl 錯誤處理 空字符串應該返回空字符串" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 錯誤處理 相對 URL 應該返回原始輸入" name="background-utils.testable.js normalizeUrl 錯誤處理 相對 URL 應該返回原始輸入" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 真實世界案例 應該標準化 Google 搜索結果 URL" name="background-utils.testable.js normalizeUrl 真實世界案例 應該標準化 Google 搜索結果 URL" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 真實世界案例 應該標準化 Facebook 分享 URL" name="background-utils.testable.js normalizeUrl 真實世界案例 應該標準化 Facebook 分享 URL" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 真實世界案例 應該標準化郵件行銷 URL" name="background-utils.testable.js normalizeUrl 真實世界案例 應該標準化郵件行銷 URL" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js normalizeUrl 真實世界案例 應該處理中文域名" name="background-utils.testable.js normalizeUrl 真實世界案例 應該處理中文域名" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 基本功能 應該將數組分割成指定大小的批次" name="background-utils.testable.js splitIntoBatches 基本功能 應該將數組分割成指定大小的批次" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 基本功能 單個批次應該返回包含整個數組的數組" name="background-utils.testable.js splitIntoBatches 基本功能 單個批次應該返回包含整個數組的數組" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 基本功能 剛好整除應該返回完整批次" name="background-utils.testable.js splitIntoBatches 基本功能 剛好整除應該返回完整批次" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 基本功能 默認批次大小應該是 100" name="background-utils.testable.js splitIntoBatches 基本功能 默認批次大小應該是 100" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 邊界情況 空數組應該返回空數組" name="background-utils.testable.js splitIntoBatches 邊界情況 空數組應該返回空數組" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 邊界情況 單個元素應該返回單個批次" name="background-utils.testable.js splitIntoBatches 邊界情況 單個元素應該返回單個批次" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 邊界情況 batchSize 為 1 應該每個元素一個批次" name="background-utils.testable.js splitIntoBatches 邊界情況 batchSize 為 1 應該每個元素一個批次" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 邊界情況 batchSize 等於數組長度應該返回單個批次" name="background-utils.testable.js splitIntoBatches 邊界情況 batchSize 等於數組長度應該返回單個批次" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 錯誤處理 非數組輸入應該返回空數組" name="background-utils.testable.js splitIntoBatches 錯誤處理 非數組輸入應該返回空數組" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 錯誤處理 batchSize 為 0 應該返回包含整個數組的單個批次" name="background-utils.testable.js splitIntoBatches 錯誤處理 batchSize 為 0 應該返回包含整個數組的單個批次" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 錯誤處理 負數 batchSize 應該返回包含整個數組的單個批次" name="background-utils.testable.js splitIntoBatches 錯誤處理 負數 batchSize 應該返回包含整個數組的單個批次" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 錯誤處理 空數組且 batchSize 為 0 應該返回空數組" name="background-utils.testable.js splitIntoBatches 錯誤處理 空數組且 batchSize 為 0 應該返回空數組" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 真實世界場景 Notion API 批次（100 個區塊）" name="background-utils.testable.js splitIntoBatches 真實世界場景 Notion API 批次（100 個區塊）" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js splitIntoBatches 真實世界場景 應該保持原始數組不變" name="background-utils.testable.js splitIntoBatches 真實世界場景 應該保持原始數組不變" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 基本功能 應該計算正確的批次統計信息" name="background-utils.testable.js calculateBatchStats 基本功能 應該計算正確的批次統計信息" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 基本功能 應該處理從非零索引開始的情況" name="background-utils.testable.js calculateBatchStats 基本功能 應該處理從非零索引開始的情況" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 基本功能 最後一批不完整時應該計算正確" name="background-utils.testable.js calculateBatchStats 基本功能 最後一批不完整時應該計算正確" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 基本功能 剛好整除時最後一批應該是完整的" name="background-utils.testable.js calculateBatchStats 基本功能 剛好整除時最後一批應該是完整的" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 邊界情況 totalItems 為 0 應該返回正確統計" name="background-utils.testable.js calculateBatchStats 邊界情況 totalItems 為 0 應該返回正確統計" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 邊界情況 startIndex 等於 totalItems 應該返回正確統計" name="background-utils.testable.js calculateBatchStats 邊界情況 startIndex 等於 totalItems 應該返回正確統計" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 邊界情況 單個項目應該返回單個批次" name="background-utils.testable.js calculateBatchStats 邊界情況 單個項目應該返回單個批次" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 錯誤處理 非數字輸入應該返回 null" name="background-utils.testable.js calculateBatchStats 錯誤處理 非數字輸入應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 錯誤處理 負數 totalItems 應該返回 null" name="background-utils.testable.js calculateBatchStats 錯誤處理 負數 totalItems 應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 錯誤處理 非正數 batchSize 應該返回 null" name="background-utils.testable.js calculateBatchStats 錯誤處理 非正數 batchSize 應該返回 null" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 錯誤處理 負數 startIndex 應該返回 null" name="background-utils.testable.js calculateBatchStats 錯誤處理 負數 startIndex 應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 錯誤處理 startIndex 超過 totalItems 應該返回 null" name="background-utils.testable.js calculateBatchStats 錯誤處理 startIndex 超過 totalItems 應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 真實世界場景 Notion API 批次處理統計" name="background-utils.testable.js calculateBatchStats 真實世界場景 Notion API 批次處理統計" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 真實世界場景 恢復失敗後從中間繼續" name="background-utils.testable.js calculateBatchStats 真實世界場景 恢復失敗後從中間繼續" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js calculateBatchStats 真實世界場景 小批次處理" name="background-utils.testable.js calculateBatchStats 真實世界場景 小批次處理" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionRichText 應該創建基本富文本對象" name="background-utils.testable.js createNotionRichText 應該創建基本富文本對象" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionRichText 應該包含標註" name="background-utils.testable.js createNotionRichText 應該包含標註" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionRichText 應該支持多個標註" name="background-utils.testable.js createNotionRichText 應該支持多個標註" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionRichText 空字符串應該創建空內容的富文本" name="background-utils.testable.js createNotionRichText 空字符串應該創建空內容的富文本" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionRichText 非字符串應該返回 null" name="background-utils.testable.js createNotionRichText 非字符串應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionRichText 空標註對象不應該添加 annotations 字段" name="background-utils.testable.js createNotionRichText 空標註對象不應該添加 annotations 字段" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionParagraph 應該從字符串創建段落" name="background-utils.testable.js createNotionParagraph 應該從字符串創建段落" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionParagraph 應該支持帶標註的字符串" name="background-utils.testable.js createNotionParagraph 應該支持帶標註的字符串" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionParagraph 應該接受富文本數組" name="background-utils.testable.js createNotionParagraph 應該接受富文本數組" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionParagraph null 或 undefined 應該返回 null" name="background-utils.testable.js createNotionParagraph null 或 undefined 應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionParagraph 空字符串應該返回 null" name="background-utils.testable.js createNotionParagraph 空字符串應該返回 null" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionParagraph 非字符串非數組應該返回 null" name="background-utils.testable.js createNotionParagraph 非字符串非數組應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionHeading 應該創建 H1 標題" name="background-utils.testable.js createNotionHeading 應該創建 H1 標題" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionHeading 應該創建 H2 標題" name="background-utils.testable.js createNotionHeading 應該創建 H2 標題" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionHeading 應該創建 H3 標題" name="background-utils.testable.js createNotionHeading 應該創建 H3 標題" time="0.003">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionHeading 默認應該創建 H1" name="background-utils.testable.js createNotionHeading 默認應該創建 H1" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionHeading 無效級別應該返回 null" name="background-utils.testable.js createNotionHeading 無效級別應該返回 null" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionHeading 空字符串應該返回 null" name="background-utils.testable.js createNotionHeading 空字符串應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionHeading 非字符串應該返回 null" name="background-utils.testable.js createNotionHeading 非字符串應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionImage 應該創建圖片區塊" name="background-utils.testable.js createNotionImage 應該創建圖片區塊" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionImage 應該接受 HTTP URL" name="background-utils.testable.js createNotionImage 應該接受 HTTP URL" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionImage 應該拒絕非 HTTP/HTTPS URL" name="background-utils.testable.js createNotionImage 應該拒絕非 HTTP/HTTPS URL" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionImage 空字符串應該返回 null" name="background-utils.testable.js createNotionImage 空字符串應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionImage 非字符串應該返回 null" name="background-utils.testable.js createNotionImage 非字符串應該返回 null" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js createNotionImage 相對 URL 應該返回 null" name="background-utils.testable.js createNotionImage 相對 URL 應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidNotionBlock 有效的段落區塊應該返回 true" name="background-utils.testable.js isValidNotionBlock 有效的段落區塊應該返回 true" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidNotionBlock 有效的標題區塊應該返回 true" name="background-utils.testable.js isValidNotionBlock 有效的標題區塊應該返回 true" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidNotionBlock 有效的圖片區塊應該返回 true" name="background-utils.testable.js isValidNotionBlock 有效的圖片區塊應該返回 true" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidNotionBlock 缺少 object 字段應該返回 false" name="background-utils.testable.js isValidNotionBlock 缺少 object 字段應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidNotionBlock 缺少 type 字段應該返回 false" name="background-utils.testable.js isValidNotionBlock 缺少 type 字段應該返回 false" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js isValidNotionBlock 缺少對應類型字段應該返回 false" name="background-utils.testable.js isValidNotionBlock 缺少對應類型字段應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidNotionBlock object 不是 &quot;block&quot; 應該返回 false" name="background-utils.testable.js isValidNotionBlock object 不是 &quot;block&quot; 應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidNotionBlock null 應該返回 false" name="background-utils.testable.js isValidNotionBlock null 應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidNotionBlock undefined 應該返回 false" name="background-utils.testable.js isValidNotionBlock undefined 應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js isValidNotionBlock 非對象應該返回 false" name="background-utils.testable.js isValidNotionBlock 非對象應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 isSuccessStatusCode 2xx 狀態碼應該返回 true" name="background-utils.testable.js HTTP 狀態碼工具函數 isSuccessStatusCode 2xx 狀態碼應該返回 true" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 isSuccessStatusCode 非 2xx 狀態碼應該返回 false" name="background-utils.testable.js HTTP 狀態碼工具函數 isSuccessStatusCode 非 2xx 狀態碼應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 isSuccessStatusCode 非數字應該返回 false" name="background-utils.testable.js HTTP 狀態碼工具函數 isSuccessStatusCode 非數字應該返回 false" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 isRedirectStatusCode 3xx 狀態碼應該返回 true" name="background-utils.testable.js HTTP 狀態碼工具函數 isRedirectStatusCode 3xx 狀態碼應該返回 true" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 isRedirectStatusCode 非 3xx 狀態碼應該返回 false" name="background-utils.testable.js HTTP 狀態碼工具函數 isRedirectStatusCode 非 3xx 狀態碼應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 isClientErrorStatusCode 4xx 狀態碼應該返回 true" name="background-utils.testable.js HTTP 狀態碼工具函數 isClientErrorStatusCode 4xx 狀態碼應該返回 true" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 isClientErrorStatusCode 非 4xx 狀態碼應該返回 false" name="background-utils.testable.js HTTP 狀態碼工具函數 isClientErrorStatusCode 非 4xx 狀態碼應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 isServerErrorStatusCode 5xx 狀態碼應該返回 true" name="background-utils.testable.js HTTP 狀態碼工具函數 isServerErrorStatusCode 5xx 狀態碼應該返回 true" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 isServerErrorStatusCode 非 5xx 狀態碼應該返回 false" name="background-utils.testable.js HTTP 狀態碼工具函數 isServerErrorStatusCode 非 5xx 狀態碼應該返回 false" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 getStatusCodeCategory 應該正確分類狀態碼" name="background-utils.testable.js HTTP 狀態碼工具函數 getStatusCodeCategory 應該正確分類狀態碼" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 getStatusCodeCategory 未知狀態碼應該返回 unknown" name="background-utils.testable.js HTTP 狀態碼工具函數 getStatusCodeCategory 未知狀態碼應該返回 unknown" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js HTTP 狀態碼工具函數 getStatusCodeCategory 非數字應該返回 null" name="background-utils.testable.js HTTP 狀態碼工具函數 getStatusCodeCategory 非數字應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js truncateText 短文本應該保持不變" name="background-utils.testable.js truncateText 短文本應該保持不變" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js truncateText 超長文本應該被截斷並添加省略號" name="background-utils.testable.js truncateText 超長文本應該被截斷並添加省略號" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js truncateText 應該支持自定義省略號" name="background-utils.testable.js truncateText 應該支持自定義省略號" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js truncateText 默認應該使用 ... 作為省略號" name="background-utils.testable.js truncateText 默認應該使用 ... 作為省略號" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js truncateText maxLength 為 0 應該返回空字符串" name="background-utils.testable.js truncateText maxLength 為 0 應該返回空字符串" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js truncateText 負數 maxLength 應該返回空字符串" name="background-utils.testable.js truncateText 負數 maxLength 應該返回空字符串" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js truncateText 非字符串應該返回空字符串" name="background-utils.testable.js truncateText 非字符串應該返回空字符串" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js truncateText 剛好等於 maxLength 應該不截斷" name="background-utils.testable.js truncateText 剛好等於 maxLength 應該不截斷" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js truncateText 應該考慮省略號長度" name="background-utils.testable.js truncateText 應該考慮省略號長度" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js truncateText 中文文本應該正確截斷" name="background-utils.testable.js truncateText 中文文本應該正確截斷" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonParse 應該解析有效的 JSON" name="background-utils.testable.js safeJsonParse 應該解析有效的 JSON" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonParse 應該解析 JSON 數組" name="background-utils.testable.js safeJsonParse 應該解析 JSON 數組" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonParse 應該解析 JSON 字符串" name="background-utils.testable.js safeJsonParse 應該解析 JSON 字符串" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonParse 應該解析 JSON 數字" name="background-utils.testable.js safeJsonParse 應該解析 JSON 數字" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonParse 應該解析 JSON 布爾值" name="background-utils.testable.js safeJsonParse 應該解析 JSON 布爾值" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonParse 應該解析 JSON null" name="background-utils.testable.js safeJsonParse 應該解析 JSON null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonParse 無效 JSON 應該返回默認值" name="background-utils.testable.js safeJsonParse 無效 JSON 應該返回默認值" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonParse 應該支持自定義默認值" name="background-utils.testable.js safeJsonParse 應該支持自定義默認值" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonParse 非字符串應該返回默認值" name="background-utils.testable.js safeJsonParse 非字符串應該返回默認值" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonParse 空字符串應該返回默認值" name="background-utils.testable.js safeJsonParse 空字符串應該返回默認值" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify 應該序列化對象" name="background-utils.testable.js safeJsonStringify 應該序列化對象" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify 應該序列化數組" name="background-utils.testable.js safeJsonStringify 應該序列化數組" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify 應該序列化字符串" name="background-utils.testable.js safeJsonStringify 應該序列化字符串" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify 應該序列化數字" name="background-utils.testable.js safeJsonStringify 應該序列化數字" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify 應該序列化布爾值" name="background-utils.testable.js safeJsonStringify 應該序列化布爾值" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify 應該序列化 null" name="background-utils.testable.js safeJsonStringify 應該序列化 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify 應該支持格式化輸出" name="background-utils.testable.js safeJsonStringify 應該支持格式化輸出" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify 循環引用應該返回 null" name="background-utils.testable.js safeJsonStringify 循環引用應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify undefined 應該返回 null" name="background-utils.testable.js safeJsonStringify undefined 應該返回 null" time="0">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify 函數應該被忽略" name="background-utils.testable.js safeJsonStringify 函數應該被忽略" time="0.001">
    </testcase>
    <testcase classname="background-utils.testable.js safeJsonStringify Symbol 應該被忽略" name="background-utils.testable.js safeJsonStringify Symbol 應該被忽略" time="0">
    </testcase>
  </testsuite>
  <testsuite name="StorageUtil" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:15" time="0.099" tests="39">
    <testcase classname="StorageUtil saveHighlights 應該成功保存標註到 chrome.storage" name="StorageUtil saveHighlights 應該成功保存標註到 chrome.storage" time="0.002">
    </testcase>
    <testcase classname="StorageUtil saveHighlights 應該在 chrome.storage 失敗時回退到 localStorage" name="StorageUtil saveHighlights 應該在 chrome.storage 失敗時回退到 localStorage" time="0.002">
    </testcase>
    <testcase classname="StorageUtil saveHighlights 應該處理包含追蹤參數的 URL" name="StorageUtil saveHighlights 應該處理包含追蹤參數的 URL" time="0.002">
    </testcase>
    <testcase classname="StorageUtil saveHighlights 應該處理空標註數組" name="StorageUtil saveHighlights 應該處理空標註數組" time="0.002">
    </testcase>
    <testcase classname="StorageUtil saveHighlights 應該處理包含特殊字符的 URL" name="StorageUtil saveHighlights 應該處理包含特殊字符的 URL" time="0.001">
    </testcase>
    <testcase classname="StorageUtil loadHighlights 應該從 chrome.storage 加載標註（數組格式）" name="StorageUtil loadHighlights 應該從 chrome.storage 加載標註（數組格式）" time="0.002">
    </testcase>
    <testcase classname="StorageUtil loadHighlights 應該從 chrome.storage 加載標註（對象格式）" name="StorageUtil loadHighlights 應該從 chrome.storage 加載標註（對象格式）" time="0.002">
    </testcase>
    <testcase classname="StorageUtil loadHighlights 應該在 chrome.storage 無數據時回退到 localStorage" name="StorageUtil loadHighlights 應該在 chrome.storage 無數據時回退到 localStorage" time="0.002">
    </testcase>
    <testcase classname="StorageUtil loadHighlights 應該處理不存在的 URL" name="StorageUtil loadHighlights 應該處理不存在的 URL" time="0.002">
    </testcase>
    <testcase classname="StorageUtil loadHighlights 應該處理損壞的 localStorage 數據" name="StorageUtil loadHighlights 應該處理損壞的 localStorage 數據" time="0.002">
    </testcase>
    <testcase classname="StorageUtil loadHighlights 應該標準化 URL 後再加載" name="StorageUtil loadHighlights 應該標準化 URL 後再加載" time="0.001">
    </testcase>
    <testcase classname="StorageUtil clearHighlights 應該清除 chrome.storage 和 localStorage 中的標註" name="StorageUtil clearHighlights 應該清除 chrome.storage 和 localStorage 中的標註" time="0.003">
    </testcase>
    <testcase classname="StorageUtil clearHighlights 應該處理 chrome.storage 不可用的情況" name="StorageUtil clearHighlights 應該處理 chrome.storage 不可用的情況" time="0">
    </testcase>
    <testcase classname="StorageUtil clearHighlights 應該標準化 URL 後再清除" name="StorageUtil clearHighlights 應該標準化 URL 後再清除" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 並發操作測試 應該處理並發保存操作" name="StorageUtil 並發操作測試 應該處理並發保存操作" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 並發操作測試 應該處理並發讀取操作" name="StorageUtil 並發操作測試 應該處理並發讀取操作" time="0.01">
    </testcase>
    <testcase classname="StorageUtil 並發操作測試 應該處理並發讀寫操作" name="StorageUtil 並發操作測試 應該處理並發讀寫操作" time="0.005">
    </testcase>
    <testcase classname="StorageUtil 並發操作測試 應該處理並發清除操作" name="StorageUtil 並發操作測試 應該處理並發清除操作" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 數據遷移測試 應該遷移舊格式數據（數組）到新格式" name="StorageUtil 數據遷移測試 應該遷移舊格式數據（數組）到新格式" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 數據遷移測試 應該遷移舊格式數據（對象）到新格式" name="StorageUtil 數據遷移測試 應該遷移舊格式數據（對象）到新格式" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 數據遷移測試 應該處理混合格式的數據" name="StorageUtil 數據遷移測試 應該處理混合格式的數據" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 數據遷移測試 應該處理空的舊格式數據" name="StorageUtil 數據遷移測試 應該處理空的舊格式數據" time="0">
    </testcase>
    <testcase classname="StorageUtil 數據遷移測試 應該處理損壞的遷移數據" name="StorageUtil 數據遷移測試 應該處理損壞的遷移數據" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 存儲配額測試 應該處理存儲配額超限錯誤" name="StorageUtil 存儲配額測試 應該處理存儲配額超限錯誤" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 存儲配額測試 應該處理 localStorage 配額超限" name="StorageUtil 存儲配額測試 應該處理 localStorage 配額超限" time="0.003">
    </testcase>
    <testcase classname="StorageUtil 存儲配額測試 應該計算數據大小" name="StorageUtil 存儲配額測試 應該計算數據大小" time="0.001">
    </testcase>
    <testcase classname="StorageUtil 存儲配額測試 應該處理超大單個標註" name="StorageUtil 存儲配額測試 應該處理超大單個標註" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 錯誤恢復測試 應該從 chrome.storage 錯誤中恢復" name="StorageUtil 錯誤恢復測試 應該從 chrome.storage 錯誤中恢復" time="0.003">
    </testcase>
    <testcase classname="StorageUtil 錯誤恢復測試 應該處理 localStorage 不可用" name="StorageUtil 錯誤恢復測試 應該處理 localStorage 不可用" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 錯誤恢復測試 應該處理讀取時的網絡錯誤" name="StorageUtil 錯誤恢復測試 應該處理讀取時的網絡錯誤" time="0.001">
    </testcase>
    <testcase classname="StorageUtil 邊界情況測試 應該處理空字符串 URL" name="StorageUtil 邊界情況測試 應該處理空字符串 URL" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 邊界情況測試 應該處理 null URL" name="StorageUtil 邊界情況測試 應該處理 null URL" time="0.001">
    </testcase>
    <testcase classname="StorageUtil 邊界情況測試 應該處理 undefined 數據" name="StorageUtil 邊界情況測試 應該處理 undefined 數據" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 邊界情況測試 應該處理 null 數據" name="StorageUtil 邊界情況測試 應該處理 null 數據" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 邊界情況測試 應該處理非常長的 URL" name="StorageUtil 邊界情況測試 應該處理非常長的 URL" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 邊界情況測試 應該處理包含 Unicode 字符的數據" name="StorageUtil 邊界情況測試 應該處理包含 Unicode 字符的數據" time="0.001">
    </testcase>
    <testcase classname="StorageUtil 邊界情況測試 應該處理特殊字符的標註文本" name="StorageUtil 邊界情況測試 應該處理特殊字符的標註文本" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 性能測試 應該快速保存小量數據" name="StorageUtil 性能測試 應該快速保存小量數據" time="0.002">
    </testcase>
    <testcase classname="StorageUtil 性能測試 應該處理批量保存操作" name="StorageUtil 性能測試 應該處理批量保存操作" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Highlighter Interactions" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:15" time="0.109" tests="21">
    <testcase classname="Highlighter Interactions 文本選擇和高亮創建 應該能夠選擇文本" name="Highlighter Interactions 文本選擇和高亮創建 應該能夠選擇文本" time="0.005">
    </testcase>
    <testcase classname="Highlighter Interactions 文本選擇和高亮創建 應該能夠獲取選擇的範圍" name="Highlighter Interactions 文本選擇和高亮創建 應該能夠獲取選擇的範圍" time="0.003">
    </testcase>
    <testcase classname="Highlighter Interactions 文本選擇和高亮創建 應該處理跨段落選擇" name="Highlighter Interactions 文本選擇和高亮創建 應該處理跨段落選擇" time="0.004">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮顏色管理 應該支持黃色高亮" name="Highlighter Interactions 高亮顏色管理 應該支持黃色高亮" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮顏色管理 應該支持多種高亮顏色" name="Highlighter Interactions 高亮顏色管理 應該支持多種高亮顏色" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮顏色管理 應該能夠切換高亮顏色" name="Highlighter Interactions 高亮顏色管理 應該能夠切換高亮顏色" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮數據結構 應該創建完整的高亮對象" name="Highlighter Interactions 高亮數據結構 應該創建完整的高亮對象" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮數據結構 應該包含必要的範圍信息" name="Highlighter Interactions 高亮數據結構 應該包含必要的範圍信息" time="0.001">
    </testcase>
    <testcase classname="Highlighter Interactions CSS Highlight API 支持檢測 應該能夠檢測 Highlight API 是否可用" name="Highlighter Interactions CSS Highlight API 支持檢測 應該能夠檢測 Highlight API 是否可用" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions CSS Highlight API 支持檢測 應該有回退策略當 API 不可用時" name="Highlighter Interactions CSS Highlight API 支持檢測 應該有回退策略當 API 不可用時" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮存儲鍵生成 應該基於 URL 生成存儲鍵" name="Highlighter Interactions 高亮存儲鍵生成 應該基於 URL 生成存儲鍵" time="0.001">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮存儲鍵生成 應該標準化 URL 中的 hash" name="Highlighter Interactions 高亮存儲鍵生成 應該標準化 URL 中的 hash" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮存儲鍵生成 應該標準化尾部斜杠" name="Highlighter Interactions 高亮存儲鍵生成 應該標準化尾部斜杠" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮事件處理 應該處理 mouseup 事件" name="Highlighter Interactions 高亮事件處理 應該處理 mouseup 事件" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮事件處理 應該處理 click 事件（用於刪除高亮）" name="Highlighter Interactions 高亮事件處理 應該處理 click 事件（用於刪除高亮）" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮事件處理 應該處理雙擊刪除高亮" name="Highlighter Interactions 高亮事件處理 應該處理雙擊刪除高亮" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮數組操作 應該能夠添加高亮到數組" name="Highlighter Interactions 高亮數組操作 應該能夠添加高亮到數組" time="0.001">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮數組操作 應該能夠從數組刪除高亮" name="Highlighter Interactions 高亮數組操作 應該能夠從數組刪除高亮" time="0.002">
    </testcase>
    <testcase classname="Highlighter Interactions 高亮數組操作 應該能夠更新高亮顏色" name="Highlighter Interactions 高亮數組操作 應該能夠更新高亮顏色" time="0.001">
    </testcase>
    <testcase classname="Highlighter Interactions XPath 路徑生成 應該生成元素的 XPath" name="Highlighter Interactions XPath 路徑生成 應該生成元素的 XPath" time="0.01">
    </testcase>
    <testcase classname="Highlighter Interactions XPath 路徑生成 應該處理文本節點的路徑" name="Highlighter Interactions XPath 路徑生成 應該處理文本節點的路徑" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CMS Content Extraction" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:15" time="0.097" tests="10">
    <testcase classname="CMS Content Extraction Drupal CMS 內容提取 應該從 .field--type-text-with-summary 提取內容" name="CMS Content Extraction Drupal CMS 內容提取 應該從 .field--type-text-with-summary 提取內容" time="0.006">
    </testcase>
    <testcase classname="CMS Content Extraction Drupal CMS 內容提取 應該從 .field--name-body 提取內容" name="CMS Content Extraction Drupal CMS 內容提取 應該從 .field--name-body 提取內容" time="0.003">
    </testcase>
    <testcase classname="CMS Content Extraction WordPress CMS 內容提取 應該從 .entry-content 提取內容" name="CMS Content Extraction WordPress CMS 內容提取 應該從 .entry-content 提取內容" time="0.008">
    </testcase>
    <testcase classname="CMS Content Extraction WordPress CMS 內容提取 應該從 .post-content 提取內容" name="CMS Content Extraction WordPress CMS 內容提取 應該從 .post-content 提取內容" time="0.003">
    </testcase>
    <testcase classname="CMS Content Extraction List-based 內容提取（CLI 文檔） 應該識別大型列表內容" name="CMS Content Extraction List-based 內容提取（CLI 文檔） 應該識別大型列表內容" time="0.006">
    </testcase>
    <testcase classname="CMS Content Extraction List-based 內容提取（CLI 文檔） 應該處理嵌套列表結構" name="CMS Content Extraction List-based 內容提取（CLI 文檔） 應該處理嵌套列表結構" time="0.003">
    </testcase>
    <testcase classname="CMS Content Extraction Expandable 內容處理 應該識別 details 元素" name="CMS Content Extraction Expandable 內容處理 應該識別 details 元素" time="0.002">
    </testcase>
    <testcase classname="CMS Content Extraction Expandable 內容處理 應該識別 .collapsible 元素" name="CMS Content Extraction Expandable 內容處理 應該識別 .collapsible 元素" time="0.002">
    </testcase>
    <testcase classname="CMS Content Extraction Content 清理 應該能夠識別廣告元素" name="CMS Content Extraction Content 清理 應該能夠識別廣告元素" time="0.002">
    </testcase>
    <testcase classname="CMS Content Extraction Content 清理 應該能夠識別導航元素" name="CMS Content Extraction Content 清理 應該能夠識別導航元素" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Background Notion Page Operations" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:15" time="0.073" tests="18">
    <testcase classname="Background Notion Page Operations checkNotionPageExists 應該成功檢查存在的頁面" name="Background Notion Page Operations checkNotionPageExists 應該成功檢查存在的頁面" time="0.001">
    </testcase>
    <testcase classname="Background Notion Page Operations checkNotionPageExists 應該正確處理不存在的頁面" name="Background Notion Page Operations checkNotionPageExists 應該正確處理不存在的頁面" time="0">
    </testcase>
    <testcase classname="Background Notion Page Operations checkNotionPageExists 應該處理 API 錯誤" name="Background Notion Page Operations checkNotionPageExists 應該處理 API 錯誤" time="0.001">
    </testcase>
    <testcase classname="Background Notion Page Operations checkNotionPageExists 應該處理網路錯誤" name="Background Notion Page Operations checkNotionPageExists 應該處理網路錯誤" time="0">
    </testcase>
    <testcase classname="Background Notion Page Operations checkNotionPageExists 應該處理沒有錯誤消息的 API 錯誤" name="Background Notion Page Operations checkNotionPageExists 應該處理沒有錯誤消息的 API 錯誤" time="0.001">
    </testcase>
    <testcase classname="Background Notion Page Operations handleCheckNotionPageExistsMessage 應該成功處理檢查頁面存在的消息" name="Background Notion Page Operations handleCheckNotionPageExistsMessage 應該成功處理檢查頁面存在的消息" time="0">
    </testcase>
    <testcase classname="Background Notion Page Operations handleCheckNotionPageExistsMessage 應該處理缺少 pageId 的請求" name="Background Notion Page Operations handleCheckNotionPageExistsMessage 應該處理缺少 pageId 的請求" time="0.001">
    </testcase>
    <testcase classname="Background Notion Page Operations handleCheckNotionPageExistsMessage 應該處理缺少 API Token 的情況" name="Background Notion Page Operations handleCheckNotionPageExistsMessage 應該處理缺少 API Token 的情況" time="0">
    </testcase>
    <testcase classname="Background Notion Page Operations handleCheckNotionPageExistsMessage 應該處理檢查頁面時的異常" name="Background Notion Page Operations handleCheckNotionPageExistsMessage 應該處理檢查頁面時的異常" time="0.001">
    </testcase>
    <testcase classname="Background Notion Page Operations handleOpenNotionPage 應該成功打開 Notion 頁面" name="Background Notion Page Operations handleOpenNotionPage 應該成功打開 Notion 頁面" time="0">
    </testcase>
    <testcase classname="Background Notion Page Operations handleOpenNotionPage 應該處理缺少 URL 的請求" name="Background Notion Page Operations handleOpenNotionPage 應該處理缺少 URL 的請求" time="0.001">
    </testcase>
    <testcase classname="Background Notion Page Operations handleOpenNotionPage 應該處理創建標籤頁失敗" name="Background Notion Page Operations handleOpenNotionPage 應該處理創建標籤頁失敗" time="0">
    </testcase>
    <testcase classname="Background Notion Page Operations handleOpenNotionPage 應該處理異常錯誤" name="Background Notion Page Operations handleOpenNotionPage 應該處理異常錯誤" time="0">
    </testcase>
    <testcase classname="Background Notion Page Operations 集成測試 完整的頁面檢查流程應該正常工作" name="Background Notion Page Operations 集成測試 完整的頁面檢查流程應該正常工作" time="0.052">
    </testcase>
    <testcase classname="Background Notion Page Operations 集成測試 完整的頁面打開流程應該正常工作" name="Background Notion Page Operations 集成測試 完整的頁面打開流程應該正常工作" time="0.001">
    </testcase>
    <testcase classname="Background Notion Page Operations 錯誤處理和邊界情況 checkNotionPageExists 應該處理空參數" name="Background Notion Page Operations 錯誤處理和邊界情況 checkNotionPageExists 應該處理空參數" time="0.001">
    </testcase>
    <testcase classname="Background Notion Page Operations 錯誤處理和邊界情況 handleOpenNotionPage 應該處理無效 URL" name="Background Notion Page Operations 錯誤處理和邊界情況 handleOpenNotionPage 應該處理無效 URL" time="0">
    </testcase>
    <testcase classname="Background Notion Page Operations 錯誤處理和邊界情況 應該處理 Chrome API 不可用的情況" name="Background Notion Page Operations 錯誤處理和邊界情況 應該處理 Chrome API 不可用的情況" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Content Extraction - Testable Wrapper" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:15" time="0.077" tests="6">
    <testcase classname="Content Extraction - Testable Wrapper isContentGood: 拒絕過短內容與高連結密度" name="Content Extraction - Testable Wrapper isContentGood: 拒絕過短內容與高連結密度" time="0.008">
    </testcase>
    <testcase classname="Content Extraction - Testable Wrapper isContentGood: 接受合格內容" name="Content Extraction - Testable Wrapper isContentGood: 接受合格內容" time="0.003">
    </testcase>
    <testcase classname="Content Extraction - Testable Wrapper findContentCmsFallback: Drupal 結構" name="Content Extraction - Testable Wrapper findContentCmsFallback: Drupal 結構" time="0.004">
    </testcase>
    <testcase classname="Content Extraction - Testable Wrapper findContentCmsFallback: WordPress 選擇器" name="Content Extraction - Testable Wrapper findContentCmsFallback: WordPress 選擇器" time="0.003">
    </testcase>
    <testcase classname="Content Extraction - Testable Wrapper findContentCmsFallback: Article 結構" name="Content Extraction - Testable Wrapper findContentCmsFallback: Article 結構" time="0.007">
    </testcase>
    <testcase classname="Content Extraction - Testable Wrapper findContentCmsFallback: 通用最大內容塊" name="Content Extraction - Testable Wrapper findContentCmsFallback: 通用最大內容塊" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="highlighter-v2 toolbar show/hide 穩定性" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:15" time="0.151" tests="5">
    <testcase classname="highlighter-v2 toolbar show/hide 穩定性 show() 應在節點被移除後自動重新掛載並顯示" name="highlighter-v2 toolbar show/hide 穩定性 show() 應在節點被移除後自動重新掛載並顯示" time="0.084">
    </testcase>
    <testcase classname="highlighter-v2 toolbar show/hide 穩定性 show() 應重申關鍵樣式（position、top/right、z-index、visibility、opacity）" name="highlighter-v2 toolbar show/hide 穩定性 show() 應重申關鍵樣式（position、top/right、z-index、visibility、opacity）" time="0.006">
    </testcase>
    <testcase classname="highlighter-v2 toolbar show/hide 穩定性 hide() 應將 display 設為 none" name="highlighter-v2 toolbar show/hide 穩定性 hide() 應將 display 設為 none" time="0.004">
    </testcase>
    <testcase classname="highlighter-v2 toolbar show/hide 穩定性 在存在高層級 overlay 的長頁情境下，toolbar z-index 應高於 overlay" name="highlighter-v2 toolbar show/hide 穩定性 在存在高層級 overlay 的長頁情境下，toolbar z-index 應高於 overlay" time="0.005">
    </testcase>
    <testcase classname="highlighter-v2 toolbar show/hide 穩定性 MutationObserver 應在 toolbar 被移除後自動重新掛載（無需呼叫 show）" name="highlighter-v2 toolbar show/hide 穩定性 MutationObserver 應在 toolbar 被移除後自動重新掛載（無需呼叫 show）" time="0.04">
    </testcase>
  </testsuite>
  <testsuite name="PerformanceOptimizer 進階功能測試" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:15" time="0.069" tests="14">
    <testcase classname="PerformanceOptimizer 進階功能測試 TTL 機制和緩存管理 應該支持 TTL 機制" name="PerformanceOptimizer 進階功能測試 TTL 機制和緩存管理 應該支持 TTL 機制" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 TTL 機制和緩存管理 應該清理過期緩存" name="PerformanceOptimizer 進階功能測試 TTL 機制和緩存管理 應該清理過期緩存" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 TTL 機制和緩存管理 應該強制刷新特定選擇器緩存" name="PerformanceOptimizer 進階功能測試 TTL 機制和緩存管理 應該強制刷新特定選擇器緩存" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 TTL 機制和緩存管理 應該維護緩存大小限制" name="PerformanceOptimizer 進階功能測試 TTL 機制和緩存管理 應該維護緩存大小限制" time="0">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 緩存預熱功能 應該預熱選擇器" name="PerformanceOptimizer 進階功能測試 緩存預熱功能 應該預熱選擇器" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 緩存預熱功能 應該進行智能預熱" name="PerformanceOptimizer 進階功能測試 緩存預熱功能 應該進行智能預熱" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 緩存預熱功能 應該避免重複預熱相同選擇器" name="PerformanceOptimizer 進階功能測試 緩存預熱功能 應該避免重複預熱相同選擇器" time="0.004">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 改進的批處理系統 應該動態計算最佳批處理大小" name="PerformanceOptimizer 進階功能測試 改進的批處理系統 應該動態計算最佳批處理大小" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 改進的批處理系統 應該支持非阻塞批處理" name="PerformanceOptimizer 進階功能測試 改進的批處理系統 應該支持非阻塞批處理" time="0">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 改進的批處理系統 應該根據性能動態調整批處理大小" name="PerformanceOptimizer 進階功能測試 改進的批處理系統 應該根據性能動態調整批處理大小" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 自適應性能功能 應該初始化自適應管理器" name="PerformanceOptimizer 進階功能測試 自適應性能功能 應該初始化自適應管理器" time="0">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 自適應性能功能 應該分析頁面內容" name="PerformanceOptimizer 進階功能測試 自適應性能功能 應該分析頁面內容" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 自適應性能功能 應該讓出控制權給主線程" name="PerformanceOptimizer 進階功能測試 自適應性能功能 應該讓出控制權給主線程" time="0">
    </testcase>
    <testcase classname="PerformanceOptimizer 進階功能測試 系統負載調整 應該根據系統負載調整性能參數" name="PerformanceOptimizer 進階功能測試 系統負載調整 應該根據系統負載調整性能參數" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PageComplexityDetector - Testable Wrapper" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:15" time="0.076" tests="4">
    <testcase classname="PageComplexityDetector - Testable Wrapper 技術文檔頁面 → prefer extractus" name="PageComplexityDetector - Testable Wrapper 技術文檔頁面 → prefer extractus" time="0.015">
    </testcase>
    <testcase classname="PageComplexityDetector - Testable Wrapper 新聞/複雜頁面 → require readability" name="PageComplexityDetector - Testable Wrapper 新聞/複雜頁面 → require readability" time="0.006">
    </testcase>
    <testcase classname="PageComplexityDetector - Testable Wrapper 分析報告包含推薦與指標" name="PageComplexityDetector - Testable Wrapper 分析報告包含推薦與指標" time="0.003">
    </testcase>
    <testcase classname="PageComplexityDetector - Testable Wrapper logAnalysis 輸出到 console 與 analytics" name="PageComplexityDetector - Testable Wrapper logAnalysis 輸出到 console 與 analytics" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="FallbackStrategies - 全面測試" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.085" tests="71">
    <testcase classname="FallbackStrategies - 全面測試 extractFromBackground 應該從元素本身提取背景圖" name="FallbackStrategies - 全面測試 extractFromBackground 應該從元素本身提取背景圖" time="0.008">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromBackground 應該從父元素提取背景圖" name="FallbackStrategies - 全面測試 extractFromBackground 應該從父元素提取背景圖" time="0.002">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromBackground 應該限制父元素檢查層級" name="FallbackStrategies - 全面測試 extractFromBackground 應該限制父元素檢查層級" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromBackground 應該支持禁用父元素檢查" name="FallbackStrategies - 全面測試 extractFromBackground 應該支持禁用父元素檢查" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromBackground 應該處理 null 元素" name="FallbackStrategies - 全面測試 extractFromBackground 應該處理 null 元素" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromBackground 應該處理沒有背景圖的元素" name="FallbackStrategies - 全面測試 extractFromBackground 應該處理沒有背景圖的元素" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromBackground 應該處理 background-image: none" name="FallbackStrategies - 全面測試 extractFromBackground 應該處理 background-image: none" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromBackground 應該處理不帶引號的 URL" name="FallbackStrategies - 全面測試 extractFromBackground 應該處理不帶引號的 URL" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromBackground 應該處理單引號的 URL" name="FallbackStrategies - 全面測試 extractFromBackground 應該處理單引號的 URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromPicture 應該從 picture 元素的 source 提取 URL" name="FallbackStrategies - 全面測試 extractFromPicture 應該從 picture 元素的 source 提取 URL" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromPicture 應該從 data-srcset 屬性提取" name="FallbackStrategies - 全面測試 extractFromPicture 應該從 data-srcset 屬性提取" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromPicture 應該從 source 的 src 屬性提取" name="FallbackStrategies - 全面測試 extractFromPicture 應該從 source 的 src 屬性提取" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromPicture 應該從 data-src 屬性提取" name="FallbackStrategies - 全面測試 extractFromPicture 應該從 data-src 屬性提取" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromPicture 應該處理 null 元素" name="FallbackStrategies - 全面測試 extractFromPicture 應該處理 null 元素" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromPicture 應該處理沒有父元素的圖片" name="FallbackStrategies - 全面測試 extractFromPicture 應該處理沒有父元素的圖片" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromPicture 應該處理父元素不是 picture 的情況" name="FallbackStrategies - 全面測試 extractFromPicture 應該處理父元素不是 picture 的情況" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromPicture 應該處理沒有 source 元素的 picture" name="FallbackStrategies - 全面測試 extractFromPicture 應該處理沒有 source 元素的 picture" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromPicture 應該處理多個 source 元素並返回第一個有效的" name="FallbackStrategies - 全面測試 extractFromPicture 應該處理多個 source 元素並返回第一個有效的" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromNoscript 應該從元素內部的 noscript 提取 URL" name="FallbackStrategies - 全面測試 extractFromNoscript 應該從元素內部的 noscript 提取 URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromNoscript 應該從兄弟元素中的 noscript 提取" name="FallbackStrategies - 全面測試 extractFromNoscript 應該從兄弟元素中的 noscript 提取" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromNoscript 應該從父元素中的 noscript 提取" name="FallbackStrategies - 全面測試 extractFromNoscript 應該從父元素中的 noscript 提取" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromNoscript 應該支持禁用兄弟元素搜索" name="FallbackStrategies - 全面測試 extractFromNoscript 應該支持禁用兄弟元素搜索" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromNoscript 應該支持禁用父元素搜索" name="FallbackStrategies - 全面測試 extractFromNoscript 應該支持禁用父元素搜索" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromNoscript 應該處理 null 元素" name="FallbackStrategies - 全面測試 extractFromNoscript 應該處理 null 元素" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromNoscript 應該從純文本 URL 提取" name="FallbackStrategies - 全面測試 extractFromNoscript 應該從純文本 URL 提取" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromNoscript 應該處理複雜的 HTML 內容" name="FallbackStrategies - 全面測試 extractFromNoscript 應該處理複雜的 HTML 內容" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromNoscript 應該處理多個圖片標籤並返回第一個" name="FallbackStrategies - 全面測試 extractFromNoscript 應該處理多個圖片標籤並返回第一個" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromNoscript 應該處理空的 noscript 元素" name="FallbackStrategies - 全面測試 extractFromNoscript 應該處理空的 noscript 元素" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromFigure 應該從 figure 內的其他圖片提取" name="FallbackStrategies - 全面測試 extractFromFigure 應該從 figure 內的其他圖片提取" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromFigure 應該從 data-src 屬性提取" name="FallbackStrategies - 全面測試 extractFromFigure 應該從 data-src 屬性提取" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromFigure 應該從 figure 背景圖提取" name="FallbackStrategies - 全面測試 extractFromFigure 應該從 figure 背景圖提取" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromFigure 應該處理 null 元素" name="FallbackStrategies - 全面測試 extractFromFigure 應該處理 null 元素" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromFigure 應該處理不在 figure 內的元素" name="FallbackStrategies - 全面測試 extractFromFigure 應該處理不在 figure 內的元素" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromFigure 應該跳過自身圖片元素" name="FallbackStrategies - 全面測試 extractFromFigure 應該跳過自身圖片元素" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 extractFromFigure 應該處理沒有圖片的 figure" name="FallbackStrategies - 全面測試 extractFromFigure 應該處理沒有圖片的 figure" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 getAllFallbackUrls 應該收集所有可用的回退 URL" name="FallbackStrategies - 全面測試 getAllFallbackUrls 應該收集所有可用的回退 URL" time="0.005">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 getAllFallbackUrls 應該按置信度排序結果" name="FallbackStrategies - 全面測試 getAllFallbackUrls 應該按置信度排序結果" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 getAllFallbackUrls 沒有任何回退 URL 時應該返回空數組" name="FallbackStrategies - 全面測試 getAllFallbackUrls 沒有任何回退 URL 時應該返回空數組" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 getAllFallbackUrls 應該包含所有可能的來源" name="FallbackStrategies - 全面測試 getAllFallbackUrls 應該包含所有可能的來源" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該接受有效的 HTTP URL" name="FallbackStrategies - 全面測試 _isValidUrl 應該接受有效的 HTTP URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該接受有效的 HTTPS URL" name="FallbackStrategies - 全面測試 _isValidUrl 應該接受有效的 HTTPS URL" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕 data: URL" name="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕 data: URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕 blob: URL" name="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕 blob: URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕過短的 URL" name="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕過短的 URL" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該接受相對 URL" name="FallbackStrategies - 全面測試 _isValidUrl 應該接受相對 URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕錨點 URL" name="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕錨點 URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕 null" name="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕 null" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕 undefined" name="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕 undefined" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕空字符串" name="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕空字符串" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕非字符串" name="FallbackStrategies - 全面測試 _isValidUrl 應該拒絕非字符串" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該從簡單的 srcset 提取 URL" name="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該從簡單的 srcset 提取 URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該從多個條目中提取第一個有效的 URL" name="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該從多個條目中提取第一個有效的 URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該處理沒有寬度描述符的 srcset" name="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該處理沒有寬度描述符的 srcset" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該處理 null" name="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該處理 null" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該處理空字符串" name="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該處理空字符串" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該修剪空白" name="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該修剪空白" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該處理多個空格分隔的部分" name="FallbackStrategies - 全面測試 _extractUrlFromSrcset 應該處理多個空格分隔的部分" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該從 img 標籤提取 URL" name="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該從 img 標籤提取 URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該從純文本 URL 提取" name="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該從純文本 URL 提取" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該處理 null" name="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該處理 null" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該處理空內容" name="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該處理空內容" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該支持不同的圖片格式" name="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該支持不同的圖片格式" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該處理單引號的 img 標籤" name="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該處理單引號的 img 標籤" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該從多個 img 標籤中提取第一個" name="FallbackStrategies - 全面測試 _extractUrlFromNoscriptContent 應該從多個 img 標籤中提取第一個" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該從 computed style 提取背景圖 URL" name="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該從 computed style 提取背景圖 URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該處理 null 元素" name="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該處理 null 元素" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該處理 background-image: none" name="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該處理 background-image: none" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該處理沒有背景圖的元素" name="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該處理沒有背景圖的元素" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該處理不帶引號的 URL" name="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該處理不帶引號的 URL" time="0">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該處理單引號的 URL" name="FallbackStrategies - 全面測試 _getBackgroundImageUrl 應該處理單引號的 URL" time="0.001">
    </testcase>
    <testcase classname="FallbackStrategies - 全面測試 模塊導出 應該正確導出到 module.exports" name="FallbackStrategies - 全面測試 模塊導出 應該正確導出到 module.exports" time="0">
    </testcase>
  </testsuite>
  <testsuite name="content.js - 圖片處理函數" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.061" tests="61">
    <testcase classname="content.js - 圖片處理函數 cleanImageUrl 應該返回普通圖片 URL" name="content.js - 圖片處理函數 cleanImageUrl 應該返回普通圖片 URL" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cleanImageUrl 應該處理帶查詢參數的 URL" name="content.js - 圖片處理函數 cleanImageUrl 應該處理帶查詢參數的 URL" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cleanImageUrl 應該移除重複的查詢參數" name="content.js - 圖片處理函數 cleanImageUrl 應該移除重複的查詢參數" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cleanImageUrl 應該處理代理 URL（u 參數）" name="content.js - 圖片處理函數 cleanImageUrl 應該處理代理 URL（u 參數）" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cleanImageUrl 應該遞歸處理嵌套的代理 URL" name="content.js - 圖片處理函數 cleanImageUrl 應該遞歸處理嵌套的代理 URL" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cleanImageUrl 應該處理 null 和 undefined" name="content.js - 圖片處理函數 cleanImageUrl 應該處理 null 和 undefined" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cleanImageUrl 應該處理空字符串" name="content.js - 圖片處理函數 cleanImageUrl 應該處理空字符串" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cleanImageUrl 應該處理非字符串輸入" name="content.js - 圖片處理函數 cleanImageUrl 應該處理非字符串輸入" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cleanImageUrl 應該處理無效的 URL" name="content.js - 圖片處理函數 cleanImageUrl 應該處理無效的 URL" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該接受常見圖片擴展名" name="content.js - 圖片處理函數 isValidImageUrl 應該接受常見圖片擴展名" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該接受帶查詢參數的圖片 URL" name="content.js - 圖片處理函數 isValidImageUrl 應該接受帶查詢參數的圖片 URL" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該接受包含圖片路徑關鍵詞的 URL" name="content.js - 圖片處理函數 isValidImageUrl 應該接受包含圖片路徑關鍵詞的 URL" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該拒絕非 HTTP(S) 協議" name="content.js - 圖片處理函數 isValidImageUrl 應該拒絕非 HTTP(S) 協議" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該拒絕過長的 URL" name="content.js - 圖片處理函數 isValidImageUrl 應該拒絕過長的 URL" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該拒絕非圖片文件" name="content.js - 圖片處理函數 isValidImageUrl 應該拒絕非圖片文件" time="0.004">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該拒絕 API 端點" name="content.js - 圖片處理函數 isValidImageUrl 應該拒絕 API 端點" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該拒絕認證頁面" name="content.js - 圖片處理函數 isValidImageUrl 應該拒絕認證頁面" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該拒絕沒有圖片擴展名和路徑模式的 URL" name="content.js - 圖片處理函數 isValidImageUrl 應該拒絕沒有圖片擴展名和路徑模式的 URL" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該處理 null 和 undefined" name="content.js - 圖片處理函數 isValidImageUrl 應該處理 null 和 undefined" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該處理空字符串" name="content.js - 圖片處理函數 isValidImageUrl 應該處理空字符串" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isValidImageUrl 應該處理非字符串輸入" name="content.js - 圖片處理函數 isValidImageUrl 應該處理非字符串輸入" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從 noscript 內的 img 回退提取" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從 noscript 內的 img 回退提取" time="0.004">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從背景圖回退提取（當 img 無有效屬性）" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從背景圖回退提取（當 img 無有效屬性）" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該在 srcset 以最大寬度選擇 URL" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該在 srcset 以最大寬度選擇 URL" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從擴展 data-* 屬性提取" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從擴展 data-* 屬性提取" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從 src 屬性提取" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從 src 屬性提取" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從 data-src 提取（懶加載）" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從 data-src 提取（懶加載）" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該優先使用 srcset" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該優先使用 srcset" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從 data-lazy-src 提取" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從 data-lazy-src 提取" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從 data-original 提取" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從 data-original 提取" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該跳過 data: URL" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該跳過 data: URL" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該跳過 blob: URL" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該跳過 blob: URL" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該處理 &lt;picture&gt; 元素中的 &lt;source&gt;" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該處理 &lt;picture&gt; 元素中的 &lt;source&gt;" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從多個 data- 屬性中選擇第一個有效的" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該從多個 data- 屬性中選擇第一個有效的" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該返回 null 當沒有找到有效 src" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該返回 null 當沒有找到有效 src" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該處理帶空格的 srcset" name="content.js - 圖片處理函數 extractImageSrc - 使用 JSDOM 應該處理帶空格的 srcset" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該接受足夠長的內容" name="content.js - 圖片處理函數 isContentGood 應該接受足夠長的內容" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該拒絕太短的內容" name="content.js - 圖片處理函數 isContentGood 應該拒絕太短的內容" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該拒絕高連結密度的內容" name="content.js - 圖片處理函數 isContentGood 應該拒絕高連結密度的內容" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該接受低連結密度的內容" name="content.js - 圖片處理函數 isContentGood 應該接受低連結密度的內容" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該處理 null 文章" name="content.js - 圖片處理函數 isContentGood 應該處理 null 文章" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該處理沒有 content 屬性的文章" name="content.js - 圖片處理函數 isContentGood 應該處理沒有 content 屬性的文章" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該處理沒有 length 屬性的文章" name="content.js - 圖片處理函數 isContentGood 應該處理沒有 length 屬性的文章" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該使用自定義 MIN_CONTENT_LENGTH" name="content.js - 圖片處理函數 isContentGood 應該使用自定義 MIN_CONTENT_LENGTH" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該使用自定義 MAX_LINK_DENSITY" name="content.js - 圖片處理函數 isContentGood 應該使用自定義 MAX_LINK_DENSITY" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該處理沒有連結的內容" name="content.js - 圖片處理函數 isContentGood 應該處理沒有連結的內容" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該處理多個連結" name="content.js - 圖片處理函數 isContentGood 應該處理多個連結" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該處理空連結" name="content.js - 圖片處理函數 isContentGood 應該處理空連結" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該處理嵌套的 HTML 結構" name="content.js - 圖片處理函數 isContentGood 應該處理嵌套的 HTML 結構" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 isContentGood 應該在沒有 document 時使用簡化邏輯" name="content.js - 圖片處理函數 isContentGood 應該在沒有 document 時使用簡化邏輯" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 PerformanceOptimizer 可選邏輯 應該在 PerformanceOptimizer 可用時正常初始化" name="content.js - 圖片處理函數 PerformanceOptimizer 可選邏輯 應該在 PerformanceOptimizer 可用時正常初始化" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 PerformanceOptimizer 可選邏輯 應該在 PerformanceOptimizer 不存在時使用回退" name="content.js - 圖片處理函數 PerformanceOptimizer 可選邏輯 應該在 PerformanceOptimizer 不存在時使用回退" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 PerformanceOptimizer 可選邏輯 應該在 PerformanceOptimizer 初始化失敗時優雅降級" name="content.js - 圖片處理函數 PerformanceOptimizer 可選邏輯 應該在 PerformanceOptimizer 初始化失敗時優雅降級" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cachedQuery 回退函數 應該在 PerformanceOptimizer 可用時使用其 cachedQuery" name="content.js - 圖片處理函數 cachedQuery 回退函數 應該在 PerformanceOptimizer 可用時使用其 cachedQuery" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cachedQuery 回退函數 應該在 PerformanceOptimizer 不存在時回退到原生查詢" name="content.js - 圖片處理函數 cachedQuery 回退函數 應該在 PerformanceOptimizer 不存在時回退到原生查詢" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 cachedQuery 回退函數 應該正確處理 single 選項" name="content.js - 圖片處理函數 cachedQuery 回退函數 應該正確處理 single 選項" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 ImageUtils 回退實現 應該在 ImageUtils 不存在時創建回退實現" name="content.js - 圖片處理函數 ImageUtils 回退實現 應該在 ImageUtils 不存在時創建回退實現" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 ImageUtils 回退實現 回退實現應該正確處理 cleanImageUrl" name="content.js - 圖片處理函數 ImageUtils 回退實現 回退實現應該正確處理 cleanImageUrl" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 ImageUtils 回退實現 回退實現應該正確處理 isValidImageUrl" name="content.js - 圖片處理函數 ImageUtils 回退實現 回退實現應該正確處理 isValidImageUrl" time="0">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 ImageUtils 回退實現 回退實現應該正確處理 extractImageSrc" name="content.js - 圖片處理函數 ImageUtils 回退實現 回退實現應該正確處理 extractImageSrc" time="0.001">
    </testcase>
    <testcase classname="content.js - 圖片處理函數 ImageUtils 回退實現 回退實現應該正確處理 generateImageCacheKey" name="content.js - 圖片處理函數 ImageUtils 回退實現 回退實現應該正確處理 generateImageCacheKey" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ImageExtractor - 全面測試" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.055" tests="57">
    <testcase classname="ImageExtractor - 全面測試 構造函數和初始化 應該使用默認選項創建實例" name="ImageExtractor - 全面測試 構造函數和初始化 應該使用默認選項創建實例" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 構造函數和初始化 應該合併自定義選項" name="ImageExtractor - 全面測試 構造函數和初始化 應該合併自定義選項" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 構造函數和初始化 應該初始化空緩存" name="ImageExtractor - 全面測試 構造函數和初始化 應該初始化空緩存" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該處理 null 輸入" name="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該處理 null 輸入" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該處理 undefined 輸入" name="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該處理 undefined 輸入" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該處理沒有 nodeType 的對象" name="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該處理沒有 nodeType 的對象" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該從 src 屬性提取 URL" name="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該從 src 屬性提取 URL" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該從 data-src 屬性提取 URL" name="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該從 data-src 屬性提取 URL" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該優先從 srcset 提取" name="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該優先從 srcset 提取" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該處理無效的圖片元素" name="ImageExtractor - 全面測試 extractImageSrc - 主要提取方法 應該處理無效的圖片元素" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 緩存功能 應該緩存提取結果" name="ImageExtractor - 全面測試 緩存功能 應該緩存提取結果" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 緩存功能 應該為不同的元素生成不同的緩存鍵" name="ImageExtractor - 全面測試 緩存功能 應該為不同的元素生成不同的緩存鍵" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 緩存功能 clearCache 應該清空緩存" name="ImageExtractor - 全面測試 緩存功能 clearCache 應該清空緩存" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 緩存功能 getCacheStats 應該返回緩存統計" name="ImageExtractor - 全面測試 緩存功能 getCacheStats 應該返回緩存統計" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 緩存功能 禁用緩存時不應該緩存" name="ImageExtractor - 全面測試 緩存功能 禁用緩存時不應該緩存" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromSrcset 應該從 srcset 提取最大尺寸的圖片" name="ImageExtractor - 全面測試 _extractFromSrcset 應該從 srcset 提取最大尺寸的圖片" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromSrcset 應該處理 data-srcset 屬性" name="ImageExtractor - 全面測試 _extractFromSrcset 應該處理 data-srcset 屬性" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromSrcset 應該處理 data-lazy-srcset 屬性" name="ImageExtractor - 全面測試 _extractFromSrcset 應該處理 data-lazy-srcset 屬性" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromSrcset 沒有 srcset 時應該返回 null" name="ImageExtractor - 全面測試 _extractFromSrcset 沒有 srcset 時應該返回 null" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromSrcset 應該處理單個 URL 的 srcset" name="ImageExtractor - 全面測試 _extractFromSrcset 應該處理單個 URL 的 srcset" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromSrcset 應該處理無效的 srcset 格式" name="ImageExtractor - 全面測試 _extractFromSrcset 應該處理無效的 srcset 格式" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromAttributes 應該從 src 屬性提取" name="ImageExtractor - 全面測試 _extractFromAttributes 應該從 src 屬性提取" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromAttributes 應該從 data-src 屬性提取" name="ImageExtractor - 全面測試 _extractFromAttributes 應該從 data-src 屬性提取" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromAttributes 應該從 data-lazy-src 屬性提取" name="ImageExtractor - 全面測試 _extractFromAttributes 應該從 data-lazy-src 屬性提取" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromAttributes 應該從 data-original 屬性提取" name="ImageExtractor - 全面測試 _extractFromAttributes 應該從 data-original 屬性提取" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromAttributes 應該修剪空白字符" name="ImageExtractor - 全面測試 _extractFromAttributes 應該修剪空白字符" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromAttributes 沒有有效屬性時應該返回 null" name="ImageExtractor - 全面測試 _extractFromAttributes 沒有有效屬性時應該返回 null" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromAttributes 應該拒絕無效的 URL" name="ImageExtractor - 全面測試 _extractFromAttributes 應該拒絕無效的 URL" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromAttributes 應該處理空字符串屬性" name="ImageExtractor - 全面測試 _extractFromAttributes 應該處理空字符串屬性" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromBackground 沒有 FallbackStrategies 時應該返回 null" name="ImageExtractor - 全面測試 _extractFromBackground 沒有 FallbackStrategies 時應該返回 null" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromPicture 沒有 FallbackStrategies 時應該返回 null" name="ImageExtractor - 全面測試 _extractFromPicture 沒有 FallbackStrategies 時應該返回 null" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _extractFromNoscript 沒有 FallbackStrategies 時應該返回 null" name="ImageExtractor - 全面測試 _extractFromNoscript 沒有 FallbackStrategies 時應該返回 null" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該接受有效的 HTTP URL" name="ImageExtractor - 全面測試 _isValidUrl 應該接受有效的 HTTP URL" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該接受有效的 HTTPS URL" name="ImageExtractor - 全面測試 _isValidUrl 應該接受有效的 HTTPS URL" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該拒絕 data: URL" name="ImageExtractor - 全面測試 _isValidUrl 應該拒絕 data: URL" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該拒絕 blob: URL" name="ImageExtractor - 全面測試 _isValidUrl 應該拒絕 blob: URL" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該拒絕 null" name="ImageExtractor - 全面測試 _isValidUrl 應該拒絕 null" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該拒絕 undefined" name="ImageExtractor - 全面測試 _isValidUrl 應該拒絕 undefined" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該拒絕空字符串" name="ImageExtractor - 全面測試 _isValidUrl 應該拒絕空字符串" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該拒絕非字符串類型" name="ImageExtractor - 全面測試 _isValidUrl 應該拒絕非字符串類型" time="0.002">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該拒絕無效的 URL" name="ImageExtractor - 全面測試 _isValidUrl 應該拒絕無效的 URL" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該接受帶查詢參數的 URL" name="ImageExtractor - 全面測試 _isValidUrl 應該接受帶查詢參數的 URL" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _isValidUrl 應該接受帶片段的 URL" name="ImageExtractor - 全面測試 _isValidUrl 應該接受帶片段的 URL" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _generateCacheKey 應該基於 src 生成緩存鍵" name="ImageExtractor - 全面測試 _generateCacheKey 應該基於 src 生成緩存鍵" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _generateCacheKey 應該包含 data-src 在緩存鍵中" name="ImageExtractor - 全面測試 _generateCacheKey 應該包含 data-src 在緩存鍵中" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _generateCacheKey 應該包含 srcset 在緩存鍵中" name="ImageExtractor - 全面測試 _generateCacheKey 應該包含 srcset 在緩存鍵中" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _generateCacheKey 應該限制緩存鍵長度為 100 字符" name="ImageExtractor - 全面測試 _generateCacheKey 應該限制緩存鍵長度為 100 字符" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _generateCacheKey 空屬性應該生成空分隔的鍵" name="ImageExtractor - 全面測試 _generateCacheKey 空屬性應該生成空分隔的鍵" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _tryExtractionStrategies 應該按順序嘗試所有策略" name="ImageExtractor - 全面測試 _tryExtractionStrategies 應該按順序嘗試所有策略" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _tryExtractionStrategies 應該在第一個成功的策略處停止" name="ImageExtractor - 全面測試 _tryExtractionStrategies 應該在第一個成功的策略處停止" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _tryExtractionStrategies 所有策略失敗時應該返回 null" name="ImageExtractor - 全面測試 _tryExtractionStrategies 所有策略失敗時應該返回 null" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 _tryExtractionStrategies 應該處理策略拋出的錯誤" name="ImageExtractor - 全面測試 _tryExtractionStrategies 應該處理策略拋出的錯誤" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 邊界情況和錯誤處理 應該處理包含特殊字符的 URL" name="ImageExtractor - 全面測試 邊界情況和錯誤處理 應該處理包含特殊字符的 URL" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 邊界情況和錯誤處理 應該處理相對 URL（視為無效）" name="ImageExtractor - 全面測試 邊界情況和錯誤處理 應該處理相對 URL（視為無效）" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 邊界情況和錯誤處理 應該處理協議相對 URL（視為無效）" name="ImageExtractor - 全面測試 邊界情況和錯誤處理 應該處理協議相對 URL（視為無效）" time="0">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 邊界情況和錯誤處理 應該處理包含 Unicode 字符的 URL" name="ImageExtractor - 全面測試 邊界情況和錯誤處理 應該處理包含 Unicode 字符的 URL" time="0.001">
    </testcase>
    <testcase classname="ImageExtractor - 全面測試 模塊導出 應該正確導出到 module.exports" name="ImageExtractor - 全面測試 模塊導出 應該正確導出到 module.exports" time="0">
    </testcase>
  </testsuite>
  <testsuite name="highlighter-v2.testable.js" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.05" tests="85">
    <testcase classname="highlighter-v2.testable.js convertBgColorToName 應該轉換 hex 格式的黃色" name="highlighter-v2.testable.js convertBgColorToName 應該轉換 hex 格式的黃色" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js convertBgColorToName 應該轉換 rgb 格式的黃色" name="highlighter-v2.testable.js convertBgColorToName 應該轉換 rgb 格式的黃色" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js convertBgColorToName 應該轉換綠色" name="highlighter-v2.testable.js convertBgColorToName 應該轉換綠色" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js convertBgColorToName 應該轉換藍色" name="highlighter-v2.testable.js convertBgColorToName 應該轉換藍色" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js convertBgColorToName 應該轉換紅色" name="highlighter-v2.testable.js convertBgColorToName 應該轉換紅色" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js convertBgColorToName 未知顏色應該返回默認黃色" name="highlighter-v2.testable.js convertBgColorToName 未知顏色應該返回默認黃色" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateHighlightData 有效的標註數據應該通過驗證" name="highlighter-v2.testable.js validateHighlightData 有效的標註數據應該通過驗證" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateHighlightData null 或 undefined 應該失敗" name="highlighter-v2.testable.js validateHighlightData null 或 undefined 應該失敗" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateHighlightData 非對象應該失敗" name="highlighter-v2.testable.js validateHighlightData 非對象應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateHighlightData 缺少 text 和 content 應該失敗" name="highlighter-v2.testable.js validateHighlightData 缺少 text 和 content 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateHighlightData 空文本應該失敗" name="highlighter-v2.testable.js validateHighlightData 空文本應該失敗" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateHighlightData text 必須是字符串" name="highlighter-v2.testable.js validateHighlightData text 必須是字符串" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js normalizeHighlightData 應該規範化字符串為對象" name="highlighter-v2.testable.js normalizeHighlightData 應該規範化字符串為對象" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js normalizeHighlightData 應該保留原有的 text" name="highlighter-v2.testable.js normalizeHighlightData 應該保留原有的 text" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js normalizeHighlightData 應該使用 content 作為 text 的回退" name="highlighter-v2.testable.js normalizeHighlightData 應該使用 content 作為 text 的回退" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js normalizeHighlightData 應該保留原有的 color" name="highlighter-v2.testable.js normalizeHighlightData 應該保留原有的 color" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js normalizeHighlightData 應該轉換 bgColor" name="highlighter-v2.testable.js normalizeHighlightData 應該轉換 bgColor" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js normalizeHighlightData 應該轉換 backgroundColor" name="highlighter-v2.testable.js normalizeHighlightData 應該轉換 backgroundColor" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js normalizeHighlightData 應該保留原有的 timestamp" name="highlighter-v2.testable.js normalizeHighlightData 應該保留原有的 timestamp" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js normalizeHighlightData 缺少 timestamp 應該使用當前時間" name="highlighter-v2.testable.js normalizeHighlightData 缺少 timestamp 應該使用當前時間" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js generateHighlightId 應該生成格式正確的 ID" name="highlighter-v2.testable.js generateHighlightId 應該生成格式正確的 ID" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateRangeInfo 有效的範圍信息應該通過驗證" name="highlighter-v2.testable.js validateRangeInfo 有效的範圍信息應該通過驗證" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateRangeInfo null 或 undefined 應該失敗" name="highlighter-v2.testable.js validateRangeInfo null 或 undefined 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateRangeInfo 缺少 startContainerPath 應該失敗" name="highlighter-v2.testable.js validateRangeInfo 缺少 startContainerPath 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateRangeInfo startContainerPath 不是數組應該失敗" name="highlighter-v2.testable.js validateRangeInfo startContainerPath 不是數組應該失敗" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateRangeInfo 缺少 endContainerPath 應該失敗" name="highlighter-v2.testable.js validateRangeInfo 缺少 endContainerPath 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateRangeInfo 缺少 startOffset 應該失敗" name="highlighter-v2.testable.js validateRangeInfo 缺少 startOffset 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateRangeInfo startOffset 不是數字應該失敗" name="highlighter-v2.testable.js validateRangeInfo startOffset 不是數字應該失敗" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateRangeInfo 負數偏移量應該失敗" name="highlighter-v2.testable.js validateRangeInfo 負數偏移量應該失敗" time="0.002">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateRangeInfo 缺少 text 應該失敗" name="highlighter-v2.testable.js validateRangeInfo 缺少 text 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateRangeInfo 空 text 應該失敗" name="highlighter-v2.testable.js validateRangeInfo 空 text 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validatePathStep 有效的元素步驟應該通過驗證" name="highlighter-v2.testable.js validatePathStep 有效的元素步驟應該通過驗證" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validatePathStep 有效的文本步驟應該通過驗證" name="highlighter-v2.testable.js validatePathStep 有效的文本步驟應該通過驗證" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validatePathStep null 或 undefined 應該失敗" name="highlighter-v2.testable.js validatePathStep null 或 undefined 應該失敗" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validatePathStep 缺少 type 應該失敗" name="highlighter-v2.testable.js validatePathStep 缺少 type 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validatePathStep 無效的 type 應該失敗" name="highlighter-v2.testable.js validatePathStep 無效的 type 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validatePathStep 缺少 index 應該失敗" name="highlighter-v2.testable.js validatePathStep 缺少 index 應該失敗" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validatePathStep 負數 index 應該失敗" name="highlighter-v2.testable.js validatePathStep 負數 index 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validatePathStep 元素類型缺少 tag 應該失敗" name="highlighter-v2.testable.js validatePathStep 元素類型缺少 tag 應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validatePathStep 元素類型的 tag 不是字符串應該失敗" name="highlighter-v2.testable.js validatePathStep 元素類型的 tag 不是字符串應該失敗" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateNodePath 有效的路徑應該通過驗證" name="highlighter-v2.testable.js validateNodePath 有效的路徑應該通過驗證" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateNodePath 空數組應該失敗" name="highlighter-v2.testable.js validateNodePath 空數組應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateNodePath 非數組應該失敗" name="highlighter-v2.testable.js validateNodePath 非數組應該失敗" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js validateNodePath 包含無效步驟應該失敗" name="highlighter-v2.testable.js validateNodePath 包含無效步驟應該失敗" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js calculateMigrationSuccessRate 應該計算正確的成功率" name="highlighter-v2.testable.js calculateMigrationSuccessRate 應該計算正確的成功率" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js calculateMigrationSuccessRate 總數為 0 應該返回 0" name="highlighter-v2.testable.js calculateMigrationSuccessRate 總數為 0 應該返回 0" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js calculateMigrationSuccessRate 應該四捨五入到整數" name="highlighter-v2.testable.js calculateMigrationSuccessRate 應該四捨五入到整數" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js generateMigrationReport 100% 成功應該標記為 complete" name="highlighter-v2.testable.js generateMigrationReport 100% 成功應該標記為 complete" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js generateMigrationReport 超過 50% 應該標記為 partial" name="highlighter-v2.testable.js generateMigrationReport 超過 50% 應該標記為 partial" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js generateMigrationReport 1-50% 應該標記為 minimal" name="highlighter-v2.testable.js generateMigrationReport 1-50% 應該標記為 minimal" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js generateMigrationReport 0% 應該標記為 failed" name="highlighter-v2.testable.js generateMigrationReport 0% 應該標記為 failed" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js generateMigrationReport 應該包含所有必要字段" name="highlighter-v2.testable.js generateMigrationReport 應該包含所有必要字段" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js generateMigrationReport timestamp 應該是有效的時間戳" name="highlighter-v2.testable.js generateMigrationReport timestamp 應該是有效的時間戳" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js cleanText 應該移除首尾空白" name="highlighter-v2.testable.js cleanText 應該移除首尾空白" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js cleanText 應該壓縮多個空格為一個" name="highlighter-v2.testable.js cleanText 應該壓縮多個空格為一個" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js cleanText 應該處理換行符" name="highlighter-v2.testable.js cleanText 應該處理換行符" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js cleanText 應該處理 tab" name="highlighter-v2.testable.js cleanText 應該處理 tab" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js cleanText 非字符串應該返回空字符串" name="highlighter-v2.testable.js cleanText 非字符串應該返回空字符串" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js cleanText 空字符串應該返回空字符串" name="highlighter-v2.testable.js cleanText 空字符串應該返回空字符串" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js isTextSimilar 相同文本應該返回 true" name="highlighter-v2.testable.js isTextSimilar 相同文本應該返回 true" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js isTextSimilar 應該容忍空白字符差異" name="highlighter-v2.testable.js isTextSimilar 應該容忍空白字符差異" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js isTextSimilar 不同文本應該返回 false" name="highlighter-v2.testable.js isTextSimilar 不同文本應該返回 false" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js isTextSimilar 非字符串應該返回 false" name="highlighter-v2.testable.js isTextSimilar 非字符串應該返回 false" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js isValidHighlightColor 有效的顏色應該返回 true" name="highlighter-v2.testable.js isValidHighlightColor 有效的顏色應該返回 true" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js isValidHighlightColor 無效的顏色應該返回 false" name="highlighter-v2.testable.js isValidHighlightColor 無效的顏色應該返回 false" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js formatTimestamp 有效的時間戳應該返回 ISO 格式" name="highlighter-v2.testable.js formatTimestamp 有效的時間戳應該返回 ISO 格式" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js formatTimestamp 無效的時間戳應該返回 Invalid Date" name="highlighter-v2.testable.js formatTimestamp 無效的時間戳應該返回 Invalid Date" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js createStorageKey 應該生成正確的存儲鍵名" name="highlighter-v2.testable.js createStorageKey 應該生成正確的存儲鍵名" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js createStorageKey 空字符串應該返回 null" name="highlighter-v2.testable.js createStorageKey 空字符串應該返回 null" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js createStorageKey 非字符串應該返回 null" name="highlighter-v2.testable.js createStorageKey 非字符串應該返回 null" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js parseStorageKey 應該解析存儲鍵名" name="highlighter-v2.testable.js parseStorageKey 應該解析存儲鍵名" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js parseStorageKey 不以 highlights_ 開頭應該返回 null" name="highlighter-v2.testable.js parseStorageKey 不以 highlights_ 開頭應該返回 null" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js parseStorageKey 非字符串應該返回 null" name="highlighter-v2.testable.js parseStorageKey 非字符串應該返回 null" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js isMigrationCompletionKey 遷移完成鍵應該返回 true" name="highlighter-v2.testable.js isMigrationCompletionKey 遷移完成鍵應該返回 true" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js isMigrationCompletionKey 非遷移完成鍵應該返回 false" name="highlighter-v2.testable.js isMigrationCompletionKey 非遷移完成鍵應該返回 false" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js createMigrationCompletionKey 應該生成正確的遷移完成鍵名" name="highlighter-v2.testable.js createMigrationCompletionKey 應該生成正確的遷移完成鍵名" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js createMigrationCompletionKey 空字符串應該返回 null" name="highlighter-v2.testable.js createMigrationCompletionKey 空字符串應該返回 null" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js filterValidHighlights 應該過濾出有效的標註" name="highlighter-v2.testable.js filterValidHighlights 應該過濾出有效的標註" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js filterValidHighlights 非數組應該返回空數組" name="highlighter-v2.testable.js filterValidHighlights 非數組應該返回空數組" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js filterValidHighlights 空數組應該返回空數組" name="highlighter-v2.testable.js filterValidHighlights 空數組應該返回空數組" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js countHighlightsByColor 應該正確統計顏色分佈" name="highlighter-v2.testable.js countHighlightsByColor 應該正確統計顏色分佈" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js countHighlightsByColor 缺少 color 應該默認為 yellow" name="highlighter-v2.testable.js countHighlightsByColor 缺少 color 應該默認為 yellow" time="0.001">
    </testcase>
    <testcase classname="highlighter-v2.testable.js countHighlightsByColor 未知顏色應該計入 other" name="highlighter-v2.testable.js countHighlightsByColor 未知顏色應該計入 other" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js countHighlightsByColor 非數組應該返回空統計" name="highlighter-v2.testable.js countHighlightsByColor 非數組應該返回空統計" time="0">
    </testcase>
    <testcase classname="highlighter-v2.testable.js countHighlightsByColor 空數組應該返回全零統計" name="highlighter-v2.testable.js countHighlightsByColor 空數組應該返回全零統計" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Background Core Functions" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.045" tests="37">
    <testcase classname="Background Core Functions normalizeUrl 应该标准化 URL 并移除 hash" name="Background Core Functions normalizeUrl 应该标准化 URL 并移除 hash" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions normalizeUrl 应该移除追踪参数" name="Background Core Functions normalizeUrl 应该移除追踪参数" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions normalizeUrl 应该标准化尾部斜杠" name="Background Core Functions normalizeUrl 应该标准化尾部斜杠" time="0">
    </testcase>
    <testcase classname="Background Core Functions normalizeUrl 应该处理无效 URL" name="Background Core Functions normalizeUrl 应该处理无效 URL" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions normalizeUrl 应该处理空值" name="Background Core Functions normalizeUrl 应该处理空值" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions cleanImageUrl 应该返回有效的简单图片 URL" name="Background Core Functions cleanImageUrl 应该返回有效的简单图片 URL" time="0">
    </testcase>
    <testcase classname="Background Core Functions cleanImageUrl 应该处理代理 URL" name="Background Core Functions cleanImageUrl 应该处理代理 URL" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions cleanImageUrl 应该移除重复的查询参数" name="Background Core Functions cleanImageUrl 应该移除重复的查询参数" time="0">
    </testcase>
    <testcase classname="Background Core Functions cleanImageUrl 应该处理无效输入" name="Background Core Functions cleanImageUrl 应该处理无效输入" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions cleanImageUrl 应该处理无效 URL" name="Background Core Functions cleanImageUrl 应该处理无效 URL" time="0">
    </testcase>
    <testcase classname="Background Core Functions isValidImageUrl 应该接受标准图片 URL" name="Background Core Functions isValidImageUrl 应该接受标准图片 URL" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions isValidImageUrl 应该识别图片路径模式" name="Background Core Functions isValidImageUrl 应该识别图片路径模式" time="0">
    </testcase>
    <testcase classname="Background Core Functions isValidImageUrl 应该排除非图片 URL" name="Background Core Functions isValidImageUrl 应该排除非图片 URL" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions isValidImageUrl 应该拒绝过长的 URL" name="Background Core Functions isValidImageUrl 应该拒绝过长的 URL" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions isValidImageUrl 应该处理无效输入" name="Background Core Functions isValidImageUrl 应该处理无效输入" time="0">
    </testcase>
    <testcase classname="Background Core Functions splitTextForHighlight 应该返回短文本不变" name="Background Core Functions splitTextForHighlight 应该返回短文本不变" time="0">
    </testcase>
    <testcase classname="Background Core Functions splitTextForHighlight 应该分割长文本" name="Background Core Functions splitTextForHighlight 应该分割长文本" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions splitTextForHighlight 应该在句号处分割" name="Background Core Functions splitTextForHighlight 应该在句号处分割" time="0">
    </testcase>
    <testcase classname="Background Core Functions splitTextForHighlight 应该在空格处分割（如果没有标点）" name="Background Core Functions splitTextForHighlight 应该在空格处分割（如果没有标点）" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions splitTextForHighlight 应该强制分割无间断文本" name="Background Core Functions splitTextForHighlight 应该强制分割无间断文本" time="0">
    </testcase>
    <testcase classname="Background Core Functions splitTextForHighlight 应该处理空文本" name="Background Core Functions splitTextForHighlight 应该处理空文本" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions splitTextForHighlight 应该过滤空字符串片段" name="Background Core Functions splitTextForHighlight 应该过滤空字符串片段" time="0">
    </testcase>
    <testcase classname="Background Core Functions cacheValidationResult 应该缓存验证结果" name="Background Core Functions cacheValidationResult 应该缓存验证结果" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions cacheValidationResult 应该在缓存达到最大大小时删除最旧的条目" name="Background Core Functions cacheValidationResult 应该在缓存达到最大大小时删除最旧的条目" time="0">
    </testcase>
    <testcase classname="Background Core Functions shouldShowUpdateNotification 应该为重要更新返回 true" name="Background Core Functions shouldShowUpdateNotification 应该为重要更新返回 true" time="0">
    </testcase>
    <testcase classname="Background Core Functions shouldShowUpdateNotification 应该为非重要更新返回 false" name="Background Core Functions shouldShowUpdateNotification 应该为非重要更新返回 false" time="0">
    </testcase>
    <testcase classname="Background Core Functions shouldShowUpdateNotification 应该为开发版本返回 false" name="Background Core Functions shouldShowUpdateNotification 应该为开发版本返回 false" time="0">
    </testcase>
    <testcase classname="Background Core Functions shouldShowUpdateNotification 应该处理空值" name="Background Core Functions shouldShowUpdateNotification 应该处理空值" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions isImportantUpdate 应该识别重要更新版本" name="Background Core Functions isImportantUpdate 应该识别重要更新版本" time="0">
    </testcase>
    <testcase classname="Background Core Functions isImportantUpdate 应该识别非重要更新版本" name="Background Core Functions isImportantUpdate 应该识别非重要更新版本" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions isImportantUpdate 应该处理无效版本" name="Background Core Functions isImportantUpdate 应该处理无效版本" time="0">
    </testcase>
    <testcase classname="Background Core Functions 集成测试 应该完整处理图片 URL 流程" name="Background Core Functions 集成测试 应该完整处理图片 URL 流程" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions 集成测试 应该处理复杂的 URL 标准化场景" name="Background Core Functions 集成测试 应该处理复杂的 URL 标准化场景" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions 集成测试 应该处理长文本分割和验证" name="Background Core Functions 集成测试 应该处理长文本分割和验证" time="0">
    </testcase>
    <testcase classname="Background Core Functions 边界情况和错误处理 应该处理各种无效输入" name="Background Core Functions 边界情况和错误处理 应该处理各种无效输入" time="0.001">
    </testcase>
    <testcase classname="Background Core Functions 边界情况和错误处理 应该处理极端长度的输入" name="Background Core Functions 边界情况和错误处理 应该处理极端长度的输入" time="0.01">
    </testcase>
    <testcase classname="Background Core Functions 边界情况和错误处理 应该处理特殊字符和编码" name="Background Core Functions 边界情况和错误处理 应该处理特殊字符和编码" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ExtractionStrategy - 全面測試" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.05" tests="51">
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 extract() 沒有 imgNode 時應該拋出錯誤" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 extract() 沒有 imgNode 時應該拋出錯誤" time="0.005">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 extract() 應該要求子類實現" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 extract() 應該要求子類實現" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 getName() 應該要求子類實現" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 getName() 應該要求子類實現" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 getPriority() 應該返回默認優先級 100" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 getPriority() 應該返回默認優先級 100" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 isApplicable() 應該接受有效的元素節點" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 isApplicable() 應該接受有效的元素節點" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 isApplicable() 應該拒絕 null" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 isApplicable() 應該拒絕 null" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 isApplicable() 應該拒絕 undefined" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 isApplicable() 應該拒絕 undefined" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 isApplicable() 應該拒絕文本節點" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 isApplicable() 應該拒絕文本節點" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 isApplicable() 應該接受其他元素類型" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 isApplicable() 應該接受其他元素類型" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該接受有效的 HTTP URL" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該接受有效的 HTTP URL" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該接受有效的 HTTPS URL" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該接受有效的 HTTPS URL" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕 data: URL" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕 data: URL" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕 blob: URL" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕 blob: URL" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕 null" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕 null" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕 undefined" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕 undefined" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕空字符串" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕空字符串" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕非字符串" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕非字符串" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕無效 URL" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該拒絕無效 URL" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該接受帶查詢參數的 URL" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該接受帶查詢參數的 URL" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該接受帶片段的 URL" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該接受帶片段的 URL" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該接受帶端口的 URL" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _isValidUrl() 應該接受帶端口的 URL" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該修剪空白字符" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該修剪空白字符" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該移除雙引號" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該移除雙引號" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該移除單引號" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該移除單引號" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該同時修剪和移除引號" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該同時修剪和移除引號" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該處理 null" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該處理 null" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該處理 undefined" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該處理 undefined" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該處理空字符串" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該處理空字符串" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該處理只包含空白的字符串" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該處理只包含空白的字符串" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該處理非字符串" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該處理非字符串" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該保留 URL 中的合法引號" name="ExtractionStrategy - 全面測試 ExtractionStrategy 基類 _cleanUrl() 應該保留 URL 中的合法引號" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult 構造函數 應該創建基本結果" name="ExtractionStrategy - 全面測試 ExtractionResult 構造函數 應該創建基本結果" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult 構造函數 應該支持自定義置信度" name="ExtractionStrategy - 全面測試 ExtractionResult 構造函數 應該支持自定義置信度" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult 構造函數 應該支持自定義元數據" name="ExtractionStrategy - 全面測試 ExtractionResult 構造函數 應該支持自定義元數據" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult 構造函數 應該自動添加時間戳" name="ExtractionStrategy - 全面測試 ExtractionResult 構造函數 應該自動添加時間戳" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult 構造函數 應該保留自定義元數據" name="ExtractionStrategy - 全面測試 ExtractionResult 構造函數 應該保留自定義元數據" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult isValid() 有效的結果應該返回 true" name="ExtractionStrategy - 全面測試 ExtractionResult isValid() 有效的結果應該返回 true" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult isValid() 置信度為 0 應該返回 false" name="ExtractionStrategy - 全面測試 ExtractionResult isValid() 置信度為 0 應該返回 false" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult isValid() 負置信度應該返回 false" name="ExtractionStrategy - 全面測試 ExtractionResult isValid() 負置信度應該返回 false" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult isValid() 空 URL 應該返回 false" name="ExtractionStrategy - 全面測試 ExtractionResult isValid() 空 URL 應該返回 false" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult isValid() null URL 應該返回 false" name="ExtractionStrategy - 全面測試 ExtractionResult isValid() null URL 應該返回 false" time="0.004">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult isValid() 非字符串 URL 應該返回 false" name="ExtractionStrategy - 全面測試 ExtractionResult isValid() 非字符串 URL 應該返回 false" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult toString() 應該返回 URL 字符串" name="ExtractionStrategy - 全面測試 ExtractionResult toString() 應該返回 URL 字符串" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult toString() 應該處理 null URL" name="ExtractionStrategy - 全面測試 ExtractionResult toString() 應該處理 null URL" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult toJSON() 應該返回完整的 JSON 對象" name="ExtractionStrategy - 全面測試 ExtractionResult toJSON() 應該返回完整的 JSON 對象" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 ExtractionResult toJSON() 應該可以序列化為 JSON 字符串" name="ExtractionStrategy - 全面測試 ExtractionResult toJSON() 應該可以序列化為 JSON 字符串" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 子類實現示例 子類應該能正常工作" name="ExtractionStrategy - 全面測試 子類實現示例 子類應該能正常工作" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 子類實現示例 子類應該繼承父類的工具方法" name="ExtractionStrategy - 全面測試 子類實現示例 子類應該繼承父類的工具方法" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 子類實現示例 子類應該繼承 isApplicable 方法" name="ExtractionStrategy - 全面測試 子類實現示例 子類應該繼承 isApplicable 方法" time="0.001">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 模塊導出 應該正確導出 ExtractionStrategy" name="ExtractionStrategy - 全面測試 模塊導出 應該正確導出 ExtractionStrategy" time="0">
    </testcase>
    <testcase classname="ExtractionStrategy - 全面測試 模塊導出 應該正確導出 ExtractionResult" name="ExtractionStrategy - 全面測試 模塊導出 應該正確導出 ExtractionResult" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ImageUtils - cleanImageUrl" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.048" tests="69">
    <testcase classname="ImageUtils - cleanImageUrl 基本功能 應該返回有效的簡單圖片 URL" name="ImageUtils - cleanImageUrl 基本功能 應該返回有效的簡單圖片 URL" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - cleanImageUrl 基本功能 應該處理帶查詢參數的 URL" name="ImageUtils - cleanImageUrl 基本功能 應該處理帶查詢參數的 URL" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - cleanImageUrl 代理 URL 處理 應該從代理 URL 提取原始圖片" name="ImageUtils - cleanImageUrl 代理 URL 處理 應該從代理 URL 提取原始圖片" time="0">
    </testcase>
    <testcase classname="ImageUtils - cleanImageUrl 代理 URL 處理 應該處理嵌套的代理 URL" name="ImageUtils - cleanImageUrl 代理 URL 處理 應該處理嵌套的代理 URL" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - cleanImageUrl 重複參數處理 應該移除重複的查詢參數" name="ImageUtils - cleanImageUrl 重複參數處理 應該移除重複的查詢參數" time="0">
    </testcase>
    <testcase classname="ImageUtils - cleanImageUrl 錯誤處理 應該處理 null" name="ImageUtils - cleanImageUrl 錯誤處理 應該處理 null" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - cleanImageUrl 錯誤處理 應該處理 undefined" name="ImageUtils - cleanImageUrl 錯誤處理 應該處理 undefined" time="0">
    </testcase>
    <testcase classname="ImageUtils - cleanImageUrl 錯誤處理 應該處理空字串" name="ImageUtils - cleanImageUrl 錯誤處理 應該處理空字串" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - cleanImageUrl 錯誤處理 應該處理無效的 URL" name="ImageUtils - cleanImageUrl 錯誤處理 應該處理無效的 URL" time="0">
    </testcase>
    <testcase classname="ImageUtils - cleanImageUrl 錯誤處理 應該處理非字串輸入" name="ImageUtils - cleanImageUrl 錯誤處理 應該處理非字串輸入" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 基本驗證 應該接受標準圖片 URL" name="ImageUtils - isValidImageUrl 基本驗證 應該接受標準圖片 URL" time="0.002">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 基本驗證 應該接受帶查詢參數的圖片 URL" name="ImageUtils - isValidImageUrl 基本驗證 應該接受帶查詢參數的圖片 URL" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 基本驗證 應該接受 HTTP 和 HTTPS" name="ImageUtils - isValidImageUrl 基本驗證 應該接受 HTTP 和 HTTPS" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .jpg 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .jpg 格式" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .jpeg 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .jpeg 格式" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .png 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .png 格式" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .gif 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .gif 格式" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .webp 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .webp 格式" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .svg 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .svg 格式" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .bmp 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .bmp 格式" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .ico 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .ico 格式" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .tiff 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .tiff 格式" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .tif 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .tif 格式" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .avif 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .avif 格式" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .heic 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .heic 格式" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .heif 格式" name="ImageUtils - isValidImageUrl 圖片格式支持 應該支持 .heif 格式" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /images/photo.png" name="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /images/photo.png" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /img/banner.jpg" name="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /img/banner.jpg" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /photos/gallery.jpg" name="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /photos/gallery.jpg" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /pictures/avatar.png" name="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /pictures/avatar.png" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /media/cover.jpg" name="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /media/cover.jpg" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /uploads/file.jpg" name="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /uploads/file.jpg" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /assets/logo.png" name="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /assets/logo.png" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /files/image.jpg" name="ImageUtils - isValidImageUrl 路徑模式識別 應該識別路徑: /files/image.jpg" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 無擴展名 CDN 圖片 應該接受包含 /images/ 路徑的 URL" name="ImageUtils - isValidImageUrl 無擴展名 CDN 圖片 應該接受包含 /images/ 路徑的 URL" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 無擴展名 CDN 圖片 應該接受包含 /media/ 路徑的 URL" name="ImageUtils - isValidImageUrl 無擴展名 CDN 圖片 應該接受包含 /media/ 路徑的 URL" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 排除非圖片 URL 應該拒絕腳本文件" name="ImageUtils - isValidImageUrl 排除非圖片 URL 應該拒絕腳本文件" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 排除非圖片 URL 應該拒絕樣式文件" name="ImageUtils - isValidImageUrl 排除非圖片 URL 應該拒絕樣式文件" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 排除非圖片 URL 應該拒絕 HTML 頁面" name="ImageUtils - isValidImageUrl 排除非圖片 URL 應該拒絕 HTML 頁面" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 排除非圖片 URL 應該拒絕 API 端點" name="ImageUtils - isValidImageUrl 排除非圖片 URL 應該拒絕 API 端點" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 排除非圖片 URL 應該拒絕 AJAX 請求" name="ImageUtils - isValidImageUrl 排除非圖片 URL 應該拒絕 AJAX 請求" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl URL 長度限制 應該拒絕過長的 URL (&gt;2000 字符)" name="ImageUtils - isValidImageUrl URL 長度限制 應該拒絕過長的 URL (&gt;2000 字符)" time="0.005">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl URL 長度限制 應該接受正常長度的 URL" name="ImageUtils - isValidImageUrl URL 長度限制 應該接受正常長度的 URL" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 錯誤處理 應該拒絕 null" name="ImageUtils - isValidImageUrl 錯誤處理 應該拒絕 null" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 錯誤處理 應該拒絕 undefined" name="ImageUtils - isValidImageUrl 錯誤處理 應該拒絕 undefined" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 錯誤處理 應該拒絕空字串" name="ImageUtils - isValidImageUrl 錯誤處理 應該拒絕空字串" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 錯誤處理 應該拒絕無效的 URL" name="ImageUtils - isValidImageUrl 錯誤處理 應該拒絕無效的 URL" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 錯誤處理 應該拒絕非 HTTP(S) 協議" name="ImageUtils - isValidImageUrl 錯誤處理 應該拒絕非 HTTP(S) 協議" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 真實世界案例 應該處理 CDN URL" name="ImageUtils - isValidImageUrl 真實世界案例 應該處理 CDN URL" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 真實世界案例 應該處理圖床 URL" name="ImageUtils - isValidImageUrl 真實世界案例 應該處理圖床 URL" time="0">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 真實世界案例 應該處理 WordPress 媒體庫" name="ImageUtils - isValidImageUrl 真實世界案例 應該處理 WordPress 媒體庫" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - isValidImageUrl 真實世界案例 應該處理日期路徑" name="ImageUtils - isValidImageUrl 真實世界案例 應該處理日期路徑" time="0">
    </testcase>
    <testcase classname="ImageUtils - extractBestUrlFromSrcset 應該從單個 URL 提取" name="ImageUtils - extractBestUrlFromSrcset 應該從單個 URL 提取" time="0">
    </testcase>
    <testcase classname="ImageUtils - extractBestUrlFromSrcset 應該從簡單 srcset 提取最高分辨率" name="ImageUtils - extractBestUrlFromSrcset 應該從簡單 srcset 提取最高分辨率" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - extractBestUrlFromSrcset 應該從寬度描述符中提取最大寬度" name="ImageUtils - extractBestUrlFromSrcset 應該從寬度描述符中提取最大寬度" time="0">
    </testcase>
    <testcase classname="ImageUtils - extractBestUrlFromSrcset 應該忽略 data URL" name="ImageUtils - extractBestUrlFromSrcset 應該忽略 data URL" time="0">
    </testcase>
    <testcase classname="ImageUtils - extractBestUrlFromSrcset 應該處理沒有描述符的條目" name="ImageUtils - extractBestUrlFromSrcset 應該處理沒有描述符的條目" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - extractBestUrlFromSrcset 應該處理空或無效輸入" name="ImageUtils - extractBestUrlFromSrcset 應該處理空或無效輸入" time="0">
    </testcase>
    <testcase classname="ImageUtils - extractImageSrc 應該提取標準 src 屬性" name="ImageUtils - extractImageSrc 應該提取標準 src 屬性" time="0">
    </testcase>
    <testcase classname="ImageUtils - extractImageSrc 應該優先使用 srcset 中的最佳 URL" name="ImageUtils - extractImageSrc 應該優先使用 srcset 中的最佳 URL" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - extractImageSrc 應該優先使用 src 屬性" name="ImageUtils - extractImageSrc 應該優先使用 src 屬性" time="0">
    </testcase>
    <testcase classname="ImageUtils - extractImageSrc 應該處理 picture 元素中的 source" name="ImageUtils - extractImageSrc 應該處理 picture 元素中的 source" time="0">
    </testcase>
    <testcase classname="ImageUtils - extractImageSrc 應該處理 null 或無效輸入" name="ImageUtils - extractImageSrc 應該處理 null 或無效輸入" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - extractImageSrc 應該跳過 data: 和 blob: URL" name="ImageUtils - extractImageSrc 應該跳過 data: 和 blob: URL" time="0">
    </testcase>
    <testcase classname="ImageUtils - generateImageCacheKey 應該生成基於屬性的緩存鍵" name="ImageUtils - generateImageCacheKey 應該生成基於屬性的緩存鍵" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - generateImageCacheKey 應該處理缺少屬性的情況" name="ImageUtils - generateImageCacheKey 應該處理缺少屬性的情況" time="0">
    </testcase>
    <testcase classname="ImageUtils - generateImageCacheKey 應該處理 null 輸入" name="ImageUtils - generateImageCacheKey 應該處理 null 輸入" time="0">
    </testcase>
    <testcase classname="ImageUtils - IMAGE_ATTRIBUTES 應該包含所有必要的圖片屬性" name="ImageUtils - IMAGE_ATTRIBUTES 應該包含所有必要的圖片屬性" time="0.001">
    </testcase>
    <testcase classname="ImageUtils - IMAGE_ATTRIBUTES 應該包含所有懶加載屬性變體" name="ImageUtils - IMAGE_ATTRIBUTES 應該包含所有懶加載屬性變體" time="0">
    </testcase>
  </testsuite>
  <testsuite name="highlighter-migration.js" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.056" tests="36">
    <testcase classname="highlighter-migration.js HighlightMigrationManager - 構造函數 應該正確初始化" name="highlighter-migration.js HighlightMigrationManager - 構造函數 應該正確初始化" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js needsMigration 應該在已完成遷移時返回 false" name="highlighter-migration.js needsMigration 應該在已完成遷移時返回 false" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js needsMigration 應該在檢測到舊版標註時返回 true" name="highlighter-migration.js needsMigration 應該在檢測到舊版標註時返回 true" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js needsMigration 應該在沒有舊版標註時返回 false" name="highlighter-migration.js needsMigration 應該在沒有舊版標註時返回 false" time="0">
    </testcase>
    <testcase classname="highlighter-migration.js needsMigration 應該正確計算舊版標註數量" name="highlighter-migration.js needsMigration 應該正確計算舊版標註數量" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js getMigrationStatus 應該獲取遷移狀態" name="highlighter-migration.js getMigrationStatus 應該獲取遷移狀態" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js getMigrationStatus 應該在無數據時返回 pending" name="highlighter-migration.js getMigrationStatus 應該在無數據時返回 pending" time="0">
    </testcase>
    <testcase classname="highlighter-migration.js getMigrationStatus 應該處理讀取錯誤" name="highlighter-migration.js getMigrationStatus 應該處理讀取錯誤" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js setMigrationStatus 應該保存遷移狀態" name="highlighter-migration.js setMigrationStatus 應該保存遷移狀態" time="0">
    </testcase>
    <testcase classname="highlighter-migration.js setMigrationStatus 應該處理保存錯誤" name="highlighter-migration.js setMigrationStatus 應該處理保存錯誤" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js convertColorToName 應該轉換 RGB 顏色值" name="highlighter-migration.js convertColorToName 應該轉換 RGB 顏色值" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js convertColorToName 應該轉換十六進制顏色值" name="highlighter-migration.js convertColorToName 應該轉換十六進制顏色值" time="0">
    </testcase>
    <testcase classname="highlighter-migration.js convertColorToName 應該為未知顏色返回默認值" name="highlighter-migration.js convertColorToName 應該為未知顏色返回默認值" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js removeOldSpan 應該移除舊標註並保留文本" name="highlighter-migration.js removeOldSpan 應該移除舊標註並保留文本" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js removeOldSpan 應該處理包含多個子節點的 span" name="highlighter-migration.js removeOldSpan 應該處理包含多個子節點的 span" time="0">
    </testcase>
    <testcase classname="highlighter-migration.js removeOldSpan 應該處理移除錯誤" name="highlighter-migration.js removeOldSpan 應該處理移除錯誤" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js migrateSpanToRange 應該成功遷移標註" name="highlighter-migration.js migrateSpanToRange 應該成功遷移標註" time="0.005">
    </testcase>
    <testcase classname="highlighter-migration.js migrateSpanToRange 應該在 addHighlight 失敗時返回 null" name="highlighter-migration.js migrateSpanToRange 應該在 addHighlight 失敗時返回 null" time="0">
    </testcase>
    <testcase classname="highlighter-migration.js migrateSpanToRange 應該處理遷移過程中的錯誤" name="highlighter-migration.js migrateSpanToRange 應該處理遷移過程中的錯誤" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js migrateSpanToRange 應該正確識別不同顏色的標註" name="highlighter-migration.js migrateSpanToRange 應該正確識別不同顏色的標註" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js autoMigrate 應該遷移所有舊標註" name="highlighter-migration.js autoMigrate 應該遷移所有舊標註" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js autoMigrate 應該記錄失敗的遷移" name="highlighter-migration.js autoMigrate 應該記錄失敗的遷移" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js autoMigrate 應該處理空的舊標註列表" name="highlighter-migration.js autoMigrate 應該處理空的舊標註列表" time="0">
    </testcase>
    <testcase classname="highlighter-migration.js removeMigrationUI 應該移除對話框和遮罩" name="highlighter-migration.js removeMigrationUI 應該移除對話框和遮罩" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js removeMigrationUI 應該處理 UI 元素不存在的情況" name="highlighter-migration.js removeMigrationUI 應該處理 UI 元素不存在的情況" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js showMigrationPrompt 應該創建遷移提示 UI" name="highlighter-migration.js showMigrationPrompt 應該創建遷移提示 UI" time="0.003">
    </testcase>
    <testcase classname="highlighter-migration.js showMigrationPrompt 應該在點擊遷移按鈕時 resolve migrate" name="highlighter-migration.js showMigrationPrompt 應該在點擊遷移按鈕時 resolve migrate" time="0.002">
    </testcase>
    <testcase classname="highlighter-migration.js showMigrationPrompt 應該在點擊保持舊版按鈕時 resolve keep" name="highlighter-migration.js showMigrationPrompt 應該在點擊保持舊版按鈕時 resolve keep" time="0.002">
    </testcase>
    <testcase classname="highlighter-migration.js showMigrationResult 應該顯示成功的遷移結果" name="highlighter-migration.js showMigrationResult 應該顯示成功的遷移結果" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js showMigrationResult 應該顯示部分成功的遷移結果" name="highlighter-migration.js showMigrationResult 應該顯示部分成功的遷移結果" time="0.003">
    </testcase>
    <testcase classname="highlighter-migration.js showMigrationResult 應該顯示失敗的遷移結果" name="highlighter-migration.js showMigrationResult 應該顯示失敗的遷移結果" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js performMigration 應該在無需遷移時跳過" name="highlighter-migration.js performMigration 應該在無需遷移時跳過" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js performMigration 應該在用戶拒絕時跳過遷移" name="highlighter-migration.js performMigration 應該在用戶拒絕時跳過遷移" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js performMigration 應該在用戶同意時執行完整遷移" name="highlighter-migration.js performMigration 應該在用戶同意時執行完整遷移" time="0.001">
    </testcase>
    <testcase classname="highlighter-migration.js 全局導出 應該導出到 window.HighlightMigrationManager" name="highlighter-migration.js 全局導出 應該導出到 window.HighlightMigrationManager" time="0">
    </testcase>
    <testcase classname="highlighter-migration.js 全局導出 應該能夠實例化" name="highlighter-migration.js 全局導出 應該能夠實例化" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="HTML → Markdown → Notion Blocks - Wrapper" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.023" tests="7">
    <testcase classname="HTML → Markdown → Notion Blocks - Wrapper 標題與段落轉換" name="HTML → Markdown → Notion Blocks - Wrapper 標題與段落轉換" time="0.002">
    </testcase>
    <testcase classname="HTML → Markdown → Notion Blocks - Wrapper 列表與代碼塊轉換" name="HTML → Markdown → Notion Blocks - Wrapper 列表與代碼塊轉換" time="0">
    </testcase>
    <testcase classname="HTML → Markdown → Notion Blocks - Wrapper 編號列表與未閉合代碼塊處理" name="HTML → Markdown → Notion Blocks - Wrapper 編號列表與未閉合代碼塊處理" time="0.001">
    </testcase>
    <testcase classname="HTML → Markdown → Notion Blocks - Wrapper 多級標題 (h2,h3) 轉換" name="HTML → Markdown → Notion Blocks - Wrapper 多級標題 (h2,h3) 轉換" time="0">
    </testcase>
    <testcase classname="HTML → Markdown → Notion Blocks - Wrapper Markdown 圖片轉換為 image block" name="HTML → Markdown → Notion Blocks - Wrapper Markdown 圖片轉換為 image block" time="0.001">
    </testcase>
    <testcase classname="HTML → Markdown → Notion Blocks - Wrapper 段落內含圖片時生成 image block 並保留文字" name="HTML → Markdown → Notion Blocks - Wrapper 段落內含圖片時生成 image block 並保留文字" time="0.001">
    </testcase>
    <testcase classname="HTML → Markdown → Notion Blocks - Wrapper 絕對連結驗證" name="HTML → Markdown → Notion Blocks - Wrapper 絕對連結驗證" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Background ScriptInjector Class" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.04" tests="18">
    <testcase classname="Background ScriptInjector Class injectAndExecute 应该成功注入文件并执行函数" name="Background ScriptInjector Class injectAndExecute 应该成功注入文件并执行函数" time="0.002">
    </testcase>
    <testcase classname="Background ScriptInjector Class injectAndExecute 应该处理文件注入错误" name="Background ScriptInjector Class injectAndExecute 应该处理文件注入错误" time="0.001">
    </testcase>
    <testcase classname="Background ScriptInjector Class injectAndExecute 应该处理函数执行错误" name="Background ScriptInjector Class injectAndExecute 应该处理函数执行错误" time="0">
    </testcase>
    <testcase classname="Background ScriptInjector Class injectAndExecute 应该处理异常错误" name="Background ScriptInjector Class injectAndExecute 应该处理异常错误" time="0.004">
    </testcase>
    <testcase classname="Background ScriptInjector Class injectAndExecute 应该在没有文件和函数时解析" name="Background ScriptInjector Class injectAndExecute 应该在没有文件和函数时解析" time="0.001">
    </testcase>
    <testcase classname="Background ScriptInjector Class injectHighlighter 应该正确调用 injectAndExecute 来注入标记工具" name="Background ScriptInjector Class injectHighlighter 应该正确调用 injectAndExecute 来注入标记工具" time="0.001">
    </testcase>
    <testcase classname="Background ScriptInjector Class collectHighlights 应该正确调用 injectAndExecute 来收集标记" name="Background ScriptInjector Class collectHighlights 应该正确调用 injectAndExecute 来收集标记" time="0">
    </testcase>
    <testcase classname="Background ScriptInjector Class collectHighlights 应该处理空标记结果" name="Background ScriptInjector Class collectHighlights 应该处理空标记结果" time="0.001">
    </testcase>
    <testcase classname="Background ScriptInjector Class clearPageHighlights 应该正确调用 injectAndExecute 来清除页面标记" name="Background ScriptInjector Class clearPageHighlights 应该正确调用 injectAndExecute 来清除页面标记" time="0">
    </testcase>
    <testcase classname="Background ScriptInjector Class injectHighlightRestore 应该正确调用 injectAndExecute 来注入标记恢复脚本" name="Background ScriptInjector Class injectHighlightRestore 应该正确调用 injectAndExecute 来注入标记恢复脚本" time="0.001">
    </testcase>
    <testcase classname="Background ScriptInjector Class injectWithResponse 应该注入文件并执行函数，返回结果" name="Background ScriptInjector Class injectWithResponse 应该注入文件并执行函数，返回结果" time="0">
    </testcase>
    <testcase classname="Background ScriptInjector Class injectWithResponse 应该处理只注入文件的情况" name="Background ScriptInjector Class injectWithResponse 应该处理只注入文件的情况" time="0.001">
    </testcase>
    <testcase classname="Background ScriptInjector Class injectWithResponse 应该处理注入失败的情况" name="Background ScriptInjector Class injectWithResponse 应该处理注入失败的情况" time="0.001">
    </testcase>
    <testcase classname="Background ScriptInjector Class inject 应该简单注入脚本（不返回结果）" name="Background ScriptInjector Class inject 应该简单注入脚本（不返回结果）" time="0">
    </testcase>
    <testcase classname="Background ScriptInjector Class inject 应该处理注入失败" name="Background ScriptInjector Class inject 应该处理注入失败" time="0.001">
    </testcase>
    <testcase classname="Background ScriptInjector Class 错误处理和边界情况 应该处理 chrome.runtime.lastError 为 null 的情况" name="Background ScriptInjector Class 错误处理和边界情况 应该处理 chrome.runtime.lastError 为 null 的情况" time="0">
    </testcase>
    <testcase classname="Background ScriptInjector Class 错误处理和边界情况 应该处理回调函数中的异步错误" name="Background ScriptInjector Class 错误处理和边界情况 应该处理回调函数中的异步错误" time="0.013">
    </testcase>
    <testcase classname="Background ScriptInjector Class 错误处理和边界情况 应该处理无效的 tabId" name="Background ScriptInjector Class 错误处理和边界情况 应该处理无效的 tabId" time="0">
    </testcase>
  </testsuite>
  <testsuite name="cleanImageUrl" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.045" tests="49">
    <testcase classname="cleanImageUrl 基本功能 應該返回有效的簡單圖片 URL" name="cleanImageUrl 基本功能 應該返回有效的簡單圖片 URL" time="0">
    </testcase>
    <testcase classname="cleanImageUrl 基本功能 應該處理帶查詢參數的 URL" name="cleanImageUrl 基本功能 應該處理帶查詢參數的 URL" time="0">
    </testcase>
    <testcase classname="cleanImageUrl 代理 URL 處理 應該從代理 URL 提取原始圖片" name="cleanImageUrl 代理 URL 處理 應該從代理 URL 提取原始圖片" time="0.001">
    </testcase>
    <testcase classname="cleanImageUrl 代理 URL 處理 應該處理嵌套的代理 URL" name="cleanImageUrl 代理 URL 處理 應該處理嵌套的代理 URL" time="0">
    </testcase>
    <testcase classname="cleanImageUrl 重複參數處理 應該移除重複的查詢參數" name="cleanImageUrl 重複參數處理 應該移除重複的查詢參數" time="0">
    </testcase>
    <testcase classname="cleanImageUrl 錯誤處理 應該處理 null" name="cleanImageUrl 錯誤處理 應該處理 null" time="0.001">
    </testcase>
    <testcase classname="cleanImageUrl 錯誤處理 應該處理 undefined" name="cleanImageUrl 錯誤處理 應該處理 undefined" time="0">
    </testcase>
    <testcase classname="cleanImageUrl 錯誤處理 應該處理空字串" name="cleanImageUrl 錯誤處理 應該處理空字串" time="0.001">
    </testcase>
    <testcase classname="cleanImageUrl 錯誤處理 應該處理無效的 URL" name="cleanImageUrl 錯誤處理 應該處理無效的 URL" time="0">
    </testcase>
    <testcase classname="cleanImageUrl 錯誤處理 應該處理非字串輸入" name="cleanImageUrl 錯誤處理 應該處理非字串輸入" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 基本驗證 應該接受標準圖片 URL" name="isValidImageUrl 基本驗證 應該接受標準圖片 URL" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 基本驗證 應該接受帶查詢參數的圖片 URL" name="isValidImageUrl 基本驗證 應該接受帶查詢參數的圖片 URL" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 基本驗證 應該接受 HTTP 和 HTTPS" name="isValidImageUrl 基本驗證 應該接受 HTTP 和 HTTPS" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 圖片格式支持 應該支持 .jpg 格式" name="isValidImageUrl 圖片格式支持 應該支持 .jpg 格式" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 圖片格式支持 應該支持 .jpeg 格式" name="isValidImageUrl 圖片格式支持 應該支持 .jpeg 格式" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 圖片格式支持 應該支持 .png 格式" name="isValidImageUrl 圖片格式支持 應該支持 .png 格式" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 圖片格式支持 應該支持 .gif 格式" name="isValidImageUrl 圖片格式支持 應該支持 .gif 格式" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 圖片格式支持 應該支持 .webp 格式" name="isValidImageUrl 圖片格式支持 應該支持 .webp 格式" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 圖片格式支持 應該支持 .svg 格式" name="isValidImageUrl 圖片格式支持 應該支持 .svg 格式" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 圖片格式支持 應該支持 .bmp 格式" name="isValidImageUrl 圖片格式支持 應該支持 .bmp 格式" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 圖片格式支持 應該支持 .ico 格式" name="isValidImageUrl 圖片格式支持 應該支持 .ico 格式" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 圖片格式支持 應該支持 .tiff 格式" name="isValidImageUrl 圖片格式支持 應該支持 .tiff 格式" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 圖片格式支持 應該支持 .tif 格式" name="isValidImageUrl 圖片格式支持 應該支持 .tif 格式" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 路徑模式識別 應該識別路徑: /images/photo.png" name="isValidImageUrl 路徑模式識別 應該識別路徑: /images/photo.png" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 路徑模式識別 應該識別路徑: /img/banner.jpg" name="isValidImageUrl 路徑模式識別 應該識別路徑: /img/banner.jpg" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 路徑模式識別 應該識別路徑: /photos/gallery.jpg" name="isValidImageUrl 路徑模式識別 應該識別路徑: /photos/gallery.jpg" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 路徑模式識別 應該識別路徑: /pictures/avatar.png" name="isValidImageUrl 路徑模式識別 應該識別路徑: /pictures/avatar.png" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 路徑模式識別 應該識別路徑: /media/cover.jpg" name="isValidImageUrl 路徑模式識別 應該識別路徑: /media/cover.jpg" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 路徑模式識別 應該識別路徑: /uploads/file.jpg" name="isValidImageUrl 路徑模式識別 應該識別路徑: /uploads/file.jpg" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 路徑模式識別 應該識別路徑: /assets/logo.png" name="isValidImageUrl 路徑模式識別 應該識別路徑: /assets/logo.png" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 路徑模式識別 應該識別路徑: /files/image.jpg" name="isValidImageUrl 路徑模式識別 應該識別路徑: /files/image.jpg" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 無擴展名 CDN 圖片 應該接受包含 /images/ 路徑的 URL" name="isValidImageUrl 無擴展名 CDN 圖片 應該接受包含 /images/ 路徑的 URL" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 無擴展名 CDN 圖片 應該接受包含 /media/ 路徑的 URL" name="isValidImageUrl 無擴展名 CDN 圖片 應該接受包含 /media/ 路徑的 URL" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 排除非圖片 URL 應該拒絕腳本文件" name="isValidImageUrl 排除非圖片 URL 應該拒絕腳本文件" time="0.005">
    </testcase>
    <testcase classname="isValidImageUrl 排除非圖片 URL 應該拒絕樣式文件" name="isValidImageUrl 排除非圖片 URL 應該拒絕樣式文件" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 排除非圖片 URL 應該拒絕 HTML 頁面" name="isValidImageUrl 排除非圖片 URL 應該拒絕 HTML 頁面" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 排除非圖片 URL 應該拒絕 API 端點" name="isValidImageUrl 排除非圖片 URL 應該拒絕 API 端點" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 排除非圖片 URL 應該拒絕 AJAX 請求" name="isValidImageUrl 排除非圖片 URL 應該拒絕 AJAX 請求" time="0">
    </testcase>
    <testcase classname="isValidImageUrl URL 長度限制 應該拒絕過長的 URL (&gt;2000 字符)" name="isValidImageUrl URL 長度限制 應該拒絕過長的 URL (&gt;2000 字符)" time="0.002">
    </testcase>
    <testcase classname="isValidImageUrl URL 長度限制 應該接受正常長度的 URL" name="isValidImageUrl URL 長度限制 應該接受正常長度的 URL" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 錯誤處理 應該拒絕 null" name="isValidImageUrl 錯誤處理 應該拒絕 null" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 錯誤處理 應該拒絕 undefined" name="isValidImageUrl 錯誤處理 應該拒絕 undefined" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 錯誤處理 應該拒絕空字串" name="isValidImageUrl 錯誤處理 應該拒絕空字串" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 錯誤處理 應該拒絕無效的 URL" name="isValidImageUrl 錯誤處理 應該拒絕無效的 URL" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 錯誤處理 應該拒絕非 HTTP(S) 協議" name="isValidImageUrl 錯誤處理 應該拒絕非 HTTP(S) 協議" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 真實世界案例 應該處理 CDN URL" name="isValidImageUrl 真實世界案例 應該處理 CDN URL" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 真實世界案例 應該處理圖床 URL" name="isValidImageUrl 真實世界案例 應該處理圖床 URL" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl 真實世界案例 應該處理 GitHub 頭像" name="isValidImageUrl 真實世界案例 應該處理 GitHub 頭像" time="0">
    </testcase>
    <testcase classname="isValidImageUrl 真實世界案例 應該處理 WordPress 媒體庫" name="isValidImageUrl 真實世界案例 應該處理 WordPress 媒體庫" time="0">
    </testcase>
  </testsuite>
  <testsuite name="cleanImageUrl - 深度測試" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.055" tests="48">
    <testcase classname="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 應該處理 /photo.php 代理 URL" name="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 應該處理 /photo.php 代理 URL" time="0.001">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 應該處理 /gw/ 代理 URL" name="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 應該處理 /gw/ 代理 URL" time="0">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 應該處理帶有額外參數的代理 URL" name="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 應該處理帶有額外參數的代理 URL" time="0.001">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 代理 URL 中的 u 參數無效時應返回清理後的 URL" name="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 代理 URL 中的 u 參數無效時應返回清理後的 URL" time="0">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 代理 URL 缺少 u 參數應返回原 URL" name="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 代理 URL 缺少 u 參數應返回原 URL" time="0.001">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 應該遞歸清理嵌套代理 URL" name="cleanImageUrl - 深度測試 代理 URL 處理（未覆蓋部分） 應該遞歸清理嵌套代理 URL" time="0">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 重複查詢參數處理 應該移除重複的查詢參數（保留第一個）" name="cleanImageUrl - 深度測試 重複查詢參數處理 應該移除重複的查詢參數（保留第一個）" time="0">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 重複查詢參數處理 應該保留所有不重複的查詢參數" name="cleanImageUrl - 深度測試 重複查詢參數處理 應該保留所有不重複的查詢參數" time="0.001">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 重複查詢參數處理 多個重複參數應該都只保留第一個" name="cleanImageUrl - 深度測試 重複查詢參數處理 多個重複參數應該都只保留第一個" time="0">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 錯誤處理 無效的 URL 應該返回 null" name="cleanImageUrl - 深度測試 錯誤處理 無效的 URL 應該返回 null" time="0.001">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 錯誤處理 空值應該返回 null" name="cleanImageUrl - 深度測試 錯誤處理 空值應該返回 null" time="0">
    </testcase>
    <testcase classname="cleanImageUrl - 深度測試 錯誤處理 非字符串應該返回 null" name="cleanImageUrl - 深度測試 錯誤處理 非字符串應該返回 null" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 URL 長度限制 長度超過 2000 應該返回 false" name="isValidImageUrl - 深度測試 URL 長度限制 長度超過 2000 應該返回 false" time="0.002">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 URL 長度限制 長度正好 2000 應該返回 true" name="isValidImageUrl - 深度測試 URL 長度限制 長度正好 2000 應該返回 true" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 URL 長度限制 長度小於 2000 應該返回 true" name="isValidImageUrl - 深度測試 URL 長度限制 長度小於 2000 應該返回 true" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片擴展名檢查 常見圖片格式應該返回 true" name="isValidImageUrl - 深度測試 圖片擴展名檢查 常見圖片格式應該返回 true" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片擴展名檢查 大小寫不敏感" name="isValidImageUrl - 深度測試 圖片擴展名檢查 大小寫不敏感" time="0.016">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片擴展名檢查 帶查詢參數的圖片 URL 應該返回 true" name="isValidImageUrl - 深度測試 圖片擴展名檢查 帶查詢參數的圖片 URL 應該返回 true" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /images/ 路徑應該返回 true" name="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /images/ 路徑應該返回 true" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /img/ 路徑應該返回 true" name="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /img/ 路徑應該返回 true" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /photo/ 路徑應該返回 true" name="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /photo/ 路徑應該返回 true" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /picture/ 路徑應該返回 true" name="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /picture/ 路徑應該返回 true" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /media/ 路徑應該返回 true" name="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /media/ 路徑應該返回 true" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /upload/ 路徑應該返回 true" name="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /upload/ 路徑應該返回 true" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /asset/ 路徑應該返回 true" name="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /asset/ 路徑應該返回 true" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /file/ 路徑應該返回 true" name="isValidImageUrl - 深度測試 圖片路徑模式檢查 包含 /file/ 路徑應該返回 true" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 圖片路徑模式檢查 大小寫不敏感" name="isValidImageUrl - 深度測試 圖片路徑模式檢查 大小寫不敏感" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 排除非圖片 URL JavaScript 文件應該返回 false" name="isValidImageUrl - 深度測試 排除非圖片 URL JavaScript 文件應該返回 false" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 排除非圖片 URL CSS 文件應該返回 false" name="isValidImageUrl - 深度測試 排除非圖片 URL CSS 文件應該返回 false" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 排除非圖片 URL HTML 文件應該返回 false" name="isValidImageUrl - 深度測試 排除非圖片 URL HTML 文件應該返回 false" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 排除非圖片 URL PHP 文件應該返回 false" name="isValidImageUrl - 深度測試 排除非圖片 URL PHP 文件應該返回 false" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 排除非圖片 URL ASP/JSP 文件應該返回 false" name="isValidImageUrl - 深度測試 排除非圖片 URL ASP/JSP 文件應該返回 false" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 排除非圖片 URL API 路徑應該返回 false" name="isValidImageUrl - 深度測試 排除非圖片 URL API 路徑應該返回 false" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 排除非圖片 URL AJAX 路徑應該返回 false" name="isValidImageUrl - 深度測試 排除非圖片 URL AJAX 路徑應該返回 false" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 排除非圖片 URL Callback 路徑應該返回 false" name="isValidImageUrl - 深度測試 排除非圖片 URL Callback 路徑應該返回 false" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 排除非圖片 URL 大小寫不敏感" name="isValidImageUrl - 深度測試 排除非圖片 URL 大小寫不敏感" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 協議檢查 HTTP 協議應該返回 true" name="isValidImageUrl - 深度測試 協議檢查 HTTP 協議應該返回 true" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 協議檢查 HTTPS 協議應該返回 true" name="isValidImageUrl - 深度測試 協議檢查 HTTPS 協議應該返回 true" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 協議檢查 非 HTTP/HTTPS 協議應該返回 false" name="isValidImageUrl - 深度測試 協議檢查 非 HTTP/HTTPS 協議應該返回 false" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 錯誤處理 null 應該返回 false" name="isValidImageUrl - 深度測試 錯誤處理 null 應該返回 false" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 錯誤處理 undefined 應該返回 false" name="isValidImageUrl - 深度測試 錯誤處理 undefined 應該返回 false" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 錯誤處理 空字符串應該返回 false" name="isValidImageUrl - 深度測試 錯誤處理 空字符串應該返回 false" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 錯誤處理 無效的 URL 應該返回 false" name="isValidImageUrl - 深度測試 錯誤處理 無效的 URL 應該返回 false" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 錯誤處理 非字符串應該返回 false" name="isValidImageUrl - 深度測試 錯誤處理 非字符串應該返回 false" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 邊界情況 既有擴展名又有圖片路徑" name="isValidImageUrl - 深度測試 邊界情況 既有擴展名又有圖片路徑" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 邊界情況 既沒有擴展名也沒有圖片路徑" name="isValidImageUrl - 深度測試 邊界情況 既沒有擴展名也沒有圖片路徑" time="0">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 邊界情況 有圖片路徑但被排除模式匹配" name="isValidImageUrl - 深度測試 邊界情況 有圖片路徑但被排除模式匹配" time="0.001">
    </testcase>
    <testcase classname="isValidImageUrl - 深度測試 邊界情況 代理 URL 經過清理後的驗證" name="isValidImageUrl - 深度測試 邊界情況 代理 URL 經過清理後的驗證" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Background Image Processing" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.036" tests="34">
    <testcase classname="Background Image Processing cleanImageUrl 应该返回有效的简单图片 URL" name="Background Image Processing cleanImageUrl 应该返回有效的简单图片 URL" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing cleanImageUrl 应该处理带查询参数的 URL" name="Background Image Processing cleanImageUrl 应该处理带查询参数的 URL" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing cleanImageUrl 应该从代理 URL 提取原始图片" name="Background Image Processing cleanImageUrl 应该从代理 URL 提取原始图片" time="0">
    </testcase>
    <testcase classname="Background Image Processing cleanImageUrl 应该处理嵌套的代理 URL" name="Background Image Processing cleanImageUrl 应该处理嵌套的代理 URL" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing cleanImageUrl 应该移除重复的查询参数" name="Background Image Processing cleanImageUrl 应该移除重复的查询参数" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing cleanImageUrl 应该处理 null 和 undefined" name="Background Image Processing cleanImageUrl 应该处理 null 和 undefined" time="0.002">
    </testcase>
    <testcase classname="Background Image Processing cleanImageUrl 应该处理非字符串输入" name="Background Image Processing cleanImageUrl 应该处理非字符串输入" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing cleanImageUrl 应该处理无效的 URL" name="Background Image Processing cleanImageUrl 应该处理无效的 URL" time="0">
    </testcase>
    <testcase classname="Background Image Processing cleanImageUrl 应该处理代理 URL 中缺少 u 参数的情况" name="Background Image Processing cleanImageUrl 应该处理代理 URL 中缺少 u 参数的情况" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing cleanImageUrl 应该处理代理 URL 中 u 参数无效的情况" name="Background Image Processing cleanImageUrl 应该处理代理 URL 中 u 参数无效的情况" time="0">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该接受标准图片 URL" name="Background Image Processing isValidImageUrl 应该接受标准图片 URL" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该接受带查询参数的图片 URL" name="Background Image Processing isValidImageUrl 应该接受带查询参数的图片 URL" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该接受 HTTP 和 HTTPS" name="Background Image Processing isValidImageUrl 应该接受 HTTP 和 HTTPS" time="0">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该支持各种图片格式" name="Background Image Processing isValidImageUrl 应该支持各种图片格式" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该识别图片路径模式" name="Background Image Processing isValidImageUrl 应该识别图片路径模式" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该排除非图片 URL" name="Background Image Processing isValidImageUrl 应该排除非图片 URL" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该拒绝过长的 URL (&gt;2000 字符)" name="Background Image Processing isValidImageUrl 应该拒绝过长的 URL (&gt;2000 字符)" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该接受正常长度的 URL" name="Background Image Processing isValidImageUrl 应该接受正常长度的 URL" time="0">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该拒绝非 HTTP(S) 协议" name="Background Image Processing isValidImageUrl 应该拒绝非 HTTP(S) 协议" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该处理 null、undefined 和空字符串" name="Background Image Processing isValidImageUrl 应该处理 null、undefined 和空字符串" time="0">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该处理非字符串输入" name="Background Image Processing isValidImageUrl 应该处理非字符串输入" time="0">
    </testcase>
    <testcase classname="Background Image Processing isValidImageUrl 应该使用缓存提高性能" name="Background Image Processing isValidImageUrl 应该使用缓存提高性能" time="0">
    </testcase>
    <testcase classname="Background Image Processing cacheValidationResult 应该缓存验证结果" name="Background Image Processing cacheValidationResult 应该缓存验证结果" time="0">
    </testcase>
    <testcase classname="Background Image Processing cacheValidationResult 应该在缓存达到最大大小时删除最旧的条目" name="Background Image Processing cacheValidationResult 应该在缓存达到最大大小时删除最旧的条目" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing cacheValidationResult 应该处理空 URL" name="Background Image Processing cacheValidationResult 应该处理空 URL" time="0">
    </testcase>
    <testcase classname="Background Image Processing splitTextForHighlight 应该返回短文本不变" name="Background Image Processing splitTextForHighlight 应该返回短文本不变" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing splitTextForHighlight 应该分割长文本" name="Background Image Processing splitTextForHighlight 应该分割长文本" time="0">
    </testcase>
    <testcase classname="Background Image Processing splitTextForHighlight 应该在句号处分割" name="Background Image Processing splitTextForHighlight 应该在句号处分割" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing splitTextForHighlight 应该在空格处分割（如果没有标点）" name="Background Image Processing splitTextForHighlight 应该在空格处分割（如果没有标点）" time="0">
    </testcase>
    <testcase classname="Background Image Processing splitTextForHighlight 应该强制分割无间断文本" name="Background Image Processing splitTextForHighlight 应该强制分割无间断文本" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing splitTextForHighlight 应该处理空文本" name="Background Image Processing splitTextForHighlight 应该处理空文本" time="0">
    </testcase>
    <testcase classname="Background Image Processing splitTextForHighlight 应该过滤空字符串片段" name="Background Image Processing splitTextForHighlight 应该过滤空字符串片段" time="0.001">
    </testcase>
    <testcase classname="Background Image Processing 图片处理集成测试 应该完整处理图片 URL 流程" name="Background Image Processing 图片处理集成测试 应该完整处理图片 URL 流程" time="0">
    </testcase>
    <testcase classname="Background Image Processing 图片处理集成测试 应该处理复杂的真实世界场景" name="Background Image Processing 图片处理集成测试 应该处理复杂的真实世界场景" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="日期格式化函數" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.028" tests="12">
    <testcase classname="日期格式化函數 formatDate() 應該格式化標準日期" name="日期格式化函數 formatDate() 應該格式化標準日期" time="0.01">
    </testcase>
    <testcase classname="日期格式化函數 formatDate() 應該格式化包含時間的日期" name="日期格式化函數 formatDate() 應該格式化包含時間的日期" time="0">
    </testcase>
    <testcase classname="日期格式化函數 formatDate() 應該處理無效日期" name="日期格式化函數 formatDate() 應該處理無效日期" time="0.001">
    </testcase>
    <testcase classname="日期格式化函數 formatDate() 應該處理 null 和 undefined" name="日期格式化函數 formatDate() 應該處理 null 和 undefined" time="0">
    </testcase>
    <testcase classname="日期格式化函數 formatDate() 應該格式化 ISO 8601 日期字符串" name="日期格式化函數 formatDate() 應該格式化 ISO 8601 日期字符串" time="0">
    </testcase>
    <testcase classname="日期格式化函數 getRelativeTime() 應該返回「剛剛」對於幾秒前" name="日期格式化函數 getRelativeTime() 應該返回「剛剛」對於幾秒前" time="0.001">
    </testcase>
    <testcase classname="日期格式化函數 getRelativeTime() 應該返回「X 分鐘前」" name="日期格式化函數 getRelativeTime() 應該返回「X 分鐘前」" time="0">
    </testcase>
    <testcase classname="日期格式化函數 getRelativeTime() 應該返回「X 小時前」" name="日期格式化函數 getRelativeTime() 應該返回「X 小時前」" time="0.001">
    </testcase>
    <testcase classname="日期格式化函數 getRelativeTime() 應該返回「X 天前」" name="日期格式化函數 getRelativeTime() 應該返回「X 天前」" time="0">
    </testcase>
    <testcase classname="日期格式化函數 parseDate() 應該解析標準日期字符串" name="日期格式化函數 parseDate() 應該解析標準日期字符串" time="0">
    </testcase>
    <testcase classname="日期格式化函數 parseDate() 應該解析時間戳" name="日期格式化函數 parseDate() 應該解析時間戳" time="0.001">
    </testcase>
    <testcase classname="日期格式化函數 parseDate() 應該處理各種日期格式" name="日期格式化函數 parseDate() 應該處理各種日期格式" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Logger" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.099" tests="28">
    <testcase classname="Logger debug 應該輸出 debug 級別日誌" name="Logger debug 應該輸出 debug 級別日誌" time="0.002">
    </testcase>
    <testcase classname="Logger debug 應該輸出 debug 日誌並附加參數" name="Logger debug 應該輸出 debug 日誌並附加參數" time="0.002">
    </testcase>
    <testcase classname="Logger debug 應該處理空訊息" name="Logger debug 應該處理空訊息" time="0.002">
    </testcase>
    <testcase classname="Logger debug 應該處理特殊字符" name="Logger debug 應該處理特殊字符" time="0.001">
    </testcase>
    <testcase classname="Logger info 應該輸出 info 級別日誌" name="Logger info 應該輸出 info 級別日誌" time="0.001">
    </testcase>
    <testcase classname="Logger info 應該輸出 info 日誌並附加多個參數" name="Logger info 應該輸出 info 日誌並附加多個參數" time="0.001">
    </testcase>
    <testcase classname="Logger info 應該處理數字參數" name="Logger info 應該處理數字參數" time="0.001">
    </testcase>
    <testcase classname="Logger info 應該處理布林值參數" name="Logger info 應該處理布林值參數" time="0.001">
    </testcase>
    <testcase classname="Logger warn 應該輸出 warn 級別日誌" name="Logger warn 應該輸出 warn 級別日誌" time="0.001">
    </testcase>
    <testcase classname="Logger warn 應該輸出 warn 日誌並附加參數" name="Logger warn 應該輸出 warn 日誌並附加參數" time="0.001">
    </testcase>
    <testcase classname="Logger warn 應該處理錯誤對象" name="Logger warn 應該處理錯誤對象" time="0.001">
    </testcase>
    <testcase classname="Logger warn 應該處理 null 和 undefined" name="Logger warn 應該處理 null 和 undefined" time="0.001">
    </testcase>
    <testcase classname="Logger error 應該輸出 error 級別日誌" name="Logger error 應該輸出 error 級別日誌" time="0.001">
    </testcase>
    <testcase classname="Logger error 應該輸出 error 日誌並附加錯誤對象" name="Logger error 應該輸出 error 日誌並附加錯誤對象" time="0.014">
    </testcase>
    <testcase classname="Logger error 應該處理錯誤堆疊信息" name="Logger error 應該處理錯誤堆疊信息" time="0.001">
    </testcase>
    <testcase classname="Logger error 應該處理複雜對象" name="Logger error 應該處理複雜對象" time="0">
    </testcase>
    <testcase classname="Logger 多參數處理 應該處理沒有額外參數的情況" name="Logger 多參數處理 應該處理沒有額外參數的情況" time="0.001">
    </testcase>
    <testcase classname="Logger 多參數處理 應該處理大量參數" name="Logger 多參數處理 應該處理大量參數" time="0.001">
    </testcase>
    <testcase classname="Logger 多參數處理 應該處理混合類型參數" name="Logger 多參數處理 應該處理混合類型參數" time="0.002">
    </testcase>
    <testcase classname="Logger 實際使用場景 應該記錄功能初始化" name="Logger 實際使用場景 應該記錄功能初始化" time="0.001">
    </testcase>
    <testcase classname="Logger 實際使用場景 應該記錄數據保存" name="Logger 實際使用場景 應該記錄數據保存" time="0.002">
    </testcase>
    <testcase classname="Logger 實際使用場景 應該記錄 API 錯誤" name="Logger 實際使用場景 應該記錄 API 錯誤" time="0">
    </testcase>
    <testcase classname="Logger 實際使用場景 應該記錄性能警告" name="Logger 實際使用場景 應該記錄性能警告" time="0.001">
    </testcase>
    <testcase classname="Logger 邊界情況 應該處理 undefined 訊息" name="Logger 邊界情況 應該處理 undefined 訊息" time="0">
    </testcase>
    <testcase classname="Logger 邊界情況 應該處理 null 訊息" name="Logger 邊界情況 應該處理 null 訊息" time="0.001">
    </testcase>
    <testcase classname="Logger 邊界情況 應該處理數字訊息" name="Logger 邊界情況 應該處理數字訊息" time="0">
    </testcase>
    <testcase classname="Logger 邊界情況 應該處理非常長的訊息" name="Logger 邊界情況 應該處理非常長的訊息" time="0.001">
    </testcase>
    <testcase classname="Logger 邊界情況 應該處理 Symbol" name="Logger 邊界情況 應該處理 Symbol" time="0">
    </testcase>
  </testsuite>
  <testsuite name="AttributeExtractor" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.028" tests="26">
    <testcase classname="AttributeExtractor extract 應該從圖片元素提取標準 src 屬性" name="AttributeExtractor extract 應該從圖片元素提取標準 src 屬性" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor extract 應該從圖片元素提取 data-src 屬性" name="AttributeExtractor extract 應該從圖片元素提取 data-src 屬性" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor extract 應該優先提取高優先級屬性" name="AttributeExtractor extract 應該優先提取高優先級屬性" time="0">
    </testcase>
    <testcase classname="AttributeExtractor extract 應該清理屬性值中的引號" name="AttributeExtractor extract 應該清理屬性值中的引號" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor extract 應該驗證圖片 URL 的有效性" name="AttributeExtractor extract 應該驗證圖片 URL 的有效性" time="0">
    </testcase>
    <testcase classname="AttributeExtractor extract 應該處理無效的圖片元素" name="AttributeExtractor extract 應該處理無效的圖片元素" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor extract 應該處理沒有屬性的圖片元素" name="AttributeExtractor extract 應該處理沒有屬性的圖片元素" time="0">
    </testcase>
    <testcase classname="AttributeExtractor extractAll 應該提取所有可用的圖片 URL" name="AttributeExtractor extractAll 應該提取所有可用的圖片 URL" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor extractAll 應該按優先級排序" name="AttributeExtractor extractAll 應該按優先級排序" time="0">
    </testcase>
    <testcase classname="AttributeExtractor extractAll 應該去重相同的 URL" name="AttributeExtractor extractAll 應該去重相同的 URL" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor extractAll 應該處理無效的圖片元素" name="AttributeExtractor extractAll 應該處理無效的圖片元素" time="0">
    </testcase>
    <testcase classname="AttributeExtractor hasImageAttributes 應該檢測圖片元素是否有圖片屬性" name="AttributeExtractor hasImageAttributes 應該檢測圖片元素是否有圖片屬性" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor hasImageAttributes 應該返回 false 當圖片元素沒有圖片屬性時" name="AttributeExtractor hasImageAttributes 應該返回 false 當圖片元素沒有圖片屬性時" time="0">
    </testcase>
    <testcase classname="AttributeExtractor hasImageAttributes 應該處理無效的圖片元素" name="AttributeExtractor hasImageAttributes 應該處理無效的圖片元素" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor getAttributeStats 應該獲取屬性統計信息" name="AttributeExtractor getAttributeStats 應該獲取屬性統計信息" time="0">
    </testcase>
    <testcase classname="AttributeExtractor getAttributeStats 應該處理無效的圖片元素" name="AttributeExtractor getAttributeStats 應該處理無效的圖片元素" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor _cleanAttributeValue 應該清理屬性值中的引號" name="AttributeExtractor _cleanAttributeValue 應該清理屬性值中的引號" time="0">
    </testcase>
    <testcase classname="AttributeExtractor _cleanAttributeValue 應該移除首尾空白" name="AttributeExtractor _cleanAttributeValue 應該移除首尾空白" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor _cleanAttributeValue 應該處理無效值" name="AttributeExtractor _cleanAttributeValue 應該處理無效值" time="0">
    </testcase>
    <testcase classname="AttributeExtractor _isValidImageUrl 應該驗證有效的圖片 URL" name="AttributeExtractor _isValidImageUrl 應該驗證有效的圖片 URL" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor _isValidImageUrl 應該拒絕無效的圖片 URL" name="AttributeExtractor _isValidImageUrl 應該拒絕無效的圖片 URL" time="0">
    </testcase>
    <testcase classname="AttributeExtractor getAttributePriority 應該返回屬性的優先級" name="AttributeExtractor getAttributePriority 應該返回屬性的優先級" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor isLazyLoadAttribute 應該識別懶加載屬性" name="AttributeExtractor isLazyLoadAttribute 應該識別懶加載屬性" time="0">
    </testcase>
    <testcase classname="AttributeExtractor isLazyLoadAttribute 應該識別非懶加載屬性" name="AttributeExtractor isLazyLoadAttribute 應該識別非懶加載屬性" time="0.001">
    </testcase>
    <testcase classname="AttributeExtractor isResponsiveAttribute 應該識別響應式圖片屬性" name="AttributeExtractor isResponsiveAttribute 應該識別響應式圖片屬性" time="0">
    </testcase>
    <testcase classname="AttributeExtractor isResponsiveAttribute 應該識別非響應式圖片屬性" name="AttributeExtractor isResponsiveAttribute 應該識別非響應式圖片屬性" time="0">
    </testcase>
  </testsuite>
  <testsuite name="splitTextForHighlight" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.027" tests="32">
    <testcase classname="splitTextForHighlight 基本功能 短文本不分割" name="splitTextForHighlight 基本功能 短文本不分割" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 基本功能 空字符串返回空字符串" name="splitTextForHighlight 基本功能 空字符串返回空字符串" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 基本功能 null 或 undefined 返回包含原值的數組" name="splitTextForHighlight 基本功能 null 或 undefined 返回包含原值的數組" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 基本功能 正好 maxLength 長度的文本不分割" name="splitTextForHighlight 基本功能 正好 maxLength 長度的文本不分割" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 標點符號分割 在句號處分割（中文）" name="splitTextForHighlight 標點符號分割 在句號處分割（中文）" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 標點符號分割 在句號處分割（英文）" name="splitTextForHighlight 標點符號分割 在句號處分割（英文）" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 標點符號分割 在問號處分割" name="splitTextForHighlight 標點符號分割 在問號處分割" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 標點符號分割 在驚嘆號處分割" name="splitTextForHighlight 標點符號分割 在驚嘆號處分割" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 標點符號分割 優先在雙換行符處分割" name="splitTextForHighlight 標點符號分割 優先在雙換行符處分割" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 標點符號分割 在單換行符處分割" name="splitTextForHighlight 標點符號分割 在單換行符處分割" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 空格分割 沒有標點時在空格處分割" name="splitTextForHighlight 空格分割 沒有標點時在空格處分割" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 空格分割 多個空格時選擇最接近 maxLength 的位置" name="splitTextForHighlight 空格分割 多個空格時選擇最接近 maxLength 的位置" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 強制分割 無標點無空格時強制在 maxLength 處分割" name="splitTextForHighlight 強制分割 無標點無空格時強制在 maxLength 處分割" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 強制分割 連續無間斷文本正確分割" name="splitTextForHighlight 強制分割 連續無間斷文本正確分割" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 分割位置智能性 避免在文本前半部分分割" name="splitTextForHighlight 分割位置智能性 避免在文本前半部分分割" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 分割位置智能性 至少分割到一半以上" name="splitTextForHighlight 分割位置智能性 至少分割到一半以上" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 多次分割 超長文本分割成多個片段" name="splitTextForHighlight 多次分割 超長文本分割成多個片段" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 多次分割 帶標點的超長文本正確分割" name="splitTextForHighlight 多次分割 帶標點的超長文本正確分割" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 多次分割 所有片段長度都在限制內" name="splitTextForHighlight 多次分割 所有片段長度都在限制內" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 自定義 maxLength 使用自定義 maxLength = 100" name="splitTextForHighlight 自定義 maxLength 使用自定義 maxLength = 100" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 自定義 maxLength 使用自定義 maxLength = 500" name="splitTextForHighlight 自定義 maxLength 使用自定義 maxLength = 500" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 自定義 maxLength maxLength = 1 時每個字符一個片段" name="splitTextForHighlight 自定義 maxLength maxLength = 1 時每個字符一個片段" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 邊界情況 文本恰好在標點後達到 maxLength" name="splitTextForHighlight 邊界情況 文本恰好在標點後達到 maxLength" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 邊界情況 只有標點符號的文本" name="splitTextForHighlight 邊界情況 只有標點符號的文本" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 邊界情況 只有空格的文本" name="splitTextForHighlight 邊界情況 只有空格的文本" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 邊界情況 混合中英文標點" name="splitTextForHighlight 邊界情況 混合中英文標點" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 邊界情況 包含特殊 Unicode 字符" name="splitTextForHighlight 邊界情況 包含特殊 Unicode 字符" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 實際使用場景 文章段落分割" name="splitTextForHighlight 實際使用場景 文章段落分割" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 實際使用場景 代碼片段分割（保持在函數邊界）" name="splitTextForHighlight 實際使用場景 代碼片段分割（保持在函數邊界）" time="0.001">
    </testcase>
    <testcase classname="splitTextForHighlight 實際使用場景 新聞文章分割（多段落）" name="splitTextForHighlight 實際使用場景 新聞文章分割（多段落）" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 性能測試 處理超大文本（10000 字符）" name="splitTextForHighlight 性能測試 處理超大文本（10000 字符）" time="0">
    </testcase>
    <testcase classname="splitTextForHighlight 性能測試 處理超大文本（50000 字符）" name="splitTextForHighlight 性能測試 處理超大文本（50000 字符）" time="0">
    </testcase>
  </testsuite>
  <testsuite name="utils.js" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:16" time="0.042" tests="18">
    <testcase classname="utils.js normalizeUrl 應該標準化 URL 並移除 hash" name="utils.js normalizeUrl 應該標準化 URL 並移除 hash" time="0.001">
    </testcase>
    <testcase classname="utils.js normalizeUrl 應該移除追蹤參數" name="utils.js normalizeUrl 應該移除追蹤參數" time="0">
    </testcase>
    <testcase classname="utils.js normalizeUrl 應該標準化尾部斜杠" name="utils.js normalizeUrl 應該標準化尾部斜杠" time="0.001">
    </testcase>
    <testcase classname="utils.js normalizeUrl 應該處理無效 URL" name="utils.js normalizeUrl 應該處理無效 URL" time="0.001">
    </testcase>
    <testcase classname="utils.js StorageUtil saveHighlights 應該成功保存標註到 chrome.storage" name="utils.js StorageUtil saveHighlights 應該成功保存標註到 chrome.storage" time="0">
    </testcase>
    <testcase classname="utils.js StorageUtil saveHighlights 應該在 chrome.storage 失敗時回退到 localStorage" name="utils.js StorageUtil saveHighlights 應該在 chrome.storage 失敗時回退到 localStorage" time="0.002">
    </testcase>
    <testcase classname="utils.js StorageUtil saveHighlights 應該處理 chrome.storage 不可用的情況" name="utils.js StorageUtil saveHighlights 應該處理 chrome.storage 不可用的情況" time="0.001">
    </testcase>
    <testcase classname="utils.js StorageUtil loadHighlights 應該從 chrome.storage 加載標註" name="utils.js StorageUtil loadHighlights 應該從 chrome.storage 加載標註" time="0.001">
    </testcase>
    <testcase classname="utils.js StorageUtil loadHighlights 應該處理舊格式數據（數組）" name="utils.js StorageUtil loadHighlights 應該處理舊格式數據（數組）" time="0">
    </testcase>
    <testcase classname="utils.js StorageUtil loadHighlights 應該處理新格式數據（對象）" name="utils.js StorageUtil loadHighlights 應該處理新格式數據（對象）" time="0">
    </testcase>
    <testcase classname="utils.js StorageUtil loadHighlights 應該在 chrome.storage 無數據時回退到 localStorage" name="utils.js StorageUtil loadHighlights 應該在 chrome.storage 無數據時回退到 localStorage" time="0.001">
    </testcase>
    <testcase classname="utils.js StorageUtil loadHighlights 應該處理 chrome.storage 不可用的情況" name="utils.js StorageUtil loadHighlights 應該處理 chrome.storage 不可用的情況" time="0.001">
    </testcase>
    <testcase classname="utils.js StorageUtil clearHighlights 應該清除 chrome.storage 和 localStorage 中的標註" name="utils.js StorageUtil clearHighlights 應該清除 chrome.storage 和 localStorage 中的標註" time="0.001">
    </testcase>
    <testcase classname="utils.js StorageUtil clearHighlights 應該處理 chrome.storage 不可用的情況" name="utils.js StorageUtil clearHighlights 應該處理 chrome.storage 不可用的情況" time="0">
    </testcase>
    <testcase classname="utils.js Logger 應該正確記錄 debug 信息（透過背景 sink）" name="utils.js Logger 應該正確記錄 debug 信息（透過背景 sink）" time="0.001">
    </testcase>
    <testcase classname="utils.js Logger 應該正確記錄 info 信息（透過背景 sink）" name="utils.js Logger 應該正確記錄 info 信息（透過背景 sink）" time="0">
    </testcase>
    <testcase classname="utils.js Logger 應該正確記錄 warn 信息（透過背景 sink）" name="utils.js Logger 應該正確記錄 warn 信息（透過背景 sink）" time="0.001">
    </testcase>
    <testcase classname="utils.js Logger 應該正確記錄 error 信息（透過背景 sink）" name="utils.js Logger 應該正確記錄 error 信息（透過背景 sink）" time="0">
    </testcase>
  </testsuite>
  <testsuite name="seamless-migration.js" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.035" tests="15">
    <testcase classname="seamless-migration.js SeamlessMigrationManager getMigrationState 應該獲取當前頁面的遷移狀態" name="seamless-migration.js SeamlessMigrationManager getMigrationState 應該獲取當前頁面的遷移狀態" time="0.001">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager getMigrationState 應該處理無法讀取狀態的情況" name="seamless-migration.js SeamlessMigrationManager getMigrationState 應該處理無法讀取狀態的情況" time="0.001">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager updateMigrationState 應該更新遷移狀態" name="seamless-migration.js SeamlessMigrationManager updateMigrationState 應該更新遷移狀態" time="0.001">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager updateMigrationState 應該處理無法保存狀態的情況" name="seamless-migration.js SeamlessMigrationManager updateMigrationState 應該處理無法保存狀態的情況" time="0">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager performSeamlessMigration 應該檢查瀏覽器支持並跳過不支持的瀏覽器" name="seamless-migration.js SeamlessMigrationManager performSeamlessMigration 應該檢查瀏覽器支持並跳過不支持的瀏覽器" time="0.001">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager performSeamlessMigration 應該跳過沒有舊標註的頁面" name="seamless-migration.js SeamlessMigrationManager performSeamlessMigration 應該跳過沒有舊標註的頁面" time="0.001">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager phase1_CreateNewHighlights 應該為舊標註創建新標註" name="seamless-migration.js SeamlessMigrationManager phase1_CreateNewHighlights 應該為舊標註創建新標註" time="0.001">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager phase1_CreateNewHighlights 應該處理沒有舊標註的情況" name="seamless-migration.js SeamlessMigrationManager phase1_CreateNewHighlights 應該處理沒有舊標註的情況" time="0">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager phase2_VerifyAndHide 應該驗證新標註並進入階段3" name="seamless-migration.js SeamlessMigrationManager phase2_VerifyAndHide 應該驗證新標註並進入階段3" time="0.001">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager phase2_VerifyAndHide 應該在新標註未恢復時回滾" name="seamless-migration.js SeamlessMigrationManager phase2_VerifyAndHide 應該在新標註未恢復時回滾" time="0">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager phase3_RemoveOldSpans 應該完全移除舊span" name="seamless-migration.js SeamlessMigrationManager phase3_RemoveOldSpans 應該完全移除舊span" time="0.001">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager rollback 應該恢復舊標註顯示" name="seamless-migration.js SeamlessMigrationManager rollback 應該恢復舊標註顯示" time="0.001">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager checkBrowserSupport 應該檢查瀏覽器支持" name="seamless-migration.js SeamlessMigrationManager checkBrowserSupport 應該檢查瀏覽器支持" time="0">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager checkBrowserSupport 應該在不支持時返回false" name="seamless-migration.js SeamlessMigrationManager checkBrowserSupport 應該在不支持時返回false" time="0.001">
    </testcase>
    <testcase classname="seamless-migration.js SeamlessMigrationManager convertColorToName 應該轉換顏色值" name="seamless-migration.js SeamlessMigrationManager convertColorToName 應該轉換顏色值" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Background Storage Operations" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.027" tests="19">
    <testcase classname="Background Storage Operations getConfig 應該從 sync storage 獲取配置" name="Background Storage Operations getConfig 應該從 sync storage 獲取配置" time="0.001">
    </testcase>
    <testcase classname="Background Storage Operations getConfig 應該處理不存在的配置鍵" name="Background Storage Operations getConfig 應該處理不存在的配置鍵" time="0.001">
    </testcase>
    <testcase classname="Background Storage Operations getConfig 應該處理空配置請求" name="Background Storage Operations getConfig 應該處理空配置請求" time="0">
    </testcase>
    <testcase classname="Background Storage Operations getSavedPageData 應該獲取已保存的頁面數據" name="Background Storage Operations getSavedPageData 應該獲取已保存的頁面數據" time="0.001">
    </testcase>
    <testcase classname="Background Storage Operations getSavedPageData 應該返回 null 當頁面未保存時" name="Background Storage Operations getSavedPageData 應該返回 null 當頁面未保存時" time="0">
    </testcase>
    <testcase classname="Background Storage Operations getSavedPageData 應該處理特殊字符的 URL" name="Background Storage Operations getSavedPageData 應該處理特殊字符的 URL" time="0.001">
    </testcase>
    <testcase classname="Background Storage Operations setSavedPageData 應該保存頁面數據" name="Background Storage Operations setSavedPageData 應該保存頁面數據" time="0.004">
    </testcase>
    <testcase classname="Background Storage Operations setSavedPageData 應該添加 lastUpdated 時間戳" name="Background Storage Operations setSavedPageData 應該添加 lastUpdated 時間戳" time="0.001">
    </testcase>
    <testcase classname="Background Storage Operations setSavedPageData 應該覆蓋已存在的數據" name="Background Storage Operations setSavedPageData 應該覆蓋已存在的數據" time="0">
    </testcase>
    <testcase classname="Background Storage Operations clearPageState 應該清除頁面的保存狀態和標註" name="Background Storage Operations clearPageState 應該清除頁面的保存狀態和標註" time="0.001">
    </testcase>
    <testcase classname="Background Storage Operations clearPageState 應該處理不存在的頁面" name="Background Storage Operations clearPageState 應該處理不存在的頁面" time="0">
    </testcase>
    <testcase classname="Background Storage Operations clearPageState 應該只清除指定頁面的數據" name="Background Storage Operations clearPageState 應該只清除指定頁面的數據" time="0.001">
    </testcase>
    <testcase classname="Background Storage Operations 存儲配額處理 應該檢測存儲空間使用情況" name="Background Storage Operations 存儲配額處理 應該檢測存儲空間使用情況" time="0">
    </testcase>
    <testcase classname="Background Storage Operations 存儲配額處理 應該處理存儲配額錯誤" name="Background Storage Operations 存儲配額處理 應該處理存儲配額錯誤" time="0.001">
    </testcase>
    <testcase classname="Background Storage Operations 並發操作 應該處理並發保存操作" name="Background Storage Operations 並發操作 應該處理並發保存操作" time="0">
    </testcase>
    <testcase classname="Background Storage Operations 並發操作 應該處理並發讀取操作" name="Background Storage Operations 並發操作 應該處理並發讀取操作" time="0.001">
    </testcase>
    <testcase classname="Background Storage Operations 數據遷移 應該識別需要遷移的舊格式數據" name="Background Storage Operations 數據遷移 應該識別需要遷移的舊格式數據" time="0">
    </testcase>
    <testcase classname="Background Storage Operations 數據遷移 應該遷移舊格式數據到新格式" name="Background Storage Operations 數據遷移 應該遷移舊格式數據到新格式" time="0.001">
    </testcase>
    <testcase classname="Background Storage Operations 數據遷移 應該保留新格式數據不變" name="Background Storage Operations 數據遷移 應該保留新格式數據不變" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Background Extension Lifecycle" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.023" tests="20">
    <testcase classname="Background Extension Lifecycle handleExtensionUpdate 應該記錄更新信息" name="Background Extension Lifecycle handleExtensionUpdate 應該記錄更新信息" time="0.001">
    </testcase>
    <testcase classname="Background Extension Lifecycle handleExtensionUpdate 應該在重要更新時顯示通知" name="Background Extension Lifecycle handleExtensionUpdate 應該在重要更新時顯示通知" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle handleExtensionUpdate 應該在非重要更新時跳過通知" name="Background Extension Lifecycle handleExtensionUpdate 應該在非重要更新時跳過通知" time="0.001">
    </testcase>
    <testcase classname="Background Extension Lifecycle handleExtensionInstall 應該記錄首次安裝信息" name="Background Extension Lifecycle handleExtensionInstall 應該記錄首次安裝信息" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle shouldShowUpdateNotification 應該為重要更新返回 true" name="Background Extension Lifecycle shouldShowUpdateNotification 應該為重要更新返回 true" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle shouldShowUpdateNotification 應該為非重要更新返回 false" name="Background Extension Lifecycle shouldShowUpdateNotification 應該為非重要更新返回 false" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle shouldShowUpdateNotification 應該為開發版本返回 false" name="Background Extension Lifecycle shouldShowUpdateNotification 應該為開發版本返回 false" time="0.001">
    </testcase>
    <testcase classname="Background Extension Lifecycle shouldShowUpdateNotification 應該處理空值" name="Background Extension Lifecycle shouldShowUpdateNotification 應該處理空值" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle isImportantUpdate 應該識別重要更新版本" name="Background Extension Lifecycle isImportantUpdate 應該識別重要更新版本" time="0.001">
    </testcase>
    <testcase classname="Background Extension Lifecycle isImportantUpdate 應該識別非重要更新版本" name="Background Extension Lifecycle isImportantUpdate 應該識別非重要更新版本" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle isImportantUpdate 應該處理無效版本" name="Background Extension Lifecycle isImportantUpdate 應該處理無效版本" time="0.001">
    </testcase>
    <testcase classname="Background Extension Lifecycle showUpdateNotification 應該創建更新通知標籤頁" name="Background Extension Lifecycle showUpdateNotification 應該創建更新通知標籤頁" time="0.001">
    </testcase>
    <testcase classname="Background Extension Lifecycle showUpdateNotification 應該正確編碼 URL 參數" name="Background Extension Lifecycle showUpdateNotification 應該正確編碼 URL 參數" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle showUpdateNotification 應該處理創建標籤頁的錯誤" name="Background Extension Lifecycle showUpdateNotification 應該處理創建標籤頁的錯誤" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle 版本比較邏輯 應該正確處理版本號格式" name="Background Extension Lifecycle 版本比較邏輯 應該正確處理版本號格式" time="0.001">
    </testcase>
    <testcase classname="Background Extension Lifecycle 版本比較邏輯 應該處理預發布版本" name="Background Extension Lifecycle 版本比較邏輯 應該處理預發布版本" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle 錯誤處理 handleExtensionUpdate 應該處理異常" name="Background Extension Lifecycle 錯誤處理 handleExtensionUpdate 應該處理異常" time="0.001">
    </testcase>
    <testcase classname="Background Extension Lifecycle 錯誤處理 showUpdateNotification 應該處理 Chrome API 錯誤" name="Background Extension Lifecycle 錯誤處理 showUpdateNotification 應該處理 Chrome API 錯誤" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle 集成測試 完整的更新流程應該正常工作" name="Background Extension Lifecycle 集成測試 完整的更新流程應該正常工作" time="0">
    </testcase>
    <testcase classname="Background Extension Lifecycle 集成測試 非重要更新不應該顯示通知" name="Background Extension Lifecycle 集成測試 非重要更新不應該顯示通知" time="0">
    </testcase>
  </testsuite>
  <testsuite name="normalizeUrl" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.023" tests="21">
    <testcase classname="normalizeUrl 基本功能 應該返回不變的簡單 URL" name="normalizeUrl 基本功能 應該返回不變的簡單 URL" time="0">
    </testcase>
    <testcase classname="normalizeUrl 基本功能 應該處理根路徑" name="normalizeUrl 基本功能 應該處理根路徑" time="0.001">
    </testcase>
    <testcase classname="normalizeUrl 基本功能 應該保持查詢參數（非追蹤參數）" name="normalizeUrl 基本功能 應該保持查詢參數（非追蹤參數）" time="0">
    </testcase>
    <testcase classname="normalizeUrl 移除 Hash Fragment 應該移除 hash fragment" name="normalizeUrl 移除 Hash Fragment 應該移除 hash fragment" time="0.001">
    </testcase>
    <testcase classname="normalizeUrl 移除 Hash Fragment 應該移除複雜的 hash" name="normalizeUrl 移除 Hash Fragment 應該移除複雜的 hash" time="0">
    </testcase>
    <testcase classname="normalizeUrl 移除追蹤參數 應該移除 utm_source" name="normalizeUrl 移除追蹤參數 應該移除 utm_source" time="0.001">
    </testcase>
    <testcase classname="normalizeUrl 移除追蹤參數 應該移除所有 UTM 參數" name="normalizeUrl 移除追蹤參數 應該移除所有 UTM 參數" time="0">
    </testcase>
    <testcase classname="normalizeUrl 移除追蹤參數 應該移除 fbclid" name="normalizeUrl 移除追蹤參數 應該移除 fbclid" time="0">
    </testcase>
    <testcase classname="normalizeUrl 移除追蹤參數 應該移除 gclid" name="normalizeUrl 移除追蹤參數 應該移除 gclid" time="0.001">
    </testcase>
    <testcase classname="normalizeUrl 移除追蹤參數 應該移除多個追蹤參數" name="normalizeUrl 移除追蹤參數 應該移除多個追蹤參數" time="0">
    </testcase>
    <testcase classname="normalizeUrl 標準化尾部斜杠 應該移除非根路徑的尾部斜杠" name="normalizeUrl 標準化尾部斜杠 應該移除非根路徑的尾部斜杠" time="0.001">
    </testcase>
    <testcase classname="normalizeUrl 標準化尾部斜杠 應該保留根路徑的斜杠" name="normalizeUrl 標準化尾部斜杠 應該保留根路徑的斜杠" time="0">
    </testcase>
    <testcase classname="normalizeUrl 標準化尾部斜杠 應該移除多個尾部斜杠" name="normalizeUrl 標準化尾部斜杠 應該移除多個尾部斜杠" time="0">
    </testcase>
    <testcase classname="normalizeUrl 組合場景 應該處理包含所有變體的 URL" name="normalizeUrl 組合場景 應該處理包含所有變體的 URL" time="0.001">
    </testcase>
    <testcase classname="normalizeUrl 組合場景 應該處理複雜的真實世界 URL" name="normalizeUrl 組合場景 應該處理複雜的真實世界 URL" time="0">
    </testcase>
    <testcase classname="normalizeUrl 錯誤處理 應該處理無效的 URL" name="normalizeUrl 錯誤處理 應該處理無效的 URL" time="0.001">
    </testcase>
    <testcase classname="normalizeUrl 錯誤處理 應該處理空字串" name="normalizeUrl 錯誤處理 應該處理空字串" time="0">
    </testcase>
    <testcase classname="normalizeUrl 錯誤處理 應該處理 null" name="normalizeUrl 錯誤處理 應該處理 null" time="0">
    </testcase>
    <testcase classname="normalizeUrl 錯誤處理 應該處理 undefined" name="normalizeUrl 錯誤處理 應該處理 undefined" time="0.001">
    </testcase>
    <testcase classname="normalizeUrl 特殊字符和編碼 應該處理 URL 編碼(可能會被轉換)" name="normalizeUrl 特殊字符和編碼 應該處理 URL 編碼(可能會被轉換)" time="0">
    </testcase>
    <testcase classname="normalizeUrl 特殊字符和編碼 應該處理中文字符" name="normalizeUrl 特殊字符和編碼 應該處理中文字符" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="background.normalizeUrl" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.029" tests="23">
    <testcase classname="background.normalizeUrl 基本功能 應該返回不變的簡單 URL" name="background.normalizeUrl 基本功能 應該返回不變的簡單 URL" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 基本功能 應該處理根路徑" name="background.normalizeUrl 基本功能 應該處理根路徑" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 基本功能 應該保持查詢參數（非追蹤參數）" name="background.normalizeUrl 基本功能 應該保持查詢參數（非追蹤參數）" time="0">
    </testcase>
    <testcase classname="background.normalizeUrl 移除 Hash Fragment 應該移除 hash fragment" name="background.normalizeUrl 移除 Hash Fragment 應該移除 hash fragment" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 移除 Hash Fragment 應該移除複雜的 hash" name="background.normalizeUrl 移除 Hash Fragment 應該移除複雜的 hash" time="0">
    </testcase>
    <testcase classname="background.normalizeUrl 移除追蹤參數 應該移除 utm_source" name="background.normalizeUrl 移除追蹤參數 應該移除 utm_source" time="0">
    </testcase>
    <testcase classname="background.normalizeUrl 移除追蹤參數 應該移除所有 UTM 參數" name="background.normalizeUrl 移除追蹤參數 應該移除所有 UTM 參數" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 移除追蹤參數 應該移除 fbclid" name="background.normalizeUrl 移除追蹤參數 應該移除 fbclid" time="0.003">
    </testcase>
    <testcase classname="background.normalizeUrl 移除追蹤參數 應該移除 gclid" name="background.normalizeUrl 移除追蹤參數 應該移除 gclid" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 移除追蹤參數 應該移除多個追蹤參數" name="background.normalizeUrl 移除追蹤參數 應該移除多個追蹤參數" time="0">
    </testcase>
    <testcase classname="background.normalizeUrl 標準化尾部斜杠 應該移除非根路徑的尾部斜杠" name="background.normalizeUrl 標準化尾部斜杠 應該移除非根路徑的尾部斜杠" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 標準化尾部斜杠 應該保留根路徑的斜杠" name="background.normalizeUrl 標準化尾部斜杠 應該保留根路徑的斜杠" time="0">
    </testcase>
    <testcase classname="background.normalizeUrl 標準化尾部斜杠 應該移除多個尾部斜杠" name="background.normalizeUrl 標準化尾部斜杠 應該移除多個尾部斜杠" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 組合場景 應該處理包含所有變體的 URL" name="background.normalizeUrl 組合場景 應該處理包含所有變體的 URL" time="0">
    </testcase>
    <testcase classname="background.normalizeUrl 組合場景 應該處理複雜的真實世界 URL" name="background.normalizeUrl 組合場景 應該處理複雜的真實世界 URL" time="0">
    </testcase>
    <testcase classname="background.normalizeUrl 錯誤處理 應該處理無效的 URL" name="background.normalizeUrl 錯誤處理 應該處理無效的 URL" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 錯誤處理 應該處理空字串" name="background.normalizeUrl 錯誤處理 應該處理空字串" time="0">
    </testcase>
    <testcase classname="background.normalizeUrl 錯誤處理 應該處理 null" name="background.normalizeUrl 錯誤處理 應該處理 null" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 錯誤處理 應該處理 undefined" name="background.normalizeUrl 錯誤處理 應該處理 undefined" time="0">
    </testcase>
    <testcase classname="background.normalizeUrl 錯誤處理 應該處理非字符串輸入" name="background.normalizeUrl 錯誤處理 應該處理非字符串輸入" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 特殊字符和編碼 應該處理 URL 編碼" name="background.normalizeUrl 特殊字符和編碼 應該處理 URL 編碼" time="0">
    </testcase>
    <testcase classname="background.normalizeUrl 特殊字符和編碼 應該處理中文字符" name="background.normalizeUrl 特殊字符和編碼 應該處理中文字符" time="0.001">
    </testcase>
    <testcase classname="background.normalizeUrl 特殊字符和編碼 應該處理特殊查詢參數" name="background.normalizeUrl 特殊字符和編碼 應該處理特殊查詢參數" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ScriptInjector" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.036" tests="12">
    <testcase classname="ScriptInjector injectAndExecute 應該成功注入文件並執行函數" name="ScriptInjector injectAndExecute 應該成功注入文件並執行函數" time="0.011">
    </testcase>
    <testcase classname="ScriptInjector injectAndExecute 當 returnResult 為 false 時應該忽略函數返回值" name="ScriptInjector injectAndExecute 當 returnResult 為 false 時應該忽略函數返回值" time="0.001">
    </testcase>
    <testcase classname="ScriptInjector injectAndExecute 應該處理文件注入錯誤" name="ScriptInjector injectAndExecute 應該處理文件注入錯誤" time="0.002">
    </testcase>
    <testcase classname="ScriptInjector injectAndExecute 應該處理函數執行錯誤" name="ScriptInjector injectAndExecute 應該處理函數執行錯誤" time="0.001">
    </testcase>
    <testcase classname="ScriptInjector injectAndExecute 應該處理異常錯誤" name="ScriptInjector injectAndExecute 應該處理異常錯誤" time="0.001">
    </testcase>
    <testcase classname="ScriptInjector injectAndExecute 應該處理 tabId 無效錯誤" name="ScriptInjector injectAndExecute 應該處理 tabId 無效錯誤" time="0.003">
    </testcase>
    <testcase classname="ScriptInjector injectAndExecute 應該在沒有文件和函數時解析" name="ScriptInjector injectAndExecute 應該在沒有文件和函數時解析" time="0">
    </testcase>
    <testcase classname="ScriptInjector injectHighlighter 應該正確調用 injectAndExecute 來注入標記工具" name="ScriptInjector injectHighlighter 應該正確調用 injectAndExecute 來注入標記工具" time="0.001">
    </testcase>
    <testcase classname="ScriptInjector collectHighlights 應該正確調用 injectAndExecute 來收集標記" name="ScriptInjector collectHighlights 應該正確調用 injectAndExecute 來收集標記" time="0.001">
    </testcase>
    <testcase classname="ScriptInjector clearPageHighlights 應該正確調用 injectAndExecute 來清除頁面標記" name="ScriptInjector clearPageHighlights 應該正確調用 injectAndExecute 來清除頁面標記" time="0">
    </testcase>
    <testcase classname="ScriptInjector injectHighlightRestore 應該正確調用 injectAndExecute 來注入標記恢復腳本" name="ScriptInjector injectHighlightRestore 應該正確調用 injectAndExecute 來注入標記恢復腳本" time="0.001">
    </testcase>
    <testcase classname="ScriptInjector injectAndExecute 時間控制 應該保留原始 console 行為控制" name="ScriptInjector injectAndExecute 時間控制 應該保留原始 console 行為控制" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Background Message Handlers" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.019" tests="16">
    <testcase classname="Background Message Handlers checkPageStatus 消息 應該返回未保存狀態當頁面未保存時" name="Background Message Handlers checkPageStatus 消息 應該返回未保存狀態當頁面未保存時" time="0.001">
    </testcase>
    <testcase classname="Background Message Handlers checkPageStatus 消息 應該返回已保存狀態當頁面已保存時" name="Background Message Handlers checkPageStatus 消息 應該返回已保存狀態當頁面已保存時" time="0.001">
    </testcase>
    <testcase classname="Background Message Handlers checkPageStatus 消息 應該處理無法獲取活動標籤頁的錯誤" name="Background Message Handlers checkPageStatus 消息 應該處理無法獲取活動標籤頁的錯誤" time="0">
    </testcase>
    <testcase classname="Background Message Handlers startHighlight 消息 應該成功啟動標註模式" name="Background Message Handlers startHighlight 消息 應該成功啟動標註模式" time="0.001">
    </testcase>
    <testcase classname="Background Message Handlers startHighlight 消息 應該處理無活動標籤頁的錯誤" name="Background Message Handlers startHighlight 消息 應該處理無活動標籤頁的錯誤" time="0">
    </testcase>
    <testcase classname="Background Message Handlers syncHighlights 消息 應該成功同步標註到已保存的頁面" name="Background Message Handlers syncHighlights 消息 應該成功同步標註到已保存的頁面" time="0.001">
    </testcase>
    <testcase classname="Background Message Handlers syncHighlights 消息 應該拒絕同步到未保存的頁面" name="Background Message Handlers syncHighlights 消息 應該拒絕同步到未保存的頁面" time="0">
    </testcase>
    <testcase classname="Background Message Handlers syncHighlights 消息 應該處理缺少 API Key 的錯誤" name="Background Message Handlers syncHighlights 消息 應該處理缺少 API Key 的錯誤" time="0.001">
    </testcase>
    <testcase classname="Background Message Handlers syncHighlights 消息 應該處理空標註列表" name="Background Message Handlers syncHighlights 消息 應該處理空標註列表" time="0">
    </testcase>
    <testcase classname="Background Message Handlers updateHighlights 消息 應該成功更新標註" name="Background Message Handlers updateHighlights 消息 應該成功更新標註" time="0.001">
    </testcase>
    <testcase classname="Background Message Handlers updateHighlights 消息 應該拒絕更新未保存的頁面" name="Background Message Handlers updateHighlights 消息 應該拒絕更新未保存的頁面" time="0">
    </testcase>
    <testcase classname="Background Message Handlers openNotionPage 消息 應該打開 Notion 頁面" name="Background Message Handlers openNotionPage 消息 應該打開 Notion 頁面" time="0.001">
    </testcase>
    <testcase classname="Background Message Handlers openNotionPage 消息 應該處理缺少 URL 的錯誤" name="Background Message Handlers openNotionPage 消息 應該處理缺少 URL 的錯誤" time="0">
    </testcase>
    <testcase classname="Background Message Handlers 未知消息類型 應該返回錯誤對於未知的 action" name="Background Message Handlers 未知消息類型 應該返回錯誤對於未知的 action" time="0">
    </testcase>
    <testcase classname="Background Message Handlers 錯誤處理 應該捕獲並返回處理器中的錯誤" name="Background Message Handlers 錯誤處理 應該捕獲並返回處理器中的錯誤" time="0.001">
    </testcase>
    <testcase classname="Background Message Handlers 錯誤處理 應該處理異步錯誤" name="Background Message Handlers 錯誤處理 應該處理異步錯誤" time="0">
    </testcase>
  </testsuite>
  <testsuite name="convertMarkdownToNotionBlocks - Markdown 原生支持" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.022" tests="18">
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 標題轉換 應該正確轉換 H1 標題" name="convertMarkdownToNotionBlocks - Markdown 原生支持 標題轉換 應該正確轉換 H1 標題" time="0.001">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 標題轉換 應該正確轉換 H2 標題" name="convertMarkdownToNotionBlocks - Markdown 原生支持 標題轉換 應該正確轉換 H2 標題" time="0.001">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 標題轉換 應該正確轉換 H3 標題" name="convertMarkdownToNotionBlocks - Markdown 原生支持 標題轉換 應該正確轉換 H3 標題" time="0">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 標題轉換 應該限制最大標題級別為 3" name="convertMarkdownToNotionBlocks - Markdown 原生支持 標題轉換 應該限制最大標題級別為 3" time="0.001">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 列表轉換 應該轉換無序列表" name="convertMarkdownToNotionBlocks - Markdown 原生支持 列表轉換 應該轉換無序列表" time="0">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 列表轉換 應該轉換帶星號的無序列表" name="convertMarkdownToNotionBlocks - Markdown 原生支持 列表轉換 應該轉換帶星號的無序列表" time="0.001">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 列表轉換 應該轉換有序列表" name="convertMarkdownToNotionBlocks - Markdown 原生支持 列表轉換 應該轉換有序列表" time="0">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 列表轉換 應該處理帶加粗的列表項" name="convertMarkdownToNotionBlocks - Markdown 原生支持 列表轉換 應該處理帶加粗的列表項" time="0">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 代碼區塊轉換 應該轉換代碼區塊" name="convertMarkdownToNotionBlocks - Markdown 原生支持 代碼區塊轉換 應該轉換代碼區塊" time="0.001">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 代碼區塊轉換 應該處理沒有語言標註的代碼區塊" name="convertMarkdownToNotionBlocks - Markdown 原生支持 代碼區塊轉換 應該處理沒有語言標註的代碼區塊" time="0">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 代碼區塊轉換 應該處理未關閉的代碼區塊" name="convertMarkdownToNotionBlocks - Markdown 原生支持 代碼區塊轉換 應該處理未關閉的代碼區塊" time="0.001">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 段落轉換 應該轉換普通段落" name="convertMarkdownToNotionBlocks - Markdown 原生支持 段落轉換 應該轉換普通段落" time="0.003">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 段落轉換 應該合併連續的行到同一段落" name="convertMarkdownToNotionBlocks - Markdown 原生支持 段落轉換 應該合併連續的行到同一段落" time="0">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 混合內容轉換 應該正確處理混合的 Markdown 內容" name="convertMarkdownToNotionBlocks - Markdown 原生支持 混合內容轉換 應該正確處理混合的 Markdown 內容" time="0">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 邊界情況 應該處理空的 Markdown" name="convertMarkdownToNotionBlocks - Markdown 原生支持 邊界情況 應該處理空的 Markdown" time="0.001">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 邊界情況 應該處理只有空行的 Markdown" name="convertMarkdownToNotionBlocks - Markdown 原生支持 邊界情況 應該處理只有空行的 Markdown" time="0">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 邊界情況 應該處理只有標題的 Markdown" name="convertMarkdownToNotionBlocks - Markdown 原生支持 邊界情況 應該處理只有標題的 Markdown" time="0">
    </testcase>
    <testcase classname="convertMarkdownToNotionBlocks - Markdown 原生支持 用戶報告的 gemini-cli 文檔格式 應該正確處理 gemini-cli 文檔的典型結構" name="convertMarkdownToNotionBlocks - Markdown 原生支持 用戶報告的 gemini-cli 文檔格式 應該正確處理 gemini-cli 文檔的典型結構" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Background Update Highlights" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.018" tests="9">
    <testcase classname="Background Update Highlights updateHighlightsOnly 应该成功更新标注到现有页面" name="Background Update Highlights updateHighlightsOnly 应该成功更新标注到现有页面" time="0.001">
    </testcase>
    <testcase classname="Background Update Highlights updateHighlightsOnly 应该处理没有现有标注区域的页面" name="Background Update Highlights updateHighlightsOnly 应该处理没有现有标注区域的页面" time="0">
    </testcase>
    <testcase classname="Background Update Highlights updateHighlightsOnly 应该处理空标注列表" name="Background Update Highlights updateHighlightsOnly 应该处理空标注列表" time="0">
    </testcase>
    <testcase classname="Background Update Highlights updateHighlightsOnly 应该处理超长标注文本（需要分割）" name="Background Update Highlights updateHighlightsOnly 应该处理超长标注文本（需要分割）" time="0.001">
    </testcase>
    <testcase classname="Background Update Highlights updateHighlightsOnly 应该处理获取现有内容失败的情况" name="Background Update Highlights updateHighlightsOnly 应该处理获取现有内容失败的情况" time="0">
    </testcase>
    <testcase classname="Background Update Highlights updateHighlightsOnly 应该处理删除区块失败的情况" name="Background Update Highlights updateHighlightsOnly 应该处理删除区块失败的情况" time="0.001">
    </testcase>
    <testcase classname="Background Update Highlights updateHighlightsOnly 应该处理添加新标注失败的情况" name="Background Update Highlights updateHighlightsOnly 应该处理添加新标注失败的情况" time="0.001">
    </testcase>
    <testcase classname="Background Update Highlights updateHighlightsOnly 应该处理网络错误" name="Background Update Highlights updateHighlightsOnly 应该处理网络错误" time="0">
    </testcase>
    <testcase classname="Background Update Highlights updateHighlightsOnly 应该正确识别和处理标注区域的边界" name="Background Update Highlights updateHighlightsOnly 应该正确识别和处理标注区域的边界" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="模板變數替換" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.018" tests="17">
    <testcase classname="模板變數替換 replaceTemplateVars() 應該替換 {title} 變數" name="模板變數替換 replaceTemplateVars() 應該替換 {title} 變數" time="0.001">
    </testcase>
    <testcase classname="模板變數替換 replaceTemplateVars() 應該替換 {date} 變數" name="模板變數替換 replaceTemplateVars() 應該替換 {date} 變數" time="0">
    </testcase>
    <testcase classname="模板變數替換 replaceTemplateVars() 應該替換 {domain} 變數" name="模板變數替換 replaceTemplateVars() 應該替換 {domain} 變數" time="0.001">
    </testcase>
    <testcase classname="模板變數替換 replaceTemplateVars() 應該替換 {url} 變數" name="模板變數替換 replaceTemplateVars() 應該替換 {url} 變數" time="0">
    </testcase>
    <testcase classname="模板變數替換 replaceTemplateVars() 應該替換多個變數" name="模板變數替換 replaceTemplateVars() 應該替換多個變數" time="0">
    </testcase>
    <testcase classname="模板變數替換 replaceTemplateVars() 應該處理不存在的變數" name="模板變數替換 replaceTemplateVars() 應該處理不存在的變數" time="0.001">
    </testcase>
    <testcase classname="模板變數替換 replaceTemplateVars() 應該處理空字符串變數" name="模板變數替換 replaceTemplateVars() 應該處理空字符串變數" time="0">
    </testcase>
    <testcase classname="模板變數替換 replaceTemplateVars() 應該處理特殊字符" name="模板變數替換 replaceTemplateVars() 應該處理特殊字符" time="0">
    </testcase>
    <testcase classname="模板變數替換 replaceTemplateVars() 應該處理重複的變數" name="模板變數替換 replaceTemplateVars() 應該處理重複的變數" time="0.001">
    </testcase>
    <testcase classname="模板變數替換 extractDomain() 應該從 URL 提取域名" name="模板變數替換 extractDomain() 應該從 URL 提取域名" time="0">
    </testcase>
    <testcase classname="模板變數替換 extractDomain() 應該處理沒有 www 的域名" name="模板變數替換 extractDomain() 應該處理沒有 www 的域名" time="0">
    </testcase>
    <testcase classname="模板變數替換 extractDomain() 應該處理子域名" name="模板變數替換 extractDomain() 應該處理子域名" time="0.001">
    </testcase>
    <testcase classname="模板變數替換 extractDomain() 應該處理端口號" name="模板變數替換 extractDomain() 應該處理端口號" time="0">
    </testcase>
    <testcase classname="模板變數替換 extractDomain() 應該處理無效 URL" name="模板變數替換 extractDomain() 應該處理無效 URL" time="0.001">
    </testcase>
    <testcase classname="模板變數替換 escapeTemplateString() 應該轉義 HTML 特殊字符" name="模板變數替換 escapeTemplateString() 應該轉義 HTML 特殊字符" time="0">
    </testcase>
    <testcase classname="模板變數替換 escapeTemplateString() 應該處理空字符串" name="模板變數替換 escapeTemplateString() 應該處理空字符串" time="0">
    </testcase>
    <testcase classname="模板變數替換 escapeTemplateString() 應該處理只有特殊字符的字符串" name="模板變數替換 escapeTemplateString() 應該處理只有特殊字符的字符串" time="0">
    </testcase>
  </testsuite>
  <testsuite name="路徑壓縮優化 (v2.9.0)" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.019" tests="17">
    <testcase classname="路徑壓縮優化 (v2.9.0) parsePathFromString 應該解析簡單路徑" name="路徑壓縮優化 (v2.9.0) parsePathFromString 應該解析簡單路徑" time="0.001">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) parsePathFromString 應該解析複雜路徑" name="路徑壓縮優化 (v2.9.0) parsePathFromString 應該解析複雜路徑" time="0">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) parsePathFromString 應該解析帶連字符的標籤名" name="路徑壓縮優化 (v2.9.0) parsePathFromString 應該解析帶連字符的標籤名" time="0.001">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) parsePathFromString 應該處理只有元素的路徑" name="路徑壓縮優化 (v2.9.0) parsePathFromString 應該處理只有元素的路徑" time="0">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) parsePathFromString 應該處理大索引值" name="路徑壓縮優化 (v2.9.0) parsePathFromString 應該處理大索引值" time="0">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) parsePathFromString 應該拒絕無效格式" name="路徑壓縮優化 (v2.9.0) parsePathFromString 應該拒絕無效格式" time="0.001">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) parsePathFromString 應該處理空值" name="路徑壓縮優化 (v2.9.0) parsePathFromString 應該處理空值" time="0">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) convertPathToString 應該轉換簡單路徑" name="路徑壓縮優化 (v2.9.0) convertPathToString 應該轉換簡單路徑" time="0.001">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) convertPathToString 應該轉換複雜路徑" name="路徑壓縮優化 (v2.9.0) convertPathToString 應該轉換複雜路徑" time="0">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) convertPathToString 應該處理空數組" name="路徑壓縮優化 (v2.9.0) convertPathToString 應該處理空數組" time="0">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) convertPathToString 應該處理非數組" name="路徑壓縮優化 (v2.9.0) convertPathToString 應該處理非數組" time="0.001">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) 雙向轉換 應該正確往返轉換" name="路徑壓縮優化 (v2.9.0) 雙向轉換 應該正確往返轉換" time="0">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) 雙向轉換 應該處理多種路徑" name="路徑壓縮優化 (v2.9.0) 雙向轉換 應該處理多種路徑" time="0">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) 存儲空間節省 應該顯著減少存儲大小" name="路徑壓縮優化 (v2.9.0) 存儲空間節省 應該顯著減少存儲大小" time="0.001">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) 存儲空間節省 計算 70 個標註的總節省" name="路徑壓縮優化 (v2.9.0) 存儲空間節省 計算 70 個標註的總節省" time="0">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) ID 壓縮 新 ID 格式應該更短" name="路徑壓縮優化 (v2.9.0) ID 壓縮 新 ID 格式應該更短" time="0.001">
    </testcase>
    <testcase classname="路徑壓縮優化 (v2.9.0) ID 壓縮 計算 ID 壓縮的節省" name="路徑壓縮優化 (v2.9.0) ID 壓縮 計算 ID 壓縮的節省" time="0">
    </testcase>
  </testsuite>
  <testsuite name="highlight-restore.js" errors="0" failures="1" skipped="0" timestamp="2025-10-26T07:42:17" time="0.03" tests="9">
    <testcase classname="highlight-restore.js 應該在 initHighlighter 不存在時記錄警告並退出" name="highlight-restore.js 應該在 initHighlighter 不存在時記錄警告並退出" time="0.01">
    </testcase>
    <testcase classname="highlight-restore.js 應該調用 initHighlighter 函數" name="highlight-restore.js 應該調用 initHighlighter 函數" time="0.002">
      <failure>Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

Expected: &quot;🔧 執行標註恢復腳本&quot;

Number of calls: 0
    at Object.&lt;anonymous&gt; (/Volumes/WD1TMac/code/notion-chrome/tests/unit/highlight-restore.test.js:57:29)
    at Promise.then.completed (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/run.js:316:40)
    at _runTest (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/run.js:121:9)
    at run (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Volumes/WD1TMac/code/notion-chrome/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="highlight-restore.js 當 notionHighlighter 不存在時應該記錄警告" name="highlight-restore.js 當 notionHighlighter 不存在時應該記錄警告" time="0.001">
    </testcase>
    <testcase classname="highlight-restore.js 應該調用 forceRestoreHighlights 方法" name="highlight-restore.js 應該調用 forceRestoreHighlights 方法" time="0">
    </testcase>
    <testcase classname="highlight-restore.js 應該處理 forceRestoreHighlights 失敗的情況" name="highlight-restore.js 應該處理 forceRestoreHighlights 失敗的情況" time="0.001">
    </testcase>
    <testcase classname="highlight-restore.js 應該處理 forceRestoreHighlights 錯誤的情況" name="highlight-restore.js 應該處理 forceRestoreHighlights 錯誤的情況" time="0.001">
    </testcase>
    <testcase classname="highlight-restore.js 應該在 500ms 後調用 hide 方法" name="highlight-restore.js 應該在 500ms 後調用 hide 方法" time="0">
    </testcase>
    <testcase classname="highlight-restore.js 當管理器缺少 forceRestoreHighlights 時應該記錄警告" name="highlight-restore.js 當管理器缺少 forceRestoreHighlights 時應該記錄警告" time="0.001">
    </testcase>
    <testcase classname="highlight-restore.js 缺少 hide 方法時應該安全跳過" name="highlight-restore.js 缺少 hide 方法時應該安全跳過" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="SrcsetParser" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.023" tests="12">
    <testcase classname="SrcsetParser parse 應該解析簡單的 srcset" name="SrcsetParser parse 應該解析簡單的 srcset" time="0.001">
    </testcase>
    <testcase classname="SrcsetParser parse 應該處理像素密度描述符" name="SrcsetParser parse 應該處理像素密度描述符" time="0">
    </testcase>
    <testcase classname="SrcsetParser parse 應該處理空 srcset" name="SrcsetParser parse 應該處理空 srcset" time="0.001">
    </testcase>
    <testcase classname="SrcsetParser parse 應該跳過 data: URL" name="SrcsetParser parse 應該跳過 data: URL" time="0">
    </testcase>
    <testcase classname="SrcsetParser parseSrcsetEntries 應該解析多個條目" name="SrcsetParser parseSrcsetEntries 應該解析多個條目" time="0.001">
    </testcase>
    <testcase classname="SrcsetParser parseSrcsetEntries 應該處理沒有描述符的條目" name="SrcsetParser parseSrcsetEntries 應該處理沒有描述符的條目" time="0">
    </testcase>
    <testcase classname="SrcsetParser selectBestUrl 應該選擇最大寬度的圖片" name="SrcsetParser selectBestUrl 應該選擇最大寬度的圖片" time="0.001">
    </testcase>
    <testcase classname="SrcsetParser selectBestUrl 應該選擇最大密度的圖片" name="SrcsetParser selectBestUrl 應該選擇最大密度的圖片" time="0">
    </testcase>
    <testcase classname="SrcsetParser selectBestUrl 應該優先選擇寬度而不是密度" name="SrcsetParser selectBestUrl 應該優先選擇寬度而不是密度" time="0">
    </testcase>
    <testcase classname="SrcsetParser isValidSrcset 應該驗證有效的 srcset" name="SrcsetParser isValidSrcset 應該驗證有效的 srcset" time="0">
    </testcase>
    <testcase classname="SrcsetParser isValidSrcset 應該拒絕無效的 srcset" name="SrcsetParser isValidSrcset 應該拒絕無效的 srcset" time="0">
    </testcase>
    <testcase classname="SrcsetParser getStats 應該返回正確的統計信息" name="SrcsetParser getStats 應該返回正確的統計信息" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PerformanceOptimizer (extra tests)" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.017" tests="4">
    <testcase classname="PerformanceOptimizer (extra tests) cachedQuery caches and returns elements" name="PerformanceOptimizer (extra tests) cachedQuery caches and returns elements" time="0.002">
    </testcase>
    <testcase classname="PerformanceOptimizer (extra tests) clearExpiredCache(force) clears all entries" name="PerformanceOptimizer (extra tests) clearExpiredCache(force) clears all entries" time="0">
    </testcase>
    <testcase classname="PerformanceOptimizer (extra tests) batchDomOperations executes operations when processing runs" name="PerformanceOptimizer (extra tests) batchDomOperations executes operations when processing runs" time="0.001">
    </testcase>
    <testcase classname="PerformanceOptimizer (extra tests) preloadSelectors prewarms selectors" name="PerformanceOptimizer (extra tests) preloadSelectors prewarms selectors" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="AdaptivePerformanceManager" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.033" tests="2">
    <testcase classname="AdaptivePerformanceManager analyzeAndAdjust returns strategy object and applies settings to optimizer" name="AdaptivePerformanceManager analyzeAndAdjust returns strategy object and applies settings to optimizer" time="0.002">
    </testcase>
    <testcase classname="AdaptivePerformanceManager adjustBatchSize and adjustCacheSize update settings" name="AdaptivePerformanceManager adjustBatchSize and adjustCacheSize update settings" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="scripts/background.js require integration" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.018" tests="2">
    <testcase classname="scripts/background.js require integration onInstalled(update) 會顯示更新通知並傳送版本訊息" name="scripts/background.js require integration onInstalled(update) 會顯示更新通知並傳送版本訊息" time="0.003">
    </testcase>
    <testcase classname="scripts/background.js require integration onMessage(openNotionPage) 會開新分頁並回傳成功" name="scripts/background.js require integration onMessage(openNotionPage) 會開新分頁並回傳成功" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Options - 授權管理" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.015" tests="3">
    <testcase classname="Options - 授權管理 disconnectFromNotion 應該正確斷開 Notion 連接並清除授權數據" name="Options - 授權管理 disconnectFromNotion 應該正確斷開 Notion 連接並清除授權數據" time="0.001">
    </testcase>
    <testcase classname="Options - 授權管理 disconnectFromNotion 應該正確處理斷開連接時的錯誤" name="Options - 授權管理 disconnectFromNotion 應該正確處理斷開連接時的錯誤" time="0.001">
    </testcase>
    <testcase classname="Options - 授權管理 disconnectFromNotion 應該在成功斷開連接後更新授權狀態" name="Options - 授權管理 disconnectFromNotion 應該在成功斷開連接後更新授權狀態" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="標註存儲優化 (v2.8.0)" errors="0" failures="0" skipped="0" timestamp="2025-10-26T07:42:17" time="0.015" tests="6">
    <testcase classname="標註存儲優化 (v2.8.0) serializeRange 不應包含 text 字段" name="標註存儲優化 (v2.8.0) serializeRange 不應包含 text 字段" time="0.001">
    </testcase>
    <testcase classname="標註存儲優化 (v2.8.0) deserializeRange 應使用外部 text 參數進行驗證" name="標註存儲優化 (v2.8.0) deserializeRange 應使用外部 text 參數進行驗證" time="0">
    </testcase>
    <testcase classname="標註存儲優化 (v2.8.0) deserializeRange 應向後兼容舊格式（包含 text 字段）" name="標註存儲優化 (v2.8.0) deserializeRange 應向後兼容舊格式（包含 text 字段）" time="0.001">
    </testcase>
    <testcase classname="標註存儲優化 (v2.8.0) 數據遷移 應自動移除舊格式的 text 字段" name="標註存儲優化 (v2.8.0) 數據遷移 應自動移除舊格式的 text 字段" time="0">
    </testcase>
    <testcase classname="標註存儲優化 (v2.8.0) 數據遷移 計算存儲空間節省" name="標註存儲優化 (v2.8.0) 數據遷移 計算存儲空間節省" time="0">
    </testcase>
    <testcase classname="標註存儲優化 (v2.8.0) 實際存儲效果 70個標註的存儲空間對比" name="標註存儲優化 (v2.8.0) 實際存儲效果 70個標註的存儲空間對比" time="0">
    </testcase>
  </testsuite>
</testsuites>